
USB_Custom_Protocol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072ec  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080073f8  080073f8  000083f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007464  08007464  0000918c  2**0
                  CONTENTS
  4 .ARM          00000000  08007464  08007464  0000918c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007464  08007464  0000918c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007464  08007464  00008464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007468  08007468  00008468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  0800746c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011e0  2000018c  080075f8  0000918c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000136c  080075f8  0000936c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000918c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbb0  00000000  00000000  000091b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a3a  00000000  00000000  00014d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  000177a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000792  00000000  00000000  00018210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001926e  00000000  00000000  000189a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea66  00000000  00000000  00031c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000844a3  00000000  00000000  00040676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4b19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000276c  00000000  00000000  000c4b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009a  00000000  00000000  000c72c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000018c 	.word	0x2000018c
 8000128:	00000000 	.word	0x00000000
 800012c:	080073e0 	.word	0x080073e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000190 	.word	0x20000190
 8000148:	080073e0 	.word	0x080073e0

0800014c <SbW_Protocol_Reply>:
#include "Hardware_Interface.h"

void SbW_Protocol_Reply(uint8_t *data, uint16_t len) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	807b      	strh	r3, [r7, #2]
	CDC_Transmit_FS(data, len);
 8000158:	887b      	ldrh	r3, [r7, #2]
 800015a:	4619      	mov	r1, r3
 800015c:	6878      	ldr	r0, [r7, #4]
 800015e:	f006 fd35 	bl	8006bcc <CDC_Transmit_FS>
}
 8000162:	bf00      	nop
 8000164:	3708      	adds	r7, #8
 8000166:	46bd      	mov	sp, r7
 8000168:	bd80      	pop	{r7, pc}

0800016a <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800016a:	b580      	push	{r7, lr}
 800016c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800016e:	f000 f929 	bl	80003c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000172:	f000 f806 	bl	8000182 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000176:	f000 f85f 	bl	8000238 <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 800017a:	f006 fc5f 	bl	8006a3c <MX_USB_DEVICE_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800017e:	bf00      	nop
 8000180:	e7fd      	b.n	800017e <main+0x14>

08000182 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000182:	b580      	push	{r7, lr}
 8000184:	b094      	sub	sp, #80	@ 0x50
 8000186:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000188:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800018c:	2228      	movs	r2, #40	@ 0x28
 800018e:	2100      	movs	r1, #0
 8000190:	4618      	mov	r0, r3
 8000192:	f007 f8f9 	bl	8007388 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000196:	f107 0314 	add.w	r3, r7, #20
 800019a:	2200      	movs	r2, #0
 800019c:	601a      	str	r2, [r3, #0]
 800019e:	605a      	str	r2, [r3, #4]
 80001a0:	609a      	str	r2, [r3, #8]
 80001a2:	60da      	str	r2, [r3, #12]
 80001a4:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	2200      	movs	r2, #0
 80001aa:	601a      	str	r2, [r3, #0]
 80001ac:	605a      	str	r2, [r3, #4]
 80001ae:	609a      	str	r2, [r3, #8]
 80001b0:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001b2:	2301      	movs	r3, #1
 80001b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001bc:	2300      	movs	r3, #0
 80001be:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c0:	2301      	movs	r3, #1
 80001c2:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001c4:	2302      	movs	r3, #2
 80001c6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001cc:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001ce:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80001d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80001d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001d8:	4618      	mov	r0, r3
 80001da:	f001 ffc3 	bl	8002164 <HAL_RCC_OscConfig>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d001      	beq.n	80001e8 <SystemClock_Config+0x66>
		Error_Handler();
 80001e4:	f000 f854 	bl	8000290 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80001e8:	230f      	movs	r3, #15
 80001ea:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ec:	2302      	movs	r3, #2
 80001ee:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f0:	2300      	movs	r3, #0
 80001f2:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001f8:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80001fe:	f107 0314 	add.w	r3, r7, #20
 8000202:	2101      	movs	r1, #1
 8000204:	4618      	mov	r0, r3
 8000206:	f002 fa2f 	bl	8002668 <HAL_RCC_ClockConfig>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <SystemClock_Config+0x92>
		Error_Handler();
 8000210:	f000 f83e 	bl	8000290 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000214:	2310      	movs	r3, #16
 8000216:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000218:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800021c:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f002 fb7d 	bl	8002920 <HAL_RCCEx_PeriphCLKConfig>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <SystemClock_Config+0xae>
		Error_Handler();
 800022c:	f000 f830 	bl	8000290 <Error_Handler>
	}
}
 8000230:	bf00      	nop
 8000232:	3750      	adds	r7, #80	@ 0x50
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800023e:	4b0e      	ldr	r3, [pc, #56]	@ (8000278 <MX_GPIO_Init+0x40>)
 8000240:	699b      	ldr	r3, [r3, #24]
 8000242:	4a0d      	ldr	r2, [pc, #52]	@ (8000278 <MX_GPIO_Init+0x40>)
 8000244:	f043 0320 	orr.w	r3, r3, #32
 8000248:	6193      	str	r3, [r2, #24]
 800024a:	4b0b      	ldr	r3, [pc, #44]	@ (8000278 <MX_GPIO_Init+0x40>)
 800024c:	699b      	ldr	r3, [r3, #24]
 800024e:	f003 0320 	and.w	r3, r3, #32
 8000252:	607b      	str	r3, [r7, #4]
 8000254:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000256:	4b08      	ldr	r3, [pc, #32]	@ (8000278 <MX_GPIO_Init+0x40>)
 8000258:	699b      	ldr	r3, [r3, #24]
 800025a:	4a07      	ldr	r2, [pc, #28]	@ (8000278 <MX_GPIO_Init+0x40>)
 800025c:	f043 0304 	orr.w	r3, r3, #4
 8000260:	6193      	str	r3, [r2, #24]
 8000262:	4b05      	ldr	r3, [pc, #20]	@ (8000278 <MX_GPIO_Init+0x40>)
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	f003 0304 	and.w	r3, r3, #4
 800026a:	603b      	str	r3, [r7, #0]
 800026c:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800026e:	bf00      	nop
 8000270:	370c      	adds	r7, #12
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr
 8000278:	40021000 	.word	0x40021000

0800027c <App_User_Callback>:

/* USER CODE BEGIN 4 */
void App_User_Callback(SbW_Err_Codes_t Error_Code) {
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]

}
 8000286:	bf00      	nop
 8000288:	370c      	adds	r7, #12
 800028a:	46bd      	mov	sp, r7
 800028c:	bc80      	pop	{r7}
 800028e:	4770      	bx	lr

08000290 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000294:	b672      	cpsid	i
}
 8000296:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000298:	bf00      	nop
 800029a:	e7fd      	b.n	8000298 <Error_Handler+0x8>

0800029c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002a2:	4b15      	ldr	r3, [pc, #84]	@ (80002f8 <HAL_MspInit+0x5c>)
 80002a4:	699b      	ldr	r3, [r3, #24]
 80002a6:	4a14      	ldr	r2, [pc, #80]	@ (80002f8 <HAL_MspInit+0x5c>)
 80002a8:	f043 0301 	orr.w	r3, r3, #1
 80002ac:	6193      	str	r3, [r2, #24]
 80002ae:	4b12      	ldr	r3, [pc, #72]	@ (80002f8 <HAL_MspInit+0x5c>)
 80002b0:	699b      	ldr	r3, [r3, #24]
 80002b2:	f003 0301 	and.w	r3, r3, #1
 80002b6:	60bb      	str	r3, [r7, #8]
 80002b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002ba:	4b0f      	ldr	r3, [pc, #60]	@ (80002f8 <HAL_MspInit+0x5c>)
 80002bc:	69db      	ldr	r3, [r3, #28]
 80002be:	4a0e      	ldr	r2, [pc, #56]	@ (80002f8 <HAL_MspInit+0x5c>)
 80002c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002c4:	61d3      	str	r3, [r2, #28]
 80002c6:	4b0c      	ldr	r3, [pc, #48]	@ (80002f8 <HAL_MspInit+0x5c>)
 80002c8:	69db      	ldr	r3, [r3, #28]
 80002ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80002ce:	607b      	str	r3, [r7, #4]
 80002d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002d2:	4b0a      	ldr	r3, [pc, #40]	@ (80002fc <HAL_MspInit+0x60>)
 80002d4:	685b      	ldr	r3, [r3, #4]
 80002d6:	60fb      	str	r3, [r7, #12]
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80002de:	60fb      	str	r3, [r7, #12]
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80002e6:	60fb      	str	r3, [r7, #12]
 80002e8:	4a04      	ldr	r2, [pc, #16]	@ (80002fc <HAL_MspInit+0x60>)
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002ee:	bf00      	nop
 80002f0:	3714      	adds	r7, #20
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr
 80002f8:	40021000 	.word	0x40021000
 80002fc:	40010000 	.word	0x40010000

08000300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000304:	bf00      	nop
 8000306:	e7fd      	b.n	8000304 <NMI_Handler+0x4>

08000308 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800030c:	bf00      	nop
 800030e:	e7fd      	b.n	800030c <HardFault_Handler+0x4>

08000310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000314:	bf00      	nop
 8000316:	e7fd      	b.n	8000314 <MemManage_Handler+0x4>

08000318 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800031c:	bf00      	nop
 800031e:	e7fd      	b.n	800031c <BusFault_Handler+0x4>

08000320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000324:	bf00      	nop
 8000326:	e7fd      	b.n	8000324 <UsageFault_Handler+0x4>

08000328 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr

08000334 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	bc80      	pop	{r7}
 800033e:	4770      	bx	lr

08000340 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr

0800034c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000350:	f000 f87e 	bl	8000450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}

08000358 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800035c:	4802      	ldr	r0, [pc, #8]	@ (8000368 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800035e:	f000 fabc 	bl	80008da <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	20000e74 	.word	0x20000e74

0800036c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr

08000378 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000378:	f7ff fff8 	bl	800036c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800037c:	480b      	ldr	r0, [pc, #44]	@ (80003ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800037e:	490c      	ldr	r1, [pc, #48]	@ (80003b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000380:	4a0c      	ldr	r2, [pc, #48]	@ (80003b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000384:	e002      	b.n	800038c <LoopCopyDataInit>

08000386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038a:	3304      	adds	r3, #4

0800038c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800038c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000390:	d3f9      	bcc.n	8000386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000392:	4a09      	ldr	r2, [pc, #36]	@ (80003b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000394:	4c09      	ldr	r4, [pc, #36]	@ (80003bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000398:	e001      	b.n	800039e <LoopFillZerobss>

0800039a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800039c:	3204      	adds	r2, #4

0800039e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a0:	d3fb      	bcc.n	800039a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003a2:	f006 fff9 	bl	8007398 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003a6:	f7ff fee0 	bl	800016a <main>
  bx lr
 80003aa:	4770      	bx	lr
  ldr r0, =_sdata
 80003ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b0:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 80003b4:	0800746c 	.word	0x0800746c
  ldr r2, =_sbss
 80003b8:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 80003bc:	2000136c 	.word	0x2000136c

080003c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c0:	e7fe      	b.n	80003c0 <ADC1_2_IRQHandler>
	...

080003c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003c8:	4b08      	ldr	r3, [pc, #32]	@ (80003ec <HAL_Init+0x28>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a07      	ldr	r2, [pc, #28]	@ (80003ec <HAL_Init+0x28>)
 80003ce:	f043 0310 	orr.w	r3, r3, #16
 80003d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003d4:	2003      	movs	r0, #3
 80003d6:	f000 f923 	bl	8000620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80003da:	200f      	movs	r0, #15
 80003dc:	f000 f808 	bl	80003f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003e0:	f7ff ff5c 	bl	800029c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003e4:	2300      	movs	r3, #0
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40022000 	.word	0x40022000

080003f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003f8:	4b12      	ldr	r3, [pc, #72]	@ (8000444 <HAL_InitTick+0x54>)
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	4b12      	ldr	r3, [pc, #72]	@ (8000448 <HAL_InitTick+0x58>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	4619      	mov	r1, r3
 8000402:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000406:	fbb3 f3f1 	udiv	r3, r3, r1
 800040a:	fbb2 f3f3 	udiv	r3, r2, r3
 800040e:	4618      	mov	r0, r3
 8000410:	f000 f93b 	bl	800068a <HAL_SYSTICK_Config>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800041a:	2301      	movs	r3, #1
 800041c:	e00e      	b.n	800043c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2b0f      	cmp	r3, #15
 8000422:	d80a      	bhi.n	800043a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000424:	2200      	movs	r2, #0
 8000426:	6879      	ldr	r1, [r7, #4]
 8000428:	f04f 30ff 	mov.w	r0, #4294967295
 800042c:	f000 f903 	bl	8000636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000430:	4a06      	ldr	r2, [pc, #24]	@ (800044c <HAL_InitTick+0x5c>)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000436:	2300      	movs	r3, #0
 8000438:	e000      	b.n	800043c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800043a:	2301      	movs	r3, #1
}
 800043c:	4618      	mov	r0, r3
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20000010 	.word	0x20000010
 8000448:	20000018 	.word	0x20000018
 800044c:	20000014 	.word	0x20000014

08000450 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000454:	4b05      	ldr	r3, [pc, #20]	@ (800046c <HAL_IncTick+0x1c>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	461a      	mov	r2, r3
 800045a:	4b05      	ldr	r3, [pc, #20]	@ (8000470 <HAL_IncTick+0x20>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4413      	add	r3, r2
 8000460:	4a03      	ldr	r2, [pc, #12]	@ (8000470 <HAL_IncTick+0x20>)
 8000462:	6013      	str	r3, [r2, #0]
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr
 800046c:	20000018 	.word	0x20000018
 8000470:	200001a8 	.word	0x200001a8

08000474 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  return uwTick;
 8000478:	4b02      	ldr	r3, [pc, #8]	@ (8000484 <HAL_GetTick+0x10>)
 800047a:	681b      	ldr	r3, [r3, #0]
}
 800047c:	4618      	mov	r0, r3
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	200001a8 	.word	0x200001a8

08000488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000488:	b480      	push	{r7}
 800048a:	b085      	sub	sp, #20
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f003 0307 	and.w	r3, r3, #7
 8000496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000498:	4b0c      	ldr	r3, [pc, #48]	@ (80004cc <__NVIC_SetPriorityGrouping+0x44>)
 800049a:	68db      	ldr	r3, [r3, #12]
 800049c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800049e:	68ba      	ldr	r2, [r7, #8]
 80004a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80004a4:	4013      	ands	r3, r2
 80004a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80004b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80004b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80004ba:	4a04      	ldr	r2, [pc, #16]	@ (80004cc <__NVIC_SetPriorityGrouping+0x44>)
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	60d3      	str	r3, [r2, #12]
}
 80004c0:	bf00      	nop
 80004c2:	3714      	adds	r7, #20
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bc80      	pop	{r7}
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	e000ed00 	.word	0xe000ed00

080004d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004d4:	4b04      	ldr	r3, [pc, #16]	@ (80004e8 <__NVIC_GetPriorityGrouping+0x18>)
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	0a1b      	lsrs	r3, r3, #8
 80004da:	f003 0307 	and.w	r3, r3, #7
}
 80004de:	4618      	mov	r0, r3
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	e000ed00 	.word	0xe000ed00

080004ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	db0b      	blt.n	8000516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	f003 021f 	and.w	r2, r3, #31
 8000504:	4906      	ldr	r1, [pc, #24]	@ (8000520 <__NVIC_EnableIRQ+0x34>)
 8000506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050a:	095b      	lsrs	r3, r3, #5
 800050c:	2001      	movs	r0, #1
 800050e:	fa00 f202 	lsl.w	r2, r0, r2
 8000512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	e000e100 	.word	0xe000e100

08000524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	6039      	str	r1, [r7, #0]
 800052e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000534:	2b00      	cmp	r3, #0
 8000536:	db0a      	blt.n	800054e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	b2da      	uxtb	r2, r3
 800053c:	490c      	ldr	r1, [pc, #48]	@ (8000570 <__NVIC_SetPriority+0x4c>)
 800053e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000542:	0112      	lsls	r2, r2, #4
 8000544:	b2d2      	uxtb	r2, r2
 8000546:	440b      	add	r3, r1
 8000548:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800054c:	e00a      	b.n	8000564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4908      	ldr	r1, [pc, #32]	@ (8000574 <__NVIC_SetPriority+0x50>)
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	f003 030f 	and.w	r3, r3, #15
 800055a:	3b04      	subs	r3, #4
 800055c:	0112      	lsls	r2, r2, #4
 800055e:	b2d2      	uxtb	r2, r2
 8000560:	440b      	add	r3, r1
 8000562:	761a      	strb	r2, [r3, #24]
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	e000e100 	.word	0xe000e100
 8000574:	e000ed00 	.word	0xe000ed00

08000578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000578:	b480      	push	{r7}
 800057a:	b089      	sub	sp, #36	@ 0x24
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	f003 0307 	and.w	r3, r3, #7
 800058a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800058c:	69fb      	ldr	r3, [r7, #28]
 800058e:	f1c3 0307 	rsb	r3, r3, #7
 8000592:	2b04      	cmp	r3, #4
 8000594:	bf28      	it	cs
 8000596:	2304      	movcs	r3, #4
 8000598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059a:	69fb      	ldr	r3, [r7, #28]
 800059c:	3304      	adds	r3, #4
 800059e:	2b06      	cmp	r3, #6
 80005a0:	d902      	bls.n	80005a8 <NVIC_EncodePriority+0x30>
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	3b03      	subs	r3, #3
 80005a6:	e000      	b.n	80005aa <NVIC_EncodePriority+0x32>
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ac:	f04f 32ff 	mov.w	r2, #4294967295
 80005b0:	69bb      	ldr	r3, [r7, #24]
 80005b2:	fa02 f303 	lsl.w	r3, r2, r3
 80005b6:	43da      	mvns	r2, r3
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	401a      	ands	r2, r3
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005c0:	f04f 31ff 	mov.w	r1, #4294967295
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ca:	43d9      	mvns	r1, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d0:	4313      	orrs	r3, r2
         );
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3724      	adds	r7, #36	@ 0x24
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr

080005dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3b01      	subs	r3, #1
 80005e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80005ec:	d301      	bcc.n	80005f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00f      	b.n	8000612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005f2:	4a0a      	ldr	r2, [pc, #40]	@ (800061c <SysTick_Config+0x40>)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3b01      	subs	r3, #1
 80005f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005fa:	210f      	movs	r1, #15
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f7ff ff90 	bl	8000524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000604:	4b05      	ldr	r3, [pc, #20]	@ (800061c <SysTick_Config+0x40>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800060a:	4b04      	ldr	r3, [pc, #16]	@ (800061c <SysTick_Config+0x40>)
 800060c:	2207      	movs	r2, #7
 800060e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000610:	2300      	movs	r3, #0
}
 8000612:	4618      	mov	r0, r3
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	e000e010 	.word	0xe000e010

08000620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f7ff ff2d 	bl	8000488 <__NVIC_SetPriorityGrouping>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000636:	b580      	push	{r7, lr}
 8000638:	b086      	sub	sp, #24
 800063a:	af00      	add	r7, sp, #0
 800063c:	4603      	mov	r3, r0
 800063e:	60b9      	str	r1, [r7, #8]
 8000640:	607a      	str	r2, [r7, #4]
 8000642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000648:	f7ff ff42 	bl	80004d0 <__NVIC_GetPriorityGrouping>
 800064c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	68b9      	ldr	r1, [r7, #8]
 8000652:	6978      	ldr	r0, [r7, #20]
 8000654:	f7ff ff90 	bl	8000578 <NVIC_EncodePriority>
 8000658:	4602      	mov	r2, r0
 800065a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800065e:	4611      	mov	r1, r2
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ff5f 	bl	8000524 <__NVIC_SetPriority>
}
 8000666:	bf00      	nop
 8000668:	3718      	adds	r7, #24
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	b082      	sub	sp, #8
 8000672:	af00      	add	r7, sp, #0
 8000674:	4603      	mov	r3, r0
 8000676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ff35 	bl	80004ec <__NVIC_EnableIRQ>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b082      	sub	sp, #8
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f7ff ffa2 	bl	80005dc <SysTick_Config>
 8000698:	4603      	mov	r3, r0
}
 800069a:	4618      	mov	r0, r3
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b084      	sub	sp, #16
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d101      	bne.n	80006b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80006b0:	2301      	movs	r3, #1
 80006b2:	e0e8      	b.n	8000886 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d106      	bne.n	80006ce <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2200      	movs	r2, #0
 80006c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f006 fbb3 	bl	8006e34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2203      	movs	r2, #3
 80006d2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2200      	movs	r2, #0
 80006da:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 f9f6 	bl	8002ad2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6818      	ldr	r0, [r3, #0]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	3304      	adds	r3, #4
 80006ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006f0:	f002 f9cc 	bl	8002a8c <USB_CoreInit>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d005      	beq.n	8000706 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2202      	movs	r2, #2
 80006fe:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000702:	2301      	movs	r3, #1
 8000704:	e0bf      	b.n	8000886 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f002 f9fa 	bl	8002b06 <USB_SetCurrentMode>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d005      	beq.n	8000724 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2202      	movs	r2, #2
 800071c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000720:	2301      	movs	r3, #1
 8000722:	e0b0      	b.n	8000886 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000724:	2300      	movs	r3, #0
 8000726:	73fb      	strb	r3, [r7, #15]
 8000728:	e03e      	b.n	80007a8 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800072a:	7bfa      	ldrb	r2, [r7, #15]
 800072c:	6879      	ldr	r1, [r7, #4]
 800072e:	4613      	mov	r3, r2
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	4413      	add	r3, r2
 8000734:	00db      	lsls	r3, r3, #3
 8000736:	440b      	add	r3, r1
 8000738:	3311      	adds	r3, #17
 800073a:	2201      	movs	r2, #1
 800073c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800073e:	7bfa      	ldrb	r2, [r7, #15]
 8000740:	6879      	ldr	r1, [r7, #4]
 8000742:	4613      	mov	r3, r2
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	4413      	add	r3, r2
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	440b      	add	r3, r1
 800074c:	3310      	adds	r3, #16
 800074e:	7bfa      	ldrb	r2, [r7, #15]
 8000750:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000752:	7bfa      	ldrb	r2, [r7, #15]
 8000754:	6879      	ldr	r1, [r7, #4]
 8000756:	4613      	mov	r3, r2
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	4413      	add	r3, r2
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	440b      	add	r3, r1
 8000760:	3313      	adds	r3, #19
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000766:	7bfa      	ldrb	r2, [r7, #15]
 8000768:	6879      	ldr	r1, [r7, #4]
 800076a:	4613      	mov	r3, r2
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	4413      	add	r3, r2
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	440b      	add	r3, r1
 8000774:	3320      	adds	r3, #32
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800077a:	7bfa      	ldrb	r2, [r7, #15]
 800077c:	6879      	ldr	r1, [r7, #4]
 800077e:	4613      	mov	r3, r2
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	4413      	add	r3, r2
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	440b      	add	r3, r1
 8000788:	3324      	adds	r3, #36	@ 0x24
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	6879      	ldr	r1, [r7, #4]
 8000792:	1c5a      	adds	r2, r3, #1
 8000794:	4613      	mov	r3, r2
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	4413      	add	r3, r2
 800079a:	00db      	lsls	r3, r3, #3
 800079c:	440b      	add	r3, r1
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007a2:	7bfb      	ldrb	r3, [r7, #15]
 80007a4:	3301      	adds	r3, #1
 80007a6:	73fb      	strb	r3, [r7, #15]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	791b      	ldrb	r3, [r3, #4]
 80007ac:	7bfa      	ldrb	r2, [r7, #15]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d3bb      	bcc.n	800072a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007b2:	2300      	movs	r3, #0
 80007b4:	73fb      	strb	r3, [r7, #15]
 80007b6:	e044      	b.n	8000842 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80007b8:	7bfa      	ldrb	r2, [r7, #15]
 80007ba:	6879      	ldr	r1, [r7, #4]
 80007bc:	4613      	mov	r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	4413      	add	r3, r2
 80007c2:	00db      	lsls	r3, r3, #3
 80007c4:	440b      	add	r3, r1
 80007c6:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80007ce:	7bfa      	ldrb	r2, [r7, #15]
 80007d0:	6879      	ldr	r1, [r7, #4]
 80007d2:	4613      	mov	r3, r2
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	4413      	add	r3, r2
 80007d8:	00db      	lsls	r3, r3, #3
 80007da:	440b      	add	r3, r1
 80007dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80007e0:	7bfa      	ldrb	r2, [r7, #15]
 80007e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80007e4:	7bfa      	ldrb	r2, [r7, #15]
 80007e6:	6879      	ldr	r1, [r7, #4]
 80007e8:	4613      	mov	r3, r2
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	4413      	add	r3, r2
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	440b      	add	r3, r1
 80007f2:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80007fa:	7bfa      	ldrb	r2, [r7, #15]
 80007fc:	6879      	ldr	r1, [r7, #4]
 80007fe:	4613      	mov	r3, r2
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	4413      	add	r3, r2
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	440b      	add	r3, r1
 8000808:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000810:	7bfa      	ldrb	r2, [r7, #15]
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	4613      	mov	r3, r2
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	4413      	add	r3, r2
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	440b      	add	r3, r1
 800081e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000826:	7bfa      	ldrb	r2, [r7, #15]
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	4613      	mov	r3, r2
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	4413      	add	r3, r2
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	440b      	add	r3, r1
 8000834:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	3301      	adds	r3, #1
 8000840:	73fb      	strb	r3, [r7, #15]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	791b      	ldrb	r3, [r3, #4]
 8000846:	7bfa      	ldrb	r2, [r7, #15]
 8000848:	429a      	cmp	r2, r3
 800084a:	d3b5      	bcc.n	80007b8 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6818      	ldr	r0, [r3, #0]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3304      	adds	r3, #4
 8000854:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000856:	f002 f962 	bl	8002b1e <USB_DevInit>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d005      	beq.n	800086c <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2202      	movs	r2, #2
 8000864:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000868:	2301      	movs	r3, #1
 800086a:	e00c      	b.n	8000886 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2200      	movs	r2, #0
 8000870:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2201      	movs	r2, #1
 8000876:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4618      	mov	r0, r3
 8000880:	f004 fbe1 	bl	8005046 <USB_DevDisconnect>

  return HAL_OK;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b082      	sub	sp, #8
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800089c:	2b01      	cmp	r3, #1
 800089e:	d101      	bne.n	80008a4 <HAL_PCD_Start+0x16>
 80008a0:	2302      	movs	r3, #2
 80008a2:	e016      	b.n	80008d2 <HAL_PCD_Start+0x44>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2201      	movs	r2, #1
 80008a8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f002 f8f8 	bl	8002aa6 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80008b6:	2101      	movs	r1, #1
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f006 fd2e 	bl	800731a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f004 fbb5 	bl	8005032 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b088      	sub	sp, #32
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f004 fbb7 	bl	800505a <USB_ReadInterrupts>
 80008ec:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80008ee:	69bb      	ldr	r3, [r7, #24]
 80008f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d003      	beq.n	8000900 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f000 fb1a 	bl	8000f32 <PCD_EP_ISR_Handler>

    return;
 80008fe:	e119      	b.n	8000b34 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000906:	2b00      	cmp	r3, #0
 8000908:	d013      	beq.n	8000932 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000912:	b29a      	uxth	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800091c:	b292      	uxth	r2, r2
 800091e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f006 fb01 	bl	8006f2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000928:	2100      	movs	r1, #0
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f000 f905 	bl	8000b3a <HAL_PCD_SetAddress>

    return;
 8000930:	e100      	b.n	8000b34 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000938:	2b00      	cmp	r3, #0
 800093a:	d00c      	beq.n	8000956 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000944:	b29a      	uxth	r2, r3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800094e:	b292      	uxth	r2, r2
 8000950:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000954:	e0ee      	b.n	8000b34 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000956:	69bb      	ldr	r3, [r7, #24]
 8000958:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800095c:	2b00      	cmp	r3, #0
 800095e:	d00c      	beq.n	800097a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000968:	b29a      	uxth	r2, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000972:	b292      	uxth	r2, r2
 8000974:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000978:	e0dc      	b.n	8000b34 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000980:	2b00      	cmp	r3, #0
 8000982:	d027      	beq.n	80009d4 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800098c:	b29a      	uxth	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f022 0204 	bic.w	r2, r2, #4
 8000996:	b292      	uxth	r2, r2
 8000998:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f022 0208 	bic.w	r2, r2, #8
 80009ae:	b292      	uxth	r2, r2
 80009b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f006 faf1 	bl	8006f9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80009cc:	b292      	uxth	r2, r2
 80009ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80009d2:	e0af      	b.n	8000b34 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009da:	2b00      	cmp	r3, #0
 80009dc:	f000 8083 	beq.w	8000ae6 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80009e0:	2300      	movs	r3, #0
 80009e2:	77fb      	strb	r3, [r7, #31]
 80009e4:	e010      	b.n	8000a08 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	461a      	mov	r2, r3
 80009ec:	7ffb      	ldrb	r3, [r7, #31]
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	441a      	add	r2, r3
 80009f2:	7ffb      	ldrb	r3, [r7, #31]
 80009f4:	8812      	ldrh	r2, [r2, #0]
 80009f6:	b292      	uxth	r2, r2
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	3320      	adds	r3, #32
 80009fc:	443b      	add	r3, r7
 80009fe:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8000a02:	7ffb      	ldrb	r3, [r7, #31]
 8000a04:	3301      	adds	r3, #1
 8000a06:	77fb      	strb	r3, [r7, #31]
 8000a08:	7ffb      	ldrb	r3, [r7, #31]
 8000a0a:	2b07      	cmp	r3, #7
 8000a0c:	d9eb      	bls.n	80009e6 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f042 0201 	orr.w	r2, r2, #1
 8000a20:	b292      	uxth	r2, r2
 8000a22:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f022 0201 	bic.w	r2, r2, #1
 8000a38:	b292      	uxth	r2, r2
 8000a3a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000a3e:	bf00      	nop
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d0f6      	beq.n	8000a40 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000a64:	b292      	uxth	r2, r2
 8000a66:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	77fb      	strb	r3, [r7, #31]
 8000a6e:	e00f      	b.n	8000a90 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000a70:	7ffb      	ldrb	r3, [r7, #31]
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	6812      	ldr	r2, [r2, #0]
 8000a76:	4611      	mov	r1, r2
 8000a78:	7ffa      	ldrb	r2, [r7, #31]
 8000a7a:	0092      	lsls	r2, r2, #2
 8000a7c:	440a      	add	r2, r1
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	3320      	adds	r3, #32
 8000a82:	443b      	add	r3, r7
 8000a84:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000a88:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000a8a:	7ffb      	ldrb	r3, [r7, #31]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	77fb      	strb	r3, [r7, #31]
 8000a90:	7ffb      	ldrb	r3, [r7, #31]
 8000a92:	2b07      	cmp	r3, #7
 8000a94:	d9ec      	bls.n	8000a70 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f042 0208 	orr.w	r2, r2, #8
 8000aa8:	b292      	uxth	r2, r2
 8000aaa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000ac0:	b292      	uxth	r2, r2
 8000ac2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f042 0204 	orr.w	r2, r2, #4
 8000ad8:	b292      	uxth	r2, r2
 8000ada:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f006 fa42 	bl	8006f68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000ae4:	e026      	b.n	8000b34 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d00f      	beq.n	8000b10 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000b02:	b292      	uxth	r2, r2
 8000b04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f006 fa00 	bl	8006f0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000b0e:	e011      	b.n	8000b34 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d00c      	beq.n	8000b34 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000b2c:	b292      	uxth	r2, r2
 8000b2e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8000b32:	bf00      	nop
  }
}
 8000b34:	3720      	adds	r7, #32
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	460b      	mov	r3, r1
 8000b44:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d101      	bne.n	8000b54 <HAL_PCD_SetAddress+0x1a>
 8000b50:	2302      	movs	r3, #2
 8000b52:	e012      	b.n	8000b7a <HAL_PCD_SetAddress+0x40>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2201      	movs	r2, #1
 8000b58:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	78fa      	ldrb	r2, [r7, #3]
 8000b60:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	78fa      	ldrb	r2, [r7, #3]
 8000b68:	4611      	mov	r1, r2
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f004 fa4e 	bl	800500c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2200      	movs	r2, #0
 8000b74:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b084      	sub	sp, #16
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	461a      	mov	r2, r3
 8000b90:	4603      	mov	r3, r0
 8000b92:	70fb      	strb	r3, [r7, #3]
 8000b94:	460b      	mov	r3, r1
 8000b96:	803b      	strh	r3, [r7, #0]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000ba0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	da0e      	bge.n	8000bc6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000ba8:	78fb      	ldrb	r3, [r7, #3]
 8000baa:	f003 0207 	and.w	r2, r3, #7
 8000bae:	4613      	mov	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	4413      	add	r3, r2
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	3310      	adds	r3, #16
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	4413      	add	r3, r2
 8000bbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	705a      	strb	r2, [r3, #1]
 8000bc4:	e00e      	b.n	8000be4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000bc6:	78fb      	ldrb	r3, [r7, #3]
 8000bc8:	f003 0207 	and.w	r2, r3, #7
 8000bcc:	4613      	mov	r3, r2
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	4413      	add	r3, r2
 8000bd2:	00db      	lsls	r3, r3, #3
 8000bd4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	4413      	add	r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	2200      	movs	r2, #0
 8000be2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000be4:	78fb      	ldrb	r3, [r7, #3]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000bf0:	883a      	ldrh	r2, [r7, #0]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	78ba      	ldrb	r2, [r7, #2]
 8000bfa:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000bfc:	78bb      	ldrb	r3, [r7, #2]
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	d102      	bne.n	8000c08 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	2200      	movs	r2, #0
 8000c06:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d101      	bne.n	8000c16 <HAL_PCD_EP_Open+0x94>
 8000c12:	2302      	movs	r3, #2
 8000c14:	e00e      	b.n	8000c34 <HAL_PCD_EP_Open+0xb2>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	68f9      	ldr	r1, [r7, #12]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f001 ff97 	bl	8002b58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8000c32:	7afb      	ldrb	r3, [r7, #11]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000c48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	da0e      	bge.n	8000c6e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	f003 0207 	and.w	r2, r3, #7
 8000c56:	4613      	mov	r3, r2
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	4413      	add	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	3310      	adds	r3, #16
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	4413      	add	r3, r2
 8000c64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	2201      	movs	r2, #1
 8000c6a:	705a      	strb	r2, [r3, #1]
 8000c6c:	e00e      	b.n	8000c8c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c6e:	78fb      	ldrb	r3, [r7, #3]
 8000c70:	f003 0207 	and.w	r2, r3, #7
 8000c74:	4613      	mov	r3, r2
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	4413      	add	r3, r2
 8000c7a:	00db      	lsls	r3, r3, #3
 8000c7c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	4413      	add	r3, r2
 8000c84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8000c8c:	78fb      	ldrb	r3, [r7, #3]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d101      	bne.n	8000ca6 <HAL_PCD_EP_Close+0x6a>
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	e00e      	b.n	8000cc4 <HAL_PCD_EP_Close+0x88>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	68f9      	ldr	r1, [r7, #12]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f002 fb0f 	bl	80032d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	607a      	str	r2, [r7, #4]
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	460b      	mov	r3, r1
 8000cda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000cdc:	7afb      	ldrb	r3, [r7, #11]
 8000cde:	f003 0207 	and.w	r2, r3, #7
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	4413      	add	r3, r2
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	683a      	ldr	r2, [r7, #0]
 8000cfe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	2200      	movs	r2, #0
 8000d04:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d0c:	7afb      	ldrb	r3, [r7, #11]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	6979      	ldr	r1, [r7, #20]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f002 fcc6 	bl	80036b0 <USB_EPStartXfer>

  return HAL_OK;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	460b      	mov	r3, r1
 8000d38:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000d3a:	78fb      	ldrb	r3, [r7, #3]
 8000d3c:	f003 0207 	and.w	r2, r3, #7
 8000d40:	6879      	ldr	r1, [r7, #4]
 8000d42:	4613      	mov	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	440b      	add	r3, r1
 8000d4c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8000d50:	681b      	ldr	r3, [r3, #0]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	607a      	str	r2, [r7, #4]
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d6c:	7afb      	ldrb	r3, [r7, #11]
 8000d6e:	f003 0207 	and.w	r2, r3, #7
 8000d72:	4613      	mov	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	4413      	add	r3, r2
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	3310      	adds	r3, #16
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	4413      	add	r3, r2
 8000d80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	683a      	ldr	r2, [r7, #0]
 8000d8c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	2201      	movs	r2, #1
 8000d92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	683a      	ldr	r2, [r7, #0]
 8000d9a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	2201      	movs	r2, #1
 8000da6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000da8:	7afb      	ldrb	r3, [r7, #11]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6979      	ldr	r1, [r7, #20]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f002 fc78 	bl	80036b0 <USB_EPStartXfer>

  return HAL_OK;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b084      	sub	sp, #16
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000dd6:	78fb      	ldrb	r3, [r7, #3]
 8000dd8:	f003 0307 	and.w	r3, r3, #7
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	7912      	ldrb	r2, [r2, #4]
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d901      	bls.n	8000de8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	e04c      	b.n	8000e82 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000de8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	da0e      	bge.n	8000e0e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000df0:	78fb      	ldrb	r3, [r7, #3]
 8000df2:	f003 0207 	and.w	r2, r3, #7
 8000df6:	4613      	mov	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	3310      	adds	r3, #16
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	4413      	add	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	705a      	strb	r2, [r3, #1]
 8000e0c:	e00c      	b.n	8000e28 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000e0e:	78fa      	ldrb	r2, [r7, #3]
 8000e10:	4613      	mov	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	4413      	add	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2200      	movs	r2, #0
 8000e26:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e2e:	78fb      	ldrb	r3, [r7, #3]
 8000e30:	f003 0307 	and.w	r3, r3, #7
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d101      	bne.n	8000e48 <HAL_PCD_EP_SetStall+0x7e>
 8000e44:	2302      	movs	r3, #2
 8000e46:	e01c      	b.n	8000e82 <HAL_PCD_EP_SetStall+0xb8>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	68f9      	ldr	r1, [r7, #12]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f003 ffdb 	bl	8004e12 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000e5c:	78fb      	ldrb	r3, [r7, #3]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d108      	bne.n	8000e78 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8000e70:	4619      	mov	r1, r3
 8000e72:	4610      	mov	r0, r2
 8000e74:	f004 f900 	bl	8005078 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b084      	sub	sp, #16
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
 8000e92:	460b      	mov	r3, r1
 8000e94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000e96:	78fb      	ldrb	r3, [r7, #3]
 8000e98:	f003 030f 	and.w	r3, r3, #15
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	7912      	ldrb	r2, [r2, #4]
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d901      	bls.n	8000ea8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e040      	b.n	8000f2a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000ea8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	da0e      	bge.n	8000ece <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000eb0:	78fb      	ldrb	r3, [r7, #3]
 8000eb2:	f003 0207 	and.w	r2, r3, #7
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	4413      	add	r3, r2
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	3310      	adds	r3, #16
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2201      	movs	r2, #1
 8000eca:	705a      	strb	r2, [r3, #1]
 8000ecc:	e00e      	b.n	8000eec <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000ece:	78fb      	ldrb	r3, [r7, #3]
 8000ed0:	f003 0207 	and.w	r2, r3, #7
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000ef2:	78fb      	ldrb	r3, [r7, #3]
 8000ef4:	f003 0307 	and.w	r3, r3, #7
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d101      	bne.n	8000f0c <HAL_PCD_EP_ClrStall+0x82>
 8000f08:	2302      	movs	r3, #2
 8000f0a:	e00e      	b.n	8000f2a <HAL_PCD_EP_ClrStall+0xa0>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	68f9      	ldr	r1, [r7, #12]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f003 ffc9 	bl	8004eb2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b096      	sub	sp, #88	@ 0x58
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000f3a:	e3bb      	b.n	80016b4 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000f44:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000f48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	f003 030f 	and.w	r3, r3, #15
 8000f52:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8000f56:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f040 8175 	bne.w	800124a <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000f60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000f64:	f003 0310 	and.w	r3, r3, #16
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d14e      	bne.n	800100a <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8000f78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000f7c:	81fb      	strh	r3, [r7, #14]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	89fb      	ldrh	r3, [r7, #14]
 8000f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3310      	adds	r3, #16
 8000f94:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	4413      	add	r3, r2
 8000faa:	3302      	adds	r3, #2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	6812      	ldr	r2, [r2, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fc0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8000fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fc4:	695a      	ldr	r2, [r3, #20]
 8000fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	441a      	add	r2, r3
 8000fcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fce:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f005 ff81 	bl	8006eda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	7b5b      	ldrb	r3, [r3, #13]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f000 8368 	beq.w	80016b4 <PCD_EP_ISR_Handler+0x782>
 8000fe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f040 8363 	bne.w	80016b4 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	7b5b      	ldrb	r3, [r3, #13]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	735a      	strb	r2, [r3, #13]
 8001008:	e354      	b.n	80016b4 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001010:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800101c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001020:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001024:	2b00      	cmp	r3, #0
 8001026:	d034      	beq.n	8001092 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001030:	b29b      	uxth	r3, r3
 8001032:	461a      	mov	r2, r3
 8001034:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	4413      	add	r3, r2
 800103c:	3306      	adds	r3, #6
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	6812      	ldr	r2, [r2, #0]
 8001044:	4413      	add	r3, r2
 8001046:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001052:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6818      	ldr	r0, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800105e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001060:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001064:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001066:	b29b      	uxth	r3, r3
 8001068:	f004 f856 	bl	8005118 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	b29a      	uxth	r2, r3
 8001074:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001078:	4013      	ands	r3, r2
 800107a:	823b      	strh	r3, [r7, #16]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	8a3a      	ldrh	r2, [r7, #16]
 8001082:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001086:	b292      	uxth	r2, r2
 8001088:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f005 fef8 	bl	8006e80 <HAL_PCD_SetupStageCallback>
 8001090:	e310      	b.n	80016b4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001092:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001096:	2b00      	cmp	r3, #0
 8001098:	f280 830c 	bge.w	80016b4 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80010a8:	4013      	ands	r3, r2
 80010aa:	83fb      	strh	r3, [r7, #30]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	8bfa      	ldrh	r2, [r7, #30]
 80010b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80010b6:	b292      	uxth	r2, r2
 80010b8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	461a      	mov	r2, r3
 80010c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	4413      	add	r3, r2
 80010ce:	3306      	adds	r3, #6
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	6812      	ldr	r2, [r2, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80010e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010e4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80010e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d019      	beq.n	8001122 <PCD_EP_ISR_Handler+0x1f0>
 80010ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d015      	beq.n	8001122 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6818      	ldr	r0, [r3, #0]
 80010fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010fc:	6959      	ldr	r1, [r3, #20]
 80010fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001100:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001104:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001106:	b29b      	uxth	r3, r3
 8001108:	f004 f806 	bl	8005118 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800110c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800110e:	695a      	ldr	r2, [r3, #20]
 8001110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001112:	69db      	ldr	r3, [r3, #28]
 8001114:	441a      	add	r2, r3
 8001116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001118:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800111a:	2100      	movs	r1, #0
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f005 fec1 	bl	8006ea4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800112c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001130:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001134:	2b00      	cmp	r3, #0
 8001136:	f040 82bd 	bne.w	80016b4 <PCD_EP_ISR_Handler+0x782>
 800113a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800113e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001142:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001146:	f000 82b5 	beq.w	80016b4 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	61bb      	str	r3, [r7, #24]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001158:	b29b      	uxth	r3, r3
 800115a:	461a      	mov	r2, r3
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	4413      	add	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	b29b      	uxth	r3, r3
 8001170:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001174:	b29a      	uxth	r2, r3
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	801a      	strh	r2, [r3, #0]
 800117a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	2b3e      	cmp	r3, #62	@ 0x3e
 8001180:	d91d      	bls.n	80011be <PCD_EP_ISR_Handler+0x28c>
 8001182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	095b      	lsrs	r3, r3, #5
 8001188:	647b      	str	r3, [r7, #68]	@ 0x44
 800118a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	f003 031f 	and.w	r3, r3, #31
 8001192:	2b00      	cmp	r3, #0
 8001194:	d102      	bne.n	800119c <PCD_EP_ISR_Handler+0x26a>
 8001196:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001198:	3b01      	subs	r3, #1
 800119a:	647b      	str	r3, [r7, #68]	@ 0x44
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	029b      	lsls	r3, r3, #10
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80011b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	801a      	strh	r2, [r3, #0]
 80011bc:	e026      	b.n	800120c <PCD_EP_ISR_Handler+0x2da>
 80011be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10a      	bne.n	80011dc <PCD_EP_ISR_Handler+0x2aa>
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80011d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	801a      	strh	r2, [r3, #0]
 80011da:	e017      	b.n	800120c <PCD_EP_ISR_Handler+0x2da>
 80011dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	085b      	lsrs	r3, r3, #1
 80011e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80011e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d002      	beq.n	80011f6 <PCD_EP_ISR_Handler+0x2c4>
 80011f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011f2:	3301      	adds	r3, #1
 80011f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011fe:	b29b      	uxth	r3, r3
 8001200:	029b      	lsls	r3, r3, #10
 8001202:	b29b      	uxth	r3, r3
 8001204:	4313      	orrs	r3, r2
 8001206:	b29a      	uxth	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	b29b      	uxth	r3, r3
 8001214:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001218:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800121c:	827b      	strh	r3, [r7, #18]
 800121e:	8a7b      	ldrh	r3, [r7, #18]
 8001220:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001224:	827b      	strh	r3, [r7, #18]
 8001226:	8a7b      	ldrh	r3, [r7, #18]
 8001228:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800122c:	827b      	strh	r3, [r7, #18]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	8a7b      	ldrh	r3, [r7, #18]
 8001234:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001238:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800123c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001240:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001244:	b29b      	uxth	r3, r3
 8001246:	8013      	strh	r3, [r2, #0]
 8001248:	e234      	b.n	80016b4 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800125e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001262:	2b00      	cmp	r3, #0
 8001264:	f280 80fc 	bge.w	8001460 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	b29a      	uxth	r2, r3
 800127a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800127e:	4013      	ands	r3, r2
 8001280:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001296:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800129a:	b292      	uxth	r2, r2
 800129c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800129e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80012a2:	4613      	mov	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80012b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012b6:	7b1b      	ldrb	r3, [r3, #12]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d125      	bne.n	8001308 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	461a      	mov	r2, r3
 80012c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	4413      	add	r3, r2
 80012d0:	3306      	adds	r3, #6
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	6812      	ldr	r2, [r2, #0]
 80012d8:	4413      	add	r3, r2
 80012da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012e4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80012e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 8092 	beq.w	8001416 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6818      	ldr	r0, [r3, #0]
 80012f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012f8:	6959      	ldr	r1, [r3, #20]
 80012fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012fc:	88da      	ldrh	r2, [r3, #6]
 80012fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001302:	f003 ff09 	bl	8005118 <USB_ReadPMA>
 8001306:	e086      	b.n	8001416 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001308:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800130a:	78db      	ldrb	r3, [r3, #3]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d10a      	bne.n	8001326 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001310:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001314:	461a      	mov	r2, r3
 8001316:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 f9d9 	bl	80016d0 <HAL_PCD_EP_DB_Receive>
 800131e:	4603      	mov	r3, r0
 8001320:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001324:	e077      	b.n	8001416 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	b29b      	uxth	r3, r3
 8001338:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800133c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001340:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	441a      	add	r2, r3
 8001352:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001356:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800135a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800135e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001362:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001366:	b29b      	uxth	r3, r3
 8001368:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	b29b      	uxth	r3, r3
 800137c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d024      	beq.n	80013ce <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800138c:	b29b      	uxth	r3, r3
 800138e:	461a      	mov	r2, r3
 8001390:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	4413      	add	r3, r2
 8001398:	3302      	adds	r3, #2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6812      	ldr	r2, [r2, #0]
 80013a0:	4413      	add	r3, r2
 80013a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013ac:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80013b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d02e      	beq.n	8001416 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6818      	ldr	r0, [r3, #0]
 80013bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013be:	6959      	ldr	r1, [r3, #20]
 80013c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013c2:	891a      	ldrh	r2, [r3, #8]
 80013c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80013c8:	f003 fea6 	bl	8005118 <USB_ReadPMA>
 80013cc:	e023      	b.n	8001416 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	4413      	add	r3, r2
 80013e2:	3306      	adds	r3, #6
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	6812      	ldr	r2, [r2, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013f6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80013fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d009      	beq.n	8001416 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001408:	6959      	ldr	r1, [r3, #20]
 800140a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800140c:	895a      	ldrh	r2, [r3, #10]
 800140e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001412:	f003 fe81 	bl	8005118 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001418:	69da      	ldr	r2, [r3, #28]
 800141a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800141e:	441a      	add	r2, r3
 8001420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001422:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001426:	695a      	ldr	r2, [r3, #20]
 8001428:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800142c:	441a      	add	r2, r3
 800142e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001430:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d005      	beq.n	8001446 <PCD_EP_ISR_Handler+0x514>
 800143a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800143e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	429a      	cmp	r2, r3
 8001444:	d206      	bcs.n	8001454 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	4619      	mov	r1, r3
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f005 fd29 	bl	8006ea4 <HAL_PCD_DataOutStageCallback>
 8001452:	e005      	b.n	8001460 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800145a:	4618      	mov	r0, r3
 800145c:	f002 f928 	bl	80036b0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001460:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 8123 	beq.w	80016b4 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800146e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	3310      	adds	r3, #16
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	4413      	add	r3, r2
 8001480:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	b29b      	uxth	r3, r3
 8001494:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001498:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800149c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	441a      	add	r2, r3
 80014ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80014b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80014b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80014be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014c0:	78db      	ldrb	r3, [r3, #3]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	f040 80a2 	bne.w	800160c <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80014c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80014ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014d0:	7b1b      	ldrb	r3, [r3, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 8093 	beq.w	80015fe <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80014d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80014dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d046      	beq.n	8001572 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80014e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014e6:	785b      	ldrb	r3, [r3, #1]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d126      	bne.n	800153a <PCD_EP_ISR_Handler+0x608>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	461a      	mov	r2, r3
 80014fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001500:	4413      	add	r3, r2
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24
 8001504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	011a      	lsls	r2, r3, #4
 800150a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150c:	4413      	add	r3, r2
 800150e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001512:	623b      	str	r3, [r7, #32]
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	b29b      	uxth	r3, r3
 800151a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800151e:	b29a      	uxth	r2, r3
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	801a      	strh	r2, [r3, #0]
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	b29b      	uxth	r3, r3
 800152a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800152e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001532:	b29a      	uxth	r2, r3
 8001534:	6a3b      	ldr	r3, [r7, #32]
 8001536:	801a      	strh	r2, [r3, #0]
 8001538:	e061      	b.n	80015fe <PCD_EP_ISR_Handler+0x6cc>
 800153a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800153c:	785b      	ldrb	r3, [r3, #1]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d15d      	bne.n	80015fe <PCD_EP_ISR_Handler+0x6cc>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001550:	b29b      	uxth	r3, r3
 8001552:	461a      	mov	r2, r3
 8001554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001556:	4413      	add	r3, r2
 8001558:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800155a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	011a      	lsls	r2, r3, #4
 8001560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001562:	4413      	add	r3, r2
 8001564:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001568:	62bb      	str	r3, [r7, #40]	@ 0x28
 800156a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800156c:	2200      	movs	r2, #0
 800156e:	801a      	strh	r2, [r3, #0]
 8001570:	e045      	b.n	80015fe <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800157a:	785b      	ldrb	r3, [r3, #1]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d126      	bne.n	80015ce <PCD_EP_ISR_Handler+0x69c>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	637b      	str	r3, [r7, #52]	@ 0x34
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800158e:	b29b      	uxth	r3, r3
 8001590:	461a      	mov	r2, r3
 8001592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001594:	4413      	add	r3, r2
 8001596:	637b      	str	r3, [r7, #52]	@ 0x34
 8001598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	011a      	lsls	r2, r3, #4
 800159e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015a0:	4413      	add	r3, r2
 80015a2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80015a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80015a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015b6:	801a      	strh	r2, [r3, #0]
 80015b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015ca:	801a      	strh	r2, [r3, #0]
 80015cc:	e017      	b.n	80015fe <PCD_EP_ISR_Handler+0x6cc>
 80015ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015d0:	785b      	ldrb	r3, [r3, #1]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d113      	bne.n	80015fe <PCD_EP_ISR_Handler+0x6cc>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80015de:	b29b      	uxth	r3, r3
 80015e0:	461a      	mov	r2, r3
 80015e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015e4:	4413      	add	r3, r2
 80015e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	011a      	lsls	r2, r3, #4
 80015ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015f0:	4413      	add	r3, r2
 80015f2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80015f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80015f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015fa:	2200      	movs	r2, #0
 80015fc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80015fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	4619      	mov	r1, r3
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f005 fc68 	bl	8006eda <HAL_PCD_DataInStageCallback>
 800160a:	e053      	b.n	80016b4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800160c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001614:	2b00      	cmp	r3, #0
 8001616:	d146      	bne.n	80016a6 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001620:	b29b      	uxth	r3, r3
 8001622:	461a      	mov	r2, r3
 8001624:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	4413      	add	r3, r2
 800162c:	3302      	adds	r3, #2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	4413      	add	r3, r2
 8001636:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001640:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001644:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001646:	699a      	ldr	r2, [r3, #24]
 8001648:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800164c:	429a      	cmp	r2, r3
 800164e:	d907      	bls.n	8001660 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8001650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001652:	699a      	ldr	r2, [r3, #24]
 8001654:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001658:	1ad2      	subs	r2, r2, r3
 800165a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800165c:	619a      	str	r2, [r3, #24]
 800165e:	e002      	b.n	8001666 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8001660:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001662:	2200      	movs	r2, #0
 8001664:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d106      	bne.n	800167c <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800166e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	4619      	mov	r1, r3
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f005 fc30 	bl	8006eda <HAL_PCD_DataInStageCallback>
 800167a:	e01b      	b.n	80016b4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800167c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800167e:	695a      	ldr	r2, [r3, #20]
 8001680:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001684:	441a      	add	r2, r3
 8001686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001688:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800168a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800168c:	69da      	ldr	r2, [r3, #28]
 800168e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001692:	441a      	add	r2, r3
 8001694:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001696:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800169e:	4618      	mov	r0, r3
 80016a0:	f002 f806 	bl	80036b0 <USB_EPStartXfer>
 80016a4:	e006      	b.n	80016b4 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80016a6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80016aa:	461a      	mov	r2, r3
 80016ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 f91b 	bl	80018ea <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80016bc:	b29b      	uxth	r3, r3
 80016be:	b21b      	sxth	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f6ff ac3b 	blt.w	8000f3c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3758      	adds	r7, #88	@ 0x58
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	4613      	mov	r3, r2
 80016dc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80016de:	88fb      	ldrh	r3, [r7, #6]
 80016e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d07e      	beq.n	80017e6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	461a      	mov	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	4413      	add	r3, r2
 80016fc:	3302      	adds	r3, #2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	4413      	add	r3, r2
 8001706:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001710:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	699a      	ldr	r2, [r3, #24]
 8001716:	8b7b      	ldrh	r3, [r7, #26]
 8001718:	429a      	cmp	r2, r3
 800171a:	d306      	bcc.n	800172a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	699a      	ldr	r2, [r3, #24]
 8001720:	8b7b      	ldrh	r3, [r7, #26]
 8001722:	1ad2      	subs	r2, r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	619a      	str	r2, [r3, #24]
 8001728:	e002      	b.n	8001730 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d123      	bne.n	8001780 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	b29b      	uxth	r3, r3
 800174a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800174e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001752:	833b      	strh	r3, [r7, #24]
 8001754:	8b3b      	ldrh	r3, [r7, #24]
 8001756:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800175a:	833b      	strh	r3, [r7, #24]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	441a      	add	r2, r3
 800176a:	8b3b      	ldrh	r3, [r7, #24]
 800176c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001770:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001774:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800177c:	b29b      	uxth	r3, r3
 800177e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001786:	2b00      	cmp	r3, #0
 8001788:	d01f      	beq.n	80017ca <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	b29b      	uxth	r3, r3
 800179c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80017a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80017a4:	82fb      	strh	r3, [r7, #22]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	441a      	add	r2, r3
 80017b4:	8afb      	ldrh	r3, [r7, #22]
 80017b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80017ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80017be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80017ca:	8b7b      	ldrh	r3, [r7, #26]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 8087 	beq.w	80018e0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6818      	ldr	r0, [r3, #0]
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	6959      	ldr	r1, [r3, #20]
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	891a      	ldrh	r2, [r3, #8]
 80017de:	8b7b      	ldrh	r3, [r7, #26]
 80017e0:	f003 fc9a 	bl	8005118 <USB_ReadPMA>
 80017e4:	e07c      	b.n	80018e0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	461a      	mov	r2, r3
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4413      	add	r3, r2
 80017fa:	3306      	adds	r3, #6
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	4413      	add	r3, r2
 8001804:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800180e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	699a      	ldr	r2, [r3, #24]
 8001814:	8b7b      	ldrh	r3, [r7, #26]
 8001816:	429a      	cmp	r2, r3
 8001818:	d306      	bcc.n	8001828 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	699a      	ldr	r2, [r3, #24]
 800181e:	8b7b      	ldrh	r3, [r7, #26]
 8001820:	1ad2      	subs	r2, r2, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	619a      	str	r2, [r3, #24]
 8001826:	e002      	b.n	800182e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d123      	bne.n	800187e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	b29b      	uxth	r3, r3
 8001848:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800184c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001850:	83fb      	strh	r3, [r7, #30]
 8001852:	8bfb      	ldrh	r3, [r7, #30]
 8001854:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001858:	83fb      	strh	r3, [r7, #30]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	441a      	add	r2, r3
 8001868:	8bfb      	ldrh	r3, [r7, #30]
 800186a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800186e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001872:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800187a:	b29b      	uxth	r3, r3
 800187c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001884:	2b00      	cmp	r3, #0
 8001886:	d11f      	bne.n	80018c8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	b29b      	uxth	r3, r3
 800189a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800189e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018a2:	83bb      	strh	r3, [r7, #28]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	441a      	add	r2, r3
 80018b2:	8bbb      	ldrh	r3, [r7, #28]
 80018b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80018b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80018bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80018c8:	8b7b      	ldrh	r3, [r7, #26]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d008      	beq.n	80018e0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	6959      	ldr	r1, [r3, #20]
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	895a      	ldrh	r2, [r3, #10]
 80018da:	8b7b      	ldrh	r3, [r7, #26]
 80018dc:	f003 fc1c 	bl	8005118 <USB_ReadPMA>
    }
  }

  return count;
 80018e0:	8b7b      	ldrh	r3, [r7, #26]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3720      	adds	r7, #32
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b0a4      	sub	sp, #144	@ 0x90
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	60f8      	str	r0, [r7, #12]
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	4613      	mov	r3, r2
 80018f6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80018f8:	88fb      	ldrh	r3, [r7, #6]
 80018fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 81dd 	beq.w	8001cbe <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800190c:	b29b      	uxth	r3, r3
 800190e:	461a      	mov	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	4413      	add	r3, r2
 8001918:	3302      	adds	r3, #2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	4413      	add	r3, r2
 8001922:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800192c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	699a      	ldr	r2, [r3, #24]
 8001934:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001938:	429a      	cmp	r2, r3
 800193a:	d907      	bls.n	800194c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	699a      	ldr	r2, [r3, #24]
 8001940:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001944:	1ad2      	subs	r2, r2, r3
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	619a      	str	r2, [r3, #24]
 800194a:	e002      	b.n	8001952 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	2b00      	cmp	r3, #0
 8001958:	f040 80b9 	bne.w	8001ace <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	785b      	ldrb	r3, [r3, #1]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d126      	bne.n	80019b2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001972:	b29b      	uxth	r3, r3
 8001974:	461a      	mov	r2, r3
 8001976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001978:	4413      	add	r3, r2
 800197a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	011a      	lsls	r2, r3, #4
 8001982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001984:	4413      	add	r3, r2
 8001986:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800198a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800198c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	b29b      	uxth	r3, r3
 8001992:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001996:	b29a      	uxth	r2, r3
 8001998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800199a:	801a      	strh	r2, [r3, #0]
 800199c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ae:	801a      	strh	r2, [r3, #0]
 80019b0:	e01a      	b.n	80019e8 <HAL_PCD_EP_DB_Transmit+0xfe>
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	785b      	ldrb	r3, [r3, #1]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d116      	bne.n	80019e8 <HAL_PCD_EP_DB_Transmit+0xfe>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	637b      	str	r3, [r7, #52]	@ 0x34
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	461a      	mov	r2, r3
 80019cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019ce:	4413      	add	r3, r2
 80019d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	011a      	lsls	r2, r3, #4
 80019d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019da:	4413      	add	r3, r2
 80019dc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80019e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80019e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019e4:	2200      	movs	r2, #0
 80019e6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	785b      	ldrb	r3, [r3, #1]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d126      	bne.n	8001a44 <HAL_PCD_EP_DB_Transmit+0x15a>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	61fb      	str	r3, [r7, #28]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	461a      	mov	r2, r3
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	61fb      	str	r3, [r7, #28]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	011a      	lsls	r2, r3, #4
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	4413      	add	r3, r2
 8001a18:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001a1c:	61bb      	str	r3, [r7, #24]
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	801a      	strh	r2, [r3, #0]
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	801a      	strh	r2, [r3, #0]
 8001a42:	e017      	b.n	8001a74 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	785b      	ldrb	r3, [r3, #1]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d113      	bne.n	8001a74 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	461a      	mov	r2, r3
 8001a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5a:	4413      	add	r3, r2
 8001a5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	011a      	lsls	r2, r3, #4
 8001a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a66:	4413      	add	r3, r2
 8001a68:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001a6c:	623b      	str	r3, [r7, #32]
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	2200      	movs	r2, #0
 8001a72:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f005 fa2d 	bl	8006eda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 82fc 	beq.w	8002084 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001aa6:	82fb      	strh	r3, [r7, #22]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	441a      	add	r2, r3
 8001ab6:	8afb      	ldrh	r3, [r7, #22]
 8001ab8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001abc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ac0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	8013      	strh	r3, [r2, #0]
 8001acc:	e2da      	b.n	8002084 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ace:	88fb      	ldrh	r3, [r7, #6]
 8001ad0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d021      	beq.n	8001b1c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001af2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	441a      	add	r2, r3
 8001b04:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8001b08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001b0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001b10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	f040 82ae 	bne.w	8002084 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	695a      	ldr	r2, [r3, #20]
 8001b2c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001b30:	441a      	add	r2, r3
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	69da      	ldr	r2, [r3, #28]
 8001b3a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001b3e:	441a      	add	r2, r3
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	6a1a      	ldr	r2, [r3, #32]
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d30b      	bcc.n	8001b68 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	6a1a      	ldr	r2, [r3, #32]
 8001b5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b60:	1ad2      	subs	r2, r2, r3
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	621a      	str	r2, [r3, #32]
 8001b66:	e017      	b.n	8001b98 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d108      	bne.n	8001b82 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8001b70:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001b74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001b80:	e00a      	b.n	8001b98 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	2200      	movs	r2, #0
 8001b96:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	785b      	ldrb	r3, [r3, #1]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d165      	bne.n	8001c6c <HAL_PCD_EP_DB_Transmit+0x382>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bb4:	4413      	add	r3, r2
 8001bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	011a      	lsls	r2, r3, #4
 8001bbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bc0:	4413      	add	r3, r2
 8001bc2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bd6:	801a      	strh	r2, [r3, #0]
 8001bd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bdc:	2b3e      	cmp	r3, #62	@ 0x3e
 8001bde:	d91d      	bls.n	8001c1c <HAL_PCD_EP_DB_Transmit+0x332>
 8001be0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001be4:	095b      	lsrs	r3, r3, #5
 8001be6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bec:	f003 031f 	and.w	r3, r3, #31
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <HAL_PCD_EP_DB_Transmit+0x310>
 8001bf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	029b      	lsls	r3, r3, #10
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c18:	801a      	strh	r2, [r3, #0]
 8001c1a:	e044      	b.n	8001ca6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001c1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10a      	bne.n	8001c3a <HAL_PCD_EP_DB_Transmit+0x350>
 8001c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c36:	801a      	strh	r2, [r3, #0]
 8001c38:	e035      	b.n	8001ca6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001c3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c3e:	085b      	lsrs	r3, r3, #1
 8001c40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d002      	beq.n	8001c54 <HAL_PCD_EP_DB_Transmit+0x36a>
 8001c4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c50:	3301      	adds	r3, #1
 8001c52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	029b      	lsls	r3, r3, #10
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	4313      	orrs	r3, r2
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c68:	801a      	strh	r2, [r3, #0]
 8001c6a:	e01c      	b.n	8001ca6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	785b      	ldrb	r3, [r3, #1]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d118      	bne.n	8001ca6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c88:	4413      	add	r3, r2
 8001c8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	011a      	lsls	r2, r3, #4
 8001c92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c94:	4413      	add	r3, r2
 8001c96:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001c9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8001c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ca4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6818      	ldr	r0, [r3, #0]
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	6959      	ldr	r1, [r3, #20]
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	891a      	ldrh	r2, [r3, #8]
 8001cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	f003 f9e9 	bl	800508e <USB_WritePMA>
 8001cbc:	e1e2      	b.n	8002084 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	461a      	mov	r2, r3
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3306      	adds	r3, #6
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	6812      	ldr	r2, [r2, #0]
 8001cda:	4413      	add	r3, r2
 8001cdc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ce6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	699a      	ldr	r2, [r3, #24]
 8001cee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d307      	bcc.n	8001d06 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	699a      	ldr	r2, [r3, #24]
 8001cfa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001cfe:	1ad2      	subs	r2, r2, r3
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	619a      	str	r2, [r3, #24]
 8001d04:	e002      	b.n	8001d0c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f040 80c0 	bne.w	8001e96 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	785b      	ldrb	r3, [r3, #1]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d126      	bne.n	8001d6c <HAL_PCD_EP_DB_Transmit+0x482>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	461a      	mov	r2, r3
 8001d30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d32:	4413      	add	r3, r2
 8001d34:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	011a      	lsls	r2, r3, #4
 8001d3c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d3e:	4413      	add	r3, r2
 8001d40:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001d44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001d46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d54:	801a      	strh	r2, [r3, #0]
 8001d56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d68:	801a      	strh	r2, [r3, #0]
 8001d6a:	e01a      	b.n	8001da2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	785b      	ldrb	r3, [r3, #1]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d116      	bne.n	8001da2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	667b      	str	r3, [r7, #100]	@ 0x64
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d88:	4413      	add	r3, r2
 8001d8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	011a      	lsls	r2, r3, #4
 8001d92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d94:	4413      	add	r3, r2
 8001d96:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001d9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8001d9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d9e:	2200      	movs	r2, #0
 8001da0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	677b      	str	r3, [r7, #116]	@ 0x74
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	785b      	ldrb	r3, [r3, #1]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d12b      	bne.n	8001e08 <HAL_PCD_EP_DB_Transmit+0x51e>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001dc4:	4413      	add	r3, r2
 8001dc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	011a      	lsls	r2, r3, #4
 8001dce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001dd6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001dda:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001dec:	801a      	strh	r2, [r3, #0]
 8001dee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e04:	801a      	strh	r2, [r3, #0]
 8001e06:	e017      	b.n	8001e38 <HAL_PCD_EP_DB_Transmit+0x54e>
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	785b      	ldrb	r3, [r3, #1]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d113      	bne.n	8001e38 <HAL_PCD_EP_DB_Transmit+0x54e>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e1e:	4413      	add	r3, r2
 8001e20:	677b      	str	r3, [r7, #116]	@ 0x74
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	011a      	lsls	r2, r3, #4
 8001e28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001e30:	673b      	str	r3, [r7, #112]	@ 0x70
 8001e32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e34:	2200      	movs	r2, #0
 8001e36:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f005 f84b 	bl	8006eda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001e44:	88fb      	ldrh	r3, [r7, #6]
 8001e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f040 811a 	bne.w	8002084 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	461a      	mov	r2, r3
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e6a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	461a      	mov	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	441a      	add	r2, r3
 8001e7c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8001e80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001e88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	8013      	strh	r3, [r2, #0]
 8001e94:	e0f6      	b.n	8002084 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d121      	bne.n	8001ee4 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001eba:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	441a      	add	r2, r3
 8001ecc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001ed0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ed4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ed8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001edc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	f040 80ca 	bne.w	8002084 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	695a      	ldr	r2, [r3, #20]
 8001ef4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001ef8:	441a      	add	r2, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	69da      	ldr	r2, [r3, #28]
 8001f02:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001f06:	441a      	add	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	6a1a      	ldr	r2, [r3, #32]
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d30b      	bcc.n	8001f30 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	6a1a      	ldr	r2, [r3, #32]
 8001f24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f28:	1ad2      	subs	r2, r2, r3
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	621a      	str	r2, [r3, #32]
 8001f2e:	e017      	b.n	8001f60 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d108      	bne.n	8001f4a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8001f38:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8001f3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001f48:	e00a      	b.n	8001f60 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2200      	movs	r2, #0
 8001f56:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	785b      	ldrb	r3, [r3, #1]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d165      	bne.n	800203a <HAL_PCD_EP_DB_Transmit+0x750>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	461a      	mov	r2, r3
 8001f80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f82:	4413      	add	r3, r2
 8001f84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	011a      	lsls	r2, r3, #4
 8001f8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f8e:	4413      	add	r3, r2
 8001f90:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001f94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001f96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fa4:	801a      	strh	r2, [r3, #0]
 8001fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001faa:	2b3e      	cmp	r3, #62	@ 0x3e
 8001fac:	d91d      	bls.n	8001fea <HAL_PCD_EP_DB_Transmit+0x700>
 8001fae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fba:	f003 031f 	and.w	r3, r3, #31
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d102      	bne.n	8001fc8 <HAL_PCD_EP_DB_Transmit+0x6de>
 8001fc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001fc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	029b      	lsls	r3, r3, #10
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fe6:	801a      	strh	r2, [r3, #0]
 8001fe8:	e041      	b.n	800206e <HAL_PCD_EP_DB_Transmit+0x784>
 8001fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10a      	bne.n	8002008 <HAL_PCD_EP_DB_Transmit+0x71e>
 8001ff2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002000:	b29a      	uxth	r2, r3
 8002002:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002004:	801a      	strh	r2, [r3, #0]
 8002006:	e032      	b.n	800206e <HAL_PCD_EP_DB_Transmit+0x784>
 8002008:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800200c:	085b      	lsrs	r3, r3, #1
 800200e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002010:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <HAL_PCD_EP_DB_Transmit+0x738>
 800201c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800201e:	3301      	adds	r3, #1
 8002020:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002022:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	b29a      	uxth	r2, r3
 8002028:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800202a:	b29b      	uxth	r3, r3
 800202c:	029b      	lsls	r3, r3, #10
 800202e:	b29b      	uxth	r3, r3
 8002030:	4313      	orrs	r3, r2
 8002032:	b29a      	uxth	r2, r3
 8002034:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002036:	801a      	strh	r2, [r3, #0]
 8002038:	e019      	b.n	800206e <HAL_PCD_EP_DB_Transmit+0x784>
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	785b      	ldrb	r3, [r3, #1]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d115      	bne.n	800206e <HAL_PCD_EP_DB_Transmit+0x784>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800204a:	b29b      	uxth	r3, r3
 800204c:	461a      	mov	r2, r3
 800204e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002050:	4413      	add	r3, r2
 8002052:	657b      	str	r3, [r7, #84]	@ 0x54
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	011a      	lsls	r2, r3, #4
 800205a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800205c:	4413      	add	r3, r2
 800205e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002062:	653b      	str	r3, [r7, #80]	@ 0x50
 8002064:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002068:	b29a      	uxth	r2, r3
 800206a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800206c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	6959      	ldr	r1, [r3, #20]
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	895a      	ldrh	r2, [r3, #10]
 800207a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800207e:	b29b      	uxth	r3, r3
 8002080:	f003 f805 	bl	800508e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	b29b      	uxth	r3, r3
 8002096:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800209a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800209e:	82bb      	strh	r3, [r7, #20]
 80020a0:	8abb      	ldrh	r3, [r7, #20]
 80020a2:	f083 0310 	eor.w	r3, r3, #16
 80020a6:	82bb      	strh	r3, [r7, #20]
 80020a8:	8abb      	ldrh	r3, [r7, #20]
 80020aa:	f083 0320 	eor.w	r3, r3, #32
 80020ae:	82bb      	strh	r3, [r7, #20]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	441a      	add	r2, r3
 80020be:	8abb      	ldrh	r3, [r7, #20]
 80020c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80020c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80020c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3790      	adds	r7, #144	@ 0x90
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80020de:	b480      	push	{r7}
 80020e0:	b087      	sub	sp, #28
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	60f8      	str	r0, [r7, #12]
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	817b      	strh	r3, [r7, #10]
 80020ec:	4613      	mov	r3, r2
 80020ee:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80020f0:	897b      	ldrh	r3, [r7, #10]
 80020f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00b      	beq.n	8002114 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020fc:	897b      	ldrh	r3, [r7, #10]
 80020fe:	f003 0207 	and.w	r2, r3, #7
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	3310      	adds	r3, #16
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	4413      	add	r3, r2
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	e009      	b.n	8002128 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002114:	897a      	ldrh	r2, [r7, #10]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4413      	add	r3, r2
 8002126:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002128:	893b      	ldrh	r3, [r7, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d107      	bne.n	800213e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2200      	movs	r2, #0
 8002132:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	b29a      	uxth	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	80da      	strh	r2, [r3, #6]
 800213c:	e00b      	b.n	8002156 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2201      	movs	r2, #1
 8002142:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	b29a      	uxth	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	0c1b      	lsrs	r3, r3, #16
 8002150:	b29a      	uxth	r2, r3
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	371c      	adds	r7, #28
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
	...

08002164 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e272      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 8087 	beq.w	8002292 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002184:	4b92      	ldr	r3, [pc, #584]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 030c 	and.w	r3, r3, #12
 800218c:	2b04      	cmp	r3, #4
 800218e:	d00c      	beq.n	80021aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002190:	4b8f      	ldr	r3, [pc, #572]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 030c 	and.w	r3, r3, #12
 8002198:	2b08      	cmp	r3, #8
 800219a:	d112      	bne.n	80021c2 <HAL_RCC_OscConfig+0x5e>
 800219c:	4b8c      	ldr	r3, [pc, #560]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021a8:	d10b      	bne.n	80021c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021aa:	4b89      	ldr	r3, [pc, #548]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d06c      	beq.n	8002290 <HAL_RCC_OscConfig+0x12c>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d168      	bne.n	8002290 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e24c      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021ca:	d106      	bne.n	80021da <HAL_RCC_OscConfig+0x76>
 80021cc:	4b80      	ldr	r3, [pc, #512]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a7f      	ldr	r2, [pc, #508]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	e02e      	b.n	8002238 <HAL_RCC_OscConfig+0xd4>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10c      	bne.n	80021fc <HAL_RCC_OscConfig+0x98>
 80021e2:	4b7b      	ldr	r3, [pc, #492]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a7a      	ldr	r2, [pc, #488]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	4b78      	ldr	r3, [pc, #480]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a77      	ldr	r2, [pc, #476]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	e01d      	b.n	8002238 <HAL_RCC_OscConfig+0xd4>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002204:	d10c      	bne.n	8002220 <HAL_RCC_OscConfig+0xbc>
 8002206:	4b72      	ldr	r3, [pc, #456]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a71      	ldr	r2, [pc, #452]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 800220c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	4b6f      	ldr	r3, [pc, #444]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a6e      	ldr	r2, [pc, #440]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	e00b      	b.n	8002238 <HAL_RCC_OscConfig+0xd4>
 8002220:	4b6b      	ldr	r3, [pc, #428]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a6a      	ldr	r2, [pc, #424]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002226:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	4b68      	ldr	r3, [pc, #416]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a67      	ldr	r2, [pc, #412]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002232:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002236:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d013      	beq.n	8002268 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7fe f918 	bl	8000474 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002248:	f7fe f914 	bl	8000474 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b64      	cmp	r3, #100	@ 0x64
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e200      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225a:	4b5d      	ldr	r3, [pc, #372]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCC_OscConfig+0xe4>
 8002266:	e014      	b.n	8002292 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002268:	f7fe f904 	bl	8000474 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002270:	f7fe f900 	bl	8000474 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b64      	cmp	r3, #100	@ 0x64
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e1ec      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002282:	4b53      	ldr	r3, [pc, #332]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0x10c>
 800228e:	e000      	b.n	8002292 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d063      	beq.n	8002366 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800229e:	4b4c      	ldr	r3, [pc, #304]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00b      	beq.n	80022c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022aa:	4b49      	ldr	r3, [pc, #292]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 030c 	and.w	r3, r3, #12
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d11c      	bne.n	80022f0 <HAL_RCC_OscConfig+0x18c>
 80022b6:	4b46      	ldr	r3, [pc, #280]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d116      	bne.n	80022f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c2:	4b43      	ldr	r3, [pc, #268]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d005      	beq.n	80022da <HAL_RCC_OscConfig+0x176>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d001      	beq.n	80022da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e1c0      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022da:	4b3d      	ldr	r3, [pc, #244]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4939      	ldr	r1, [pc, #228]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ee:	e03a      	b.n	8002366 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d020      	beq.n	800233a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f8:	4b36      	ldr	r3, [pc, #216]	@ (80023d4 <HAL_RCC_OscConfig+0x270>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fe:	f7fe f8b9 	bl	8000474 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002306:	f7fe f8b5 	bl	8000474 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e1a1      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002318:	4b2d      	ldr	r3, [pc, #180]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002324:	4b2a      	ldr	r3, [pc, #168]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	4927      	ldr	r1, [pc, #156]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 8002334:	4313      	orrs	r3, r2
 8002336:	600b      	str	r3, [r1, #0]
 8002338:	e015      	b.n	8002366 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800233a:	4b26      	ldr	r3, [pc, #152]	@ (80023d4 <HAL_RCC_OscConfig+0x270>)
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002340:	f7fe f898 	bl	8000474 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002348:	f7fe f894 	bl	8000474 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e180      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235a:	4b1d      	ldr	r3, [pc, #116]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d03a      	beq.n	80023e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d019      	beq.n	80023ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800237a:	4b17      	ldr	r3, [pc, #92]	@ (80023d8 <HAL_RCC_OscConfig+0x274>)
 800237c:	2201      	movs	r2, #1
 800237e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002380:	f7fe f878 	bl	8000474 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002388:	f7fe f874 	bl	8000474 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e160      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239a:	4b0d      	ldr	r3, [pc, #52]	@ (80023d0 <HAL_RCC_OscConfig+0x26c>)
 800239c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023a6:	2001      	movs	r0, #1
 80023a8:	f000 fa9c 	bl	80028e4 <RCC_Delay>
 80023ac:	e01c      	b.n	80023e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ae:	4b0a      	ldr	r3, [pc, #40]	@ (80023d8 <HAL_RCC_OscConfig+0x274>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b4:	f7fe f85e 	bl	8000474 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ba:	e00f      	b.n	80023dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023bc:	f7fe f85a 	bl	8000474 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d908      	bls.n	80023dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e146      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
 80023ce:	bf00      	nop
 80023d0:	40021000 	.word	0x40021000
 80023d4:	42420000 	.word	0x42420000
 80023d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023dc:	4b92      	ldr	r3, [pc, #584]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80023de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1e9      	bne.n	80023bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 80a6 	beq.w	8002542 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023fa:	4b8b      	ldr	r3, [pc, #556]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10d      	bne.n	8002422 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002406:	4b88      	ldr	r3, [pc, #544]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	4a87      	ldr	r2, [pc, #540]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 800240c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002410:	61d3      	str	r3, [r2, #28]
 8002412:	4b85      	ldr	r3, [pc, #532]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800241e:	2301      	movs	r3, #1
 8002420:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002422:	4b82      	ldr	r3, [pc, #520]	@ (800262c <HAL_RCC_OscConfig+0x4c8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800242a:	2b00      	cmp	r3, #0
 800242c:	d118      	bne.n	8002460 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800242e:	4b7f      	ldr	r3, [pc, #508]	@ (800262c <HAL_RCC_OscConfig+0x4c8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a7e      	ldr	r2, [pc, #504]	@ (800262c <HAL_RCC_OscConfig+0x4c8>)
 8002434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800243a:	f7fe f81b 	bl	8000474 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002442:	f7fe f817 	bl	8000474 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b64      	cmp	r3, #100	@ 0x64
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e103      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002454:	4b75      	ldr	r3, [pc, #468]	@ (800262c <HAL_RCC_OscConfig+0x4c8>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f0      	beq.n	8002442 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d106      	bne.n	8002476 <HAL_RCC_OscConfig+0x312>
 8002468:	4b6f      	ldr	r3, [pc, #444]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4a6e      	ldr	r2, [pc, #440]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	6213      	str	r3, [r2, #32]
 8002474:	e02d      	b.n	80024d2 <HAL_RCC_OscConfig+0x36e>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10c      	bne.n	8002498 <HAL_RCC_OscConfig+0x334>
 800247e:	4b6a      	ldr	r3, [pc, #424]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	4a69      	ldr	r2, [pc, #420]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002484:	f023 0301 	bic.w	r3, r3, #1
 8002488:	6213      	str	r3, [r2, #32]
 800248a:	4b67      	ldr	r3, [pc, #412]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	4a66      	ldr	r2, [pc, #408]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002490:	f023 0304 	bic.w	r3, r3, #4
 8002494:	6213      	str	r3, [r2, #32]
 8002496:	e01c      	b.n	80024d2 <HAL_RCC_OscConfig+0x36e>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	2b05      	cmp	r3, #5
 800249e:	d10c      	bne.n	80024ba <HAL_RCC_OscConfig+0x356>
 80024a0:	4b61      	ldr	r3, [pc, #388]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	4a60      	ldr	r2, [pc, #384]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80024a6:	f043 0304 	orr.w	r3, r3, #4
 80024aa:	6213      	str	r3, [r2, #32]
 80024ac:	4b5e      	ldr	r3, [pc, #376]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	4a5d      	ldr	r2, [pc, #372]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6213      	str	r3, [r2, #32]
 80024b8:	e00b      	b.n	80024d2 <HAL_RCC_OscConfig+0x36e>
 80024ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	4a5a      	ldr	r2, [pc, #360]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	f023 0301 	bic.w	r3, r3, #1
 80024c4:	6213      	str	r3, [r2, #32]
 80024c6:	4b58      	ldr	r3, [pc, #352]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	4a57      	ldr	r2, [pc, #348]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	f023 0304 	bic.w	r3, r3, #4
 80024d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d015      	beq.n	8002506 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024da:	f7fd ffcb 	bl	8000474 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e0:	e00a      	b.n	80024f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e2:	f7fd ffc7 	bl	8000474 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e0b1      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0ee      	beq.n	80024e2 <HAL_RCC_OscConfig+0x37e>
 8002504:	e014      	b.n	8002530 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002506:	f7fd ffb5 	bl	8000474 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800250c:	e00a      	b.n	8002524 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250e:	f7fd ffb1 	bl	8000474 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800251c:	4293      	cmp	r3, r2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e09b      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002524:	4b40      	ldr	r3, [pc, #256]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1ee      	bne.n	800250e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002530:	7dfb      	ldrb	r3, [r7, #23]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d105      	bne.n	8002542 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002536:	4b3c      	ldr	r3, [pc, #240]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	4a3b      	ldr	r2, [pc, #236]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002540:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 8087 	beq.w	800265a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800254c:	4b36      	ldr	r3, [pc, #216]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 030c 	and.w	r3, r3, #12
 8002554:	2b08      	cmp	r3, #8
 8002556:	d061      	beq.n	800261c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d146      	bne.n	80025ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002560:	4b33      	ldr	r3, [pc, #204]	@ (8002630 <HAL_RCC_OscConfig+0x4cc>)
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002566:	f7fd ff85 	bl	8000474 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256e:	f7fd ff81 	bl	8000474 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e06d      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002580:	4b29      	ldr	r3, [pc, #164]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1f0      	bne.n	800256e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002594:	d108      	bne.n	80025a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002596:	4b24      	ldr	r3, [pc, #144]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	4921      	ldr	r1, [pc, #132]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a19      	ldr	r1, [r3, #32]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b8:	430b      	orrs	r3, r1
 80025ba:	491b      	ldr	r1, [pc, #108]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002630 <HAL_RCC_OscConfig+0x4cc>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c6:	f7fd ff55 	bl	8000474 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ce:	f7fd ff51 	bl	8000474 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e03d      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025e0:	4b11      	ldr	r3, [pc, #68]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0f0      	beq.n	80025ce <HAL_RCC_OscConfig+0x46a>
 80025ec:	e035      	b.n	800265a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ee:	4b10      	ldr	r3, [pc, #64]	@ (8002630 <HAL_RCC_OscConfig+0x4cc>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f4:	f7fd ff3e 	bl	8000474 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fc:	f7fd ff3a 	bl	8000474 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e026      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800260e:	4b06      	ldr	r3, [pc, #24]	@ (8002628 <HAL_RCC_OscConfig+0x4c4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_OscConfig+0x498>
 800261a:	e01e      	b.n	800265a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d107      	bne.n	8002634 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e019      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
 8002628:	40021000 	.word	0x40021000
 800262c:	40007000 	.word	0x40007000
 8002630:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002634:	4b0b      	ldr	r3, [pc, #44]	@ (8002664 <HAL_RCC_OscConfig+0x500>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	429a      	cmp	r2, r3
 8002646:	d106      	bne.n	8002656 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002652:	429a      	cmp	r2, r3
 8002654:	d001      	beq.n	800265a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40021000 	.word	0x40021000

08002668 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0d0      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800267c:	4b6a      	ldr	r3, [pc, #424]	@ (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d910      	bls.n	80026ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b67      	ldr	r3, [pc, #412]	@ (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 0207 	bic.w	r2, r3, #7
 8002692:	4965      	ldr	r1, [pc, #404]	@ (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800269a:	4b63      	ldr	r3, [pc, #396]	@ (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0b8      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d020      	beq.n	80026fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c4:	4b59      	ldr	r3, [pc, #356]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4a58      	ldr	r2, [pc, #352]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026dc:	4b53      	ldr	r3, [pc, #332]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	4a52      	ldr	r2, [pc, #328]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80026e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e8:	4b50      	ldr	r3, [pc, #320]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	494d      	ldr	r1, [pc, #308]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d040      	beq.n	8002788 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d107      	bne.n	800271e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	4b47      	ldr	r3, [pc, #284]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d115      	bne.n	8002746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e07f      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d107      	bne.n	8002736 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002726:	4b41      	ldr	r3, [pc, #260]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d109      	bne.n	8002746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e073      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002736:	4b3d      	ldr	r3, [pc, #244]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e06b      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002746:	4b39      	ldr	r3, [pc, #228]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f023 0203 	bic.w	r2, r3, #3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4936      	ldr	r1, [pc, #216]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	4313      	orrs	r3, r2
 8002756:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002758:	f7fd fe8c 	bl	8000474 <HAL_GetTick>
 800275c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275e:	e00a      	b.n	8002776 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002760:	f7fd fe88 	bl	8000474 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e053      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002776:	4b2d      	ldr	r3, [pc, #180]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 020c 	and.w	r2, r3, #12
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	429a      	cmp	r2, r3
 8002786:	d1eb      	bne.n	8002760 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002788:	4b27      	ldr	r3, [pc, #156]	@ (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d210      	bcs.n	80027b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002796:	4b24      	ldr	r3, [pc, #144]	@ (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 0207 	bic.w	r2, r3, #7
 800279e:	4922      	ldr	r1, [pc, #136]	@ (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a6:	4b20      	ldr	r3, [pc, #128]	@ (8002828 <HAL_RCC_ClockConfig+0x1c0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d001      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e032      	b.n	800281e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c4:	4b19      	ldr	r3, [pc, #100]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4916      	ldr	r1, [pc, #88]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027e2:	4b12      	ldr	r3, [pc, #72]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	490e      	ldr	r1, [pc, #56]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027f6:	f000 f821 	bl	800283c <HAL_RCC_GetSysClockFreq>
 80027fa:	4602      	mov	r2, r0
 80027fc:	4b0b      	ldr	r3, [pc, #44]	@ (800282c <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	490a      	ldr	r1, [pc, #40]	@ (8002830 <HAL_RCC_ClockConfig+0x1c8>)
 8002808:	5ccb      	ldrb	r3, [r1, r3]
 800280a:	fa22 f303 	lsr.w	r3, r2, r3
 800280e:	4a09      	ldr	r2, [pc, #36]	@ (8002834 <HAL_RCC_ClockConfig+0x1cc>)
 8002810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002812:	4b09      	ldr	r3, [pc, #36]	@ (8002838 <HAL_RCC_ClockConfig+0x1d0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7fd fdea 	bl	80003f0 <HAL_InitTick>

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40022000 	.word	0x40022000
 800282c:	40021000 	.word	0x40021000
 8002830:	08007440 	.word	0x08007440
 8002834:	20000010 	.word	0x20000010
 8002838:	20000014 	.word	0x20000014

0800283c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	2300      	movs	r3, #0
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	2300      	movs	r3, #0
 8002850:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002856:	4b1e      	ldr	r3, [pc, #120]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 030c 	and.w	r3, r3, #12
 8002862:	2b04      	cmp	r3, #4
 8002864:	d002      	beq.n	800286c <HAL_RCC_GetSysClockFreq+0x30>
 8002866:	2b08      	cmp	r3, #8
 8002868:	d003      	beq.n	8002872 <HAL_RCC_GetSysClockFreq+0x36>
 800286a:	e027      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800286c:	4b19      	ldr	r3, [pc, #100]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800286e:	613b      	str	r3, [r7, #16]
      break;
 8002870:	e027      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	0c9b      	lsrs	r3, r3, #18
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	4a17      	ldr	r2, [pc, #92]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800287c:	5cd3      	ldrb	r3, [r2, r3]
 800287e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d010      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800288a:	4b11      	ldr	r3, [pc, #68]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	0c5b      	lsrs	r3, r3, #17
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	4a11      	ldr	r2, [pc, #68]	@ (80028dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002896:	5cd3      	ldrb	r3, [r2, r3]
 8002898:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a0d      	ldr	r2, [pc, #52]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800289e:	fb03 f202 	mul.w	r2, r3, r2
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	e004      	b.n	80028b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a0c      	ldr	r2, [pc, #48]	@ (80028e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028b0:	fb02 f303 	mul.w	r3, r2, r3
 80028b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	613b      	str	r3, [r7, #16]
      break;
 80028ba:	e002      	b.n	80028c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028bc:	4b05      	ldr	r3, [pc, #20]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80028be:	613b      	str	r3, [r7, #16]
      break;
 80028c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028c2:	693b      	ldr	r3, [r7, #16]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	371c      	adds	r7, #28
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000
 80028d4:	007a1200 	.word	0x007a1200
 80028d8:	08007450 	.word	0x08007450
 80028dc:	08007460 	.word	0x08007460
 80028e0:	003d0900 	.word	0x003d0900

080028e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002918 <RCC_Delay+0x34>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a0a      	ldr	r2, [pc, #40]	@ (800291c <RCC_Delay+0x38>)
 80028f2:	fba2 2303 	umull	r2, r3, r2, r3
 80028f6:	0a5b      	lsrs	r3, r3, #9
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	fb02 f303 	mul.w	r3, r2, r3
 80028fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002900:	bf00      	nop
  }
  while (Delay --);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1e5a      	subs	r2, r3, #1
 8002906:	60fa      	str	r2, [r7, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1f9      	bne.n	8002900 <RCC_Delay+0x1c>
}
 800290c:	bf00      	nop
 800290e:	bf00      	nop
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr
 8002918:	20000010 	.word	0x20000010
 800291c:	10624dd3 	.word	0x10624dd3

08002920 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	2300      	movs	r3, #0
 800292e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d07d      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800293c:	2300      	movs	r3, #0
 800293e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002940:	4b4f      	ldr	r3, [pc, #316]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10d      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800294c:	4b4c      	ldr	r3, [pc, #304]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	4a4b      	ldr	r2, [pc, #300]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002952:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002956:	61d3      	str	r3, [r2, #28]
 8002958:	4b49      	ldr	r3, [pc, #292]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002964:	2301      	movs	r3, #1
 8002966:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002968:	4b46      	ldr	r3, [pc, #280]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d118      	bne.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002974:	4b43      	ldr	r3, [pc, #268]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a42      	ldr	r2, [pc, #264]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800297a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800297e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002980:	f7fd fd78 	bl	8000474 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002986:	e008      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002988:	f7fd fd74 	bl	8000474 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b64      	cmp	r3, #100	@ 0x64
 8002994:	d901      	bls.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e06d      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299a:	4b3a      	ldr	r3, [pc, #232]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029a6:	4b36      	ldr	r3, [pc, #216]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d02e      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d027      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029d0:	2201      	movs	r2, #1
 80029d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029da:	4a29      	ldr	r2, [pc, #164]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d014      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ea:	f7fd fd43 	bl	8000474 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f0:	e00a      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f2:	f7fd fd3f 	bl	8000474 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e036      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a08:	4b1d      	ldr	r3, [pc, #116]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0ee      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a14:	4b1a      	ldr	r3, [pc, #104]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	4917      	ldr	r1, [pc, #92]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a26:	7dfb      	ldrb	r3, [r7, #23]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d105      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2c:	4b14      	ldr	r3, [pc, #80]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	4a13      	ldr	r2, [pc, #76]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a36:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a44:	4b0e      	ldr	r3, [pc, #56]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	490b      	ldr	r1, [pc, #44]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0310 	and.w	r3, r3, #16
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d008      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a62:	4b07      	ldr	r3, [pc, #28]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	4904      	ldr	r1, [pc, #16]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40007000 	.word	0x40007000
 8002a88:	42420440 	.word	0x42420440

08002a8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	4638      	mov	r0, r7
 8002a96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr

08002aa6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b085      	sub	sp, #20
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002ab6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8002aba:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002ada:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8002ade:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	4013      	ands	r3, r2
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr

08002b06 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr

08002b1e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b085      	sub	sp, #20
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	4638      	mov	r0, r7
 8002b28:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b09d      	sub	sp, #116	@ 0x74
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8002b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b7e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	78db      	ldrb	r3, [r3, #3]
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d81f      	bhi.n	8002bca <USB_ActivateEndpoint+0x72>
 8002b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8002b90 <USB_ActivateEndpoint+0x38>)
 8002b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b90:	08002ba1 	.word	0x08002ba1
 8002b94:	08002bbd 	.word	0x08002bbd
 8002b98:	08002bd3 	.word	0x08002bd3
 8002b9c:	08002baf 	.word	0x08002baf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002ba0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002ba4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ba8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8002bac:	e012      	b.n	8002bd4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002bae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002bb2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8002bb6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8002bba:	e00b      	b.n	8002bd4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002bbc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002bc0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bc4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8002bc8:	e004      	b.n	8002bd4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8002bd0:	e000      	b.n	8002bd4 <USB_ActivateEndpoint+0x7c>
      break;
 8002bd2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	441a      	add	r2, r3
 8002bde:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002be2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002be6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002bea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	7812      	ldrb	r2, [r2, #0]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	441a      	add	r2, r3
 8002c22:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002c26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	7b1b      	ldrb	r3, [r3, #12]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f040 8178 	bne.w	8002f34 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	785b      	ldrb	r3, [r3, #1]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 8084 	beq.w	8002d56 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	4413      	add	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	011a      	lsls	r2, r3, #4
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	88db      	ldrh	r3, [r3, #6]
 8002c76:	085b      	lsrs	r3, r3, #1
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	827b      	strh	r3, [r7, #18]
 8002c90:	8a7b      	ldrh	r3, [r7, #18]
 8002c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d01b      	beq.n	8002cd2 <USB_ActivateEndpoint+0x17a>
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cb0:	823b      	strh	r3, [r7, #16]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	441a      	add	r2, r3
 8002cbc:	8a3b      	ldrh	r3, [r7, #16]
 8002cbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002cc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002cc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	78db      	ldrb	r3, [r3, #3]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d020      	beq.n	8002d1c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cf0:	81bb      	strh	r3, [r7, #12]
 8002cf2:	89bb      	ldrh	r3, [r7, #12]
 8002cf4:	f083 0320 	eor.w	r3, r3, #32
 8002cf8:	81bb      	strh	r3, [r7, #12]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	441a      	add	r2, r3
 8002d04:	89bb      	ldrh	r3, [r7, #12]
 8002d06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	8013      	strh	r3, [r2, #0]
 8002d1a:	e2d5      	b.n	80032c8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d32:	81fb      	strh	r3, [r7, #14]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	441a      	add	r2, r3
 8002d3e:	89fb      	ldrh	r3, [r7, #14]
 8002d40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	8013      	strh	r3, [r2, #0]
 8002d54:	e2b8      	b.n	80032c8 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	461a      	mov	r2, r3
 8002d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d66:	4413      	add	r3, r2
 8002d68:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	011a      	lsls	r2, r3, #4
 8002d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8002d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	88db      	ldrh	r3, [r3, #6]
 8002d7e:	085b      	lsrs	r3, r3, #1
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d88:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	461a      	mov	r2, r3
 8002d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9a:	4413      	add	r3, r2
 8002d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	011a      	lsls	r2, r3, #4
 8002da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da6:	4413      	add	r3, r2
 8002da8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002dac:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbc:	801a      	strh	r2, [r3, #0]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	2b3e      	cmp	r3, #62	@ 0x3e
 8002dc4:	d91d      	bls.n	8002e02 <USB_ActivateEndpoint+0x2aa>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	095b      	lsrs	r3, r3, #5
 8002dcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f003 031f 	and.w	r3, r3, #31
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d102      	bne.n	8002de0 <USB_ActivateEndpoint+0x288>
 8002dda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	029b      	lsls	r3, r3, #10
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	4313      	orrs	r3, r2
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002df6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfe:	801a      	strh	r2, [r3, #0]
 8002e00:	e026      	b.n	8002e50 <USB_ActivateEndpoint+0x2f8>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10a      	bne.n	8002e20 <USB_ActivateEndpoint+0x2c8>
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1c:	801a      	strh	r2, [r3, #0]
 8002e1e:	e017      	b.n	8002e50 <USB_ActivateEndpoint+0x2f8>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	085b      	lsrs	r3, r3, #1
 8002e26:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d002      	beq.n	8002e3a <USB_ActivateEndpoint+0x2e2>
 8002e34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e36:	3301      	adds	r3, #1
 8002e38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	029b      	lsls	r3, r3, #10
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8002e5e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002e60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d01b      	beq.n	8002ea0 <USB_ActivateEndpoint+0x348>
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e7e:	843b      	strh	r3, [r7, #32]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	441a      	add	r2, r3
 8002e8a:	8c3b      	ldrh	r3, [r7, #32]
 8002e8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d124      	bne.n	8002ef2 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002eba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ebe:	83bb      	strh	r3, [r7, #28]
 8002ec0:	8bbb      	ldrh	r3, [r7, #28]
 8002ec2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002ec6:	83bb      	strh	r3, [r7, #28]
 8002ec8:	8bbb      	ldrh	r3, [r7, #28]
 8002eca:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002ece:	83bb      	strh	r3, [r7, #28]
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	441a      	add	r2, r3
 8002eda:	8bbb      	ldrh	r3, [r7, #28]
 8002edc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ee0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ee4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	8013      	strh	r3, [r2, #0]
 8002ef0:	e1ea      	b.n	80032c8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f08:	83fb      	strh	r3, [r7, #30]
 8002f0a:	8bfb      	ldrh	r3, [r7, #30]
 8002f0c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002f10:	83fb      	strh	r3, [r7, #30]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	441a      	add	r2, r3
 8002f1c:	8bfb      	ldrh	r3, [r7, #30]
 8002f1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	8013      	strh	r3, [r2, #0]
 8002f32:	e1c9      	b.n	80032c8 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	78db      	ldrb	r3, [r3, #3]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d11e      	bne.n	8002f7a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f52:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	441a      	add	r2, r3
 8002f60:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8002f64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f6c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8002f70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	8013      	strh	r3, [r2, #0]
 8002f78:	e01d      	b.n	8002fb6 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8002f8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f90:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	441a      	add	r2, r3
 8002f9e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8002fa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002fa6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002faa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fc6:	4413      	add	r3, r2
 8002fc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	011a      	lsls	r2, r3, #4
 8002fd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002fd8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	891b      	ldrh	r3, [r3, #8]
 8002fde:	085b      	lsrs	r3, r3, #1
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fe8:	801a      	strh	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ffa:	4413      	add	r3, r2
 8002ffc:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	011a      	lsls	r2, r3, #4
 8003004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003006:	4413      	add	r3, r2
 8003008:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800300c:	653b      	str	r3, [r7, #80]	@ 0x50
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	895b      	ldrh	r3, [r3, #10]
 8003012:	085b      	lsrs	r3, r3, #1
 8003014:	b29b      	uxth	r3, r3
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800301c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	785b      	ldrb	r3, [r3, #1]
 8003022:	2b00      	cmp	r3, #0
 8003024:	f040 8093 	bne.w	800314e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8003038:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800303c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01b      	beq.n	800307c <USB_ActivateEndpoint+0x524>
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	b29b      	uxth	r3, r3
 8003052:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800305a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	441a      	add	r2, r3
 8003066:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003068:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800306c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003070:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003074:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003078:	b29b      	uxth	r3, r3
 800307a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800308a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800308c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003090:	2b00      	cmp	r3, #0
 8003092:	d01b      	beq.n	80030cc <USB_ActivateEndpoint+0x574>
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030aa:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	441a      	add	r2, r3
 80030b6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80030b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80030de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030e2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80030e4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80030e6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80030ea:	873b      	strh	r3, [r7, #56]	@ 0x38
 80030ec:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80030ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80030f2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	441a      	add	r2, r3
 80030fe:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003100:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003104:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003108:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800310c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003110:	b29b      	uxth	r3, r3
 8003112:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	b29b      	uxth	r3, r3
 8003122:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003126:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800312a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	441a      	add	r2, r3
 8003136:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003138:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800313c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003140:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003148:	b29b      	uxth	r3, r3
 800314a:	8013      	strh	r3, [r2, #0]
 800314c:	e0bc      	b.n	80032c8 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800315e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003162:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d01d      	beq.n	80031a6 <USB_ActivateEndpoint+0x64e>
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	b29b      	uxth	r3, r3
 8003178:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800317c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003180:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	441a      	add	r2, r3
 800318e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003192:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003196:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800319a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800319e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80031b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80031ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d01d      	beq.n	80031fe <USB_ActivateEndpoint+0x6a6>
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031d8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	441a      	add	r2, r3
 80031e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80031ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80031f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	78db      	ldrb	r3, [r3, #3]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d024      	beq.n	8003250 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	b29b      	uxth	r3, r3
 8003214:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003218:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800321c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8003220:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003224:	f083 0320 	eor.w	r3, r3, #32
 8003228:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	441a      	add	r2, r3
 8003236:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800323a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800323e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003242:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800324a:	b29b      	uxth	r3, r3
 800324c:	8013      	strh	r3, [r2, #0]
 800324e:	e01d      	b.n	800328c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	b29b      	uxth	r3, r3
 800325e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003262:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003266:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	441a      	add	r2, r3
 8003274:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003278:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800327c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003280:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003288:	b29b      	uxth	r3, r3
 800328a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	b29b      	uxth	r3, r3
 800329a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800329e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032a2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	441a      	add	r2, r3
 80032b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80032b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80032c8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3774      	adds	r7, #116	@ 0x74
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop

080032d8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80032d8:	b480      	push	{r7}
 80032da:	b08d      	sub	sp, #52	@ 0x34
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	7b1b      	ldrb	r3, [r3, #12]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f040 808e 	bne.w	8003408 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	785b      	ldrb	r3, [r3, #1]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d044      	beq.n	800337e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	81bb      	strh	r3, [r7, #12]
 8003302:	89bb      	ldrh	r3, [r7, #12]
 8003304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003308:	2b00      	cmp	r3, #0
 800330a:	d01b      	beq.n	8003344 <USB_DeactivateEndpoint+0x6c>
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	b29b      	uxth	r3, r3
 800331a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800331e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003322:	817b      	strh	r3, [r7, #10]
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	441a      	add	r2, r3
 800332e:	897b      	ldrh	r3, [r7, #10]
 8003330:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003334:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003338:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800333c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003340:	b29b      	uxth	r3, r3
 8003342:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	b29b      	uxth	r3, r3
 8003352:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003356:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800335a:	813b      	strh	r3, [r7, #8]
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	441a      	add	r2, r3
 8003366:	893b      	ldrh	r3, [r7, #8]
 8003368:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800336c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003370:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003374:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003378:	b29b      	uxth	r3, r3
 800337a:	8013      	strh	r3, [r2, #0]
 800337c:	e192      	b.n	80036a4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	827b      	strh	r3, [r7, #18]
 800338c:	8a7b      	ldrh	r3, [r7, #18]
 800338e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d01b      	beq.n	80033ce <USB_DeactivateEndpoint+0xf6>
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ac:	823b      	strh	r3, [r7, #16]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	441a      	add	r2, r3
 80033b8:	8a3b      	ldrh	r3, [r7, #16]
 80033ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80033c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	b29b      	uxth	r3, r3
 80033dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033e4:	81fb      	strh	r3, [r7, #14]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	441a      	add	r2, r3
 80033f0:	89fb      	ldrh	r3, [r7, #14]
 80033f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003402:	b29b      	uxth	r3, r3
 8003404:	8013      	strh	r3, [r2, #0]
 8003406:	e14d      	b.n	80036a4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	785b      	ldrb	r3, [r3, #1]
 800340c:	2b00      	cmp	r3, #0
 800340e:	f040 80a5 	bne.w	800355c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	881b      	ldrh	r3, [r3, #0]
 800341e:	843b      	strh	r3, [r7, #32]
 8003420:	8c3b      	ldrh	r3, [r7, #32]
 8003422:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d01b      	beq.n	8003462 <USB_DeactivateEndpoint+0x18a>
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	b29b      	uxth	r3, r3
 8003438:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800343c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003440:	83fb      	strh	r3, [r7, #30]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	441a      	add	r2, r3
 800344c:	8bfb      	ldrh	r3, [r7, #30]
 800344e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003452:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003456:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800345a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800345e:	b29b      	uxth	r3, r3
 8003460:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	83bb      	strh	r3, [r7, #28]
 8003470:	8bbb      	ldrh	r3, [r7, #28]
 8003472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003476:	2b00      	cmp	r3, #0
 8003478:	d01b      	beq.n	80034b2 <USB_DeactivateEndpoint+0x1da>
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800348c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003490:	837b      	strh	r3, [r7, #26]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	441a      	add	r2, r3
 800349c:	8b7b      	ldrh	r3, [r7, #26]
 800349e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034c8:	833b      	strh	r3, [r7, #24]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	441a      	add	r2, r3
 80034d4:	8b3b      	ldrh	r3, [r7, #24]
 80034d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003500:	82fb      	strh	r3, [r7, #22]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	441a      	add	r2, r3
 800350c:	8afb      	ldrh	r3, [r7, #22]
 800350e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003512:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003516:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800351a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800351e:	b29b      	uxth	r3, r3
 8003520:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	b29b      	uxth	r3, r3
 8003530:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003534:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003538:	82bb      	strh	r3, [r7, #20]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	441a      	add	r2, r3
 8003544:	8abb      	ldrh	r3, [r7, #20]
 8003546:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800354a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800354e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003556:	b29b      	uxth	r3, r3
 8003558:	8013      	strh	r3, [r2, #0]
 800355a:	e0a3      	b.n	80036a4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	881b      	ldrh	r3, [r3, #0]
 8003568:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800356a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800356c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d01b      	beq.n	80035ac <USB_DeactivateEndpoint+0x2d4>
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	b29b      	uxth	r3, r3
 8003582:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800358a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	441a      	add	r2, r3
 8003596:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003598:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800359c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80035ba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80035bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d01b      	beq.n	80035fc <USB_DeactivateEndpoint+0x324>
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035da:	853b      	strh	r3, [r7, #40]	@ 0x28
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	441a      	add	r2, r3
 80035e6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80035e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	b29b      	uxth	r3, r3
 800360a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800360e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003612:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	441a      	add	r2, r3
 800361e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003620:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003624:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003628:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800362c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003630:	b29b      	uxth	r3, r3
 8003632:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	b29b      	uxth	r3, r3
 8003642:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003646:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800364a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	441a      	add	r2, r3
 8003656:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003658:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800365c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003660:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003664:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003668:	b29b      	uxth	r3, r3
 800366a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	b29b      	uxth	r3, r3
 800367a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800367e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003682:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	441a      	add	r2, r3
 800368e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003690:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003694:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003698:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800369c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3734      	adds	r7, #52	@ 0x34
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr

080036b0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b0c2      	sub	sp, #264	@ 0x108
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80036ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80036be:	6018      	str	r0, [r3, #0]
 80036c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80036c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80036c8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80036ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80036ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	785b      	ldrb	r3, [r3, #1]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	f040 86b7 	bne.w	800444a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80036dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80036e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699a      	ldr	r2, [r3, #24]
 80036e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80036ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d908      	bls.n	800370a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80036f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80036fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003708:	e007      	b.n	800371a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800370a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800370e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800371a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800371e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	7b1b      	ldrb	r3, [r3, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d13a      	bne.n	80037a0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800372a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800372e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6959      	ldr	r1, [r3, #20]
 8003736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800373a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	88da      	ldrh	r2, [r3, #6]
 8003742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003746:	b29b      	uxth	r3, r3
 8003748:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800374c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003750:	6800      	ldr	r0, [r0, #0]
 8003752:	f001 fc9c 	bl	800508e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800375a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	613b      	str	r3, [r7, #16]
 8003762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003766:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003770:	b29b      	uxth	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	4413      	add	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800377e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	011a      	lsls	r2, r3, #4
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	4413      	add	r3, r2
 800378c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	801a      	strh	r2, [r3, #0]
 800379c:	f000 be1f 	b.w	80043de <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80037a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	78db      	ldrb	r3, [r3, #3]
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	f040 8462 	bne.w	8004076 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80037b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6a1a      	ldr	r2, [r3, #32]
 80037be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	f240 83df 	bls.w	8003f8e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80037d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037f6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80037fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80037fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	441a      	add	r2, r3
 8003814:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003818:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800381c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003820:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003828:	b29b      	uxth	r3, r3
 800382a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800382c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003830:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6a1a      	ldr	r2, [r3, #32]
 8003838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800383c:	1ad2      	subs	r2, r2, r3
 800383e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003842:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800384a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800384e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	b29b      	uxth	r3, r3
 8003868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 81c7 	beq.w	8003c00 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003876:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	633b      	str	r3, [r7, #48]	@ 0x30
 800387e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003882:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	785b      	ldrb	r3, [r3, #1]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d177      	bne.n	800397e <USB_EPStartXfer+0x2ce>
 800388e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003892:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	62bb      	str	r3, [r7, #40]	@ 0x28
 800389a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800389e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	461a      	mov	r2, r3
 80038ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ae:	4413      	add	r3, r2
 80038b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80038b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	011a      	lsls	r2, r3, #4
 80038c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c2:	4413      	add	r3, r2
 80038c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80038c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d8:	801a      	strh	r2, [r3, #0]
 80038da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038de:	2b3e      	cmp	r3, #62	@ 0x3e
 80038e0:	d921      	bls.n	8003926 <USB_EPStartXfer+0x276>
 80038e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80038ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038f0:	f003 031f 	and.w	r3, r3, #31
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d104      	bne.n	8003902 <USB_EPStartXfer+0x252>
 80038f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80038fc:	3b01      	subs	r3, #1
 80038fe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	b29a      	uxth	r2, r3
 8003908:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800390c:	b29b      	uxth	r3, r3
 800390e:	029b      	lsls	r3, r3, #10
 8003910:	b29b      	uxth	r3, r3
 8003912:	4313      	orrs	r3, r2
 8003914:	b29b      	uxth	r3, r3
 8003916:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800391a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800391e:	b29a      	uxth	r2, r3
 8003920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003922:	801a      	strh	r2, [r3, #0]
 8003924:	e050      	b.n	80039c8 <USB_EPStartXfer+0x318>
 8003926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10a      	bne.n	8003944 <USB_EPStartXfer+0x294>
 800392e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	b29b      	uxth	r3, r3
 8003934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800393c:	b29a      	uxth	r2, r3
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	801a      	strh	r2, [r3, #0]
 8003942:	e041      	b.n	80039c8 <USB_EPStartXfer+0x318>
 8003944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003948:	085b      	lsrs	r3, r3, #1
 800394a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800394e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d004      	beq.n	8003964 <USB_EPStartXfer+0x2b4>
 800395a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800395e:	3301      	adds	r3, #1
 8003960:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	b29a      	uxth	r2, r3
 800396a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800396e:	b29b      	uxth	r3, r3
 8003970:	029b      	lsls	r3, r3, #10
 8003972:	b29b      	uxth	r3, r3
 8003974:	4313      	orrs	r3, r2
 8003976:	b29a      	uxth	r2, r3
 8003978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397a:	801a      	strh	r2, [r3, #0]
 800397c:	e024      	b.n	80039c8 <USB_EPStartXfer+0x318>
 800397e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003982:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	785b      	ldrb	r3, [r3, #1]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d11c      	bne.n	80039c8 <USB_EPStartXfer+0x318>
 800398e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003992:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800399c:	b29b      	uxth	r3, r3
 800399e:	461a      	mov	r2, r3
 80039a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a2:	4413      	add	r3, r2
 80039a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80039a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	011a      	lsls	r2, r3, #4
 80039b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b6:	4413      	add	r3, r2
 80039b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80039bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80039c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	895b      	ldrh	r3, [r3, #10]
 80039d4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80039d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80039dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6959      	ldr	r1, [r3, #20]
 80039e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80039ee:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80039f2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80039f6:	6800      	ldr	r0, [r0, #0]
 80039f8:	f001 fb49 	bl	800508e <USB_WritePMA>
            ep->xfer_buff += len;
 80039fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695a      	ldr	r2, [r3, #20]
 8003a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a0c:	441a      	add	r2, r3
 8003a0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6a1a      	ldr	r2, [r3, #32]
 8003a26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d90f      	bls.n	8003a56 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8003a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6a1a      	ldr	r2, [r3, #32]
 8003a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a46:	1ad2      	subs	r2, r2, r3
 8003a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	621a      	str	r2, [r3, #32]
 8003a54:	e00e      	b.n	8003a74 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8003a56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8003a66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2200      	movs	r2, #0
 8003a72:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	785b      	ldrb	r3, [r3, #1]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d177      	bne.n	8003b74 <USB_EPStartXfer+0x4c4>
 8003a84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	61bb      	str	r3, [r7, #24]
 8003a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
 8003aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	011a      	lsls	r2, r3, #4
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	881b      	ldrh	r3, [r3, #0]
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	801a      	strh	r2, [r3, #0]
 8003ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ad4:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ad6:	d921      	bls.n	8003b1c <USB_EPStartXfer+0x46c>
 8003ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003adc:	095b      	lsrs	r3, r3, #5
 8003ade:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ae6:	f003 031f 	and.w	r3, r3, #31
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d104      	bne.n	8003af8 <USB_EPStartXfer+0x448>
 8003aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003af2:	3b01      	subs	r3, #1
 8003af4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	029b      	lsls	r3, r3, #10
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	801a      	strh	r2, [r3, #0]
 8003b1a:	e056      	b.n	8003bca <USB_EPStartXfer+0x51a>
 8003b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10a      	bne.n	8003b3a <USB_EPStartXfer+0x48a>
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	881b      	ldrh	r3, [r3, #0]
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	801a      	strh	r2, [r3, #0]
 8003b38:	e047      	b.n	8003bca <USB_EPStartXfer+0x51a>
 8003b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b3e:	085b      	lsrs	r3, r3, #1
 8003b40:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d004      	beq.n	8003b5a <USB_EPStartXfer+0x4aa>
 8003b50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b54:	3301      	adds	r3, #1
 8003b56:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	029b      	lsls	r3, r3, #10
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	801a      	strh	r2, [r3, #0]
 8003b72:	e02a      	b.n	8003bca <USB_EPStartXfer+0x51a>
 8003b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	785b      	ldrb	r3, [r3, #1]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d122      	bne.n	8003bca <USB_EPStartXfer+0x51a>
 8003b84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	623b      	str	r3, [r7, #32]
 8003b90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003b94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	623b      	str	r3, [r7, #32]
 8003ba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	011a      	lsls	r2, r3, #4
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003bbe:	61fb      	str	r3, [r7, #28]
 8003bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	891b      	ldrh	r3, [r3, #8]
 8003bd6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6959      	ldr	r1, [r3, #20]
 8003be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003bf0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003bf4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003bf8:	6800      	ldr	r0, [r0, #0]
 8003bfa:	f001 fa48 	bl	800508e <USB_WritePMA>
 8003bfe:	e3ee      	b.n	80043de <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	785b      	ldrb	r3, [r3, #1]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d177      	bne.n	8003d00 <USB_EPStartXfer+0x650>
 8003c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c30:	4413      	add	r3, r2
 8003c32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	011a      	lsls	r2, r3, #4
 8003c42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c44:	4413      	add	r3, r2
 8003c46:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003c4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c5a:	801a      	strh	r2, [r3, #0]
 8003c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c60:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c62:	d921      	bls.n	8003ca8 <USB_EPStartXfer+0x5f8>
 8003c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c68:	095b      	lsrs	r3, r3, #5
 8003c6a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c72:	f003 031f 	and.w	r3, r3, #31
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d104      	bne.n	8003c84 <USB_EPStartXfer+0x5d4>
 8003c7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	029b      	lsls	r3, r3, #10
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	4313      	orrs	r3, r2
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ca4:	801a      	strh	r2, [r3, #0]
 8003ca6:	e056      	b.n	8003d56 <USB_EPStartXfer+0x6a6>
 8003ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10a      	bne.n	8003cc6 <USB_EPStartXfer+0x616>
 8003cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cc2:	801a      	strh	r2, [r3, #0]
 8003cc4:	e047      	b.n	8003d56 <USB_EPStartXfer+0x6a6>
 8003cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cca:	085b      	lsrs	r3, r3, #1
 8003ccc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d004      	beq.n	8003ce6 <USB_EPStartXfer+0x636>
 8003cdc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003ce6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ce8:	881b      	ldrh	r3, [r3, #0]
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	029b      	lsls	r3, r3, #10
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cfc:	801a      	strh	r2, [r3, #0]
 8003cfe:	e02a      	b.n	8003d56 <USB_EPStartXfer+0x6a6>
 8003d00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	785b      	ldrb	r3, [r3, #1]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d122      	bne.n	8003d56 <USB_EPStartXfer+0x6a6>
 8003d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d30:	4413      	add	r3, r2
 8003d32:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	011a      	lsls	r2, r3, #4
 8003d42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d44:	4413      	add	r3, r2
 8003d46:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d54:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003d56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	891b      	ldrh	r3, [r3, #8]
 8003d62:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6959      	ldr	r1, [r3, #20]
 8003d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003d7c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003d80:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003d84:	6800      	ldr	r0, [r0, #0]
 8003d86:	f001 f982 	bl	800508e <USB_WritePMA>
            ep->xfer_buff += len;
 8003d8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695a      	ldr	r2, [r3, #20]
 8003d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d9a:	441a      	add	r2, r3
 8003d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003da0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003dac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6a1a      	ldr	r2, [r3, #32]
 8003db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d90f      	bls.n	8003de4 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8003dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003dc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6a1a      	ldr	r2, [r3, #32]
 8003dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dd4:	1ad2      	subs	r2, r2, r3
 8003dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003dda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	621a      	str	r2, [r3, #32]
 8003de2:	e00e      	b.n	8003e02 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8003de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003de8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8003df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003df8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003e02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	785b      	ldrb	r3, [r3, #1]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d177      	bne.n	8003f0e <USB_EPStartXfer+0x85e>
 8003e1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e3e:	4413      	add	r3, r2
 8003e40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	011a      	lsls	r2, r3, #4
 8003e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e52:	4413      	add	r3, r2
 8003e54:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e58:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e68:	801a      	strh	r2, [r3, #0]
 8003e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e6e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e70:	d921      	bls.n	8003eb6 <USB_EPStartXfer+0x806>
 8003e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e76:	095b      	lsrs	r3, r3, #5
 8003e78:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e80:	f003 031f 	and.w	r3, r3, #31
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d104      	bne.n	8003e92 <USB_EPStartXfer+0x7e2>
 8003e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003e92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e94:	881b      	ldrh	r3, [r3, #0]
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	029b      	lsls	r3, r3, #10
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb2:	801a      	strh	r2, [r3, #0]
 8003eb4:	e050      	b.n	8003f58 <USB_EPStartXfer+0x8a8>
 8003eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10a      	bne.n	8003ed4 <USB_EPStartXfer+0x824>
 8003ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed0:	801a      	strh	r2, [r3, #0]
 8003ed2:	e041      	b.n	8003f58 <USB_EPStartXfer+0x8a8>
 8003ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ed8:	085b      	lsrs	r3, r3, #1
 8003eda:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d004      	beq.n	8003ef4 <USB_EPStartXfer+0x844>
 8003eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eee:	3301      	adds	r3, #1
 8003ef0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	029b      	lsls	r3, r3, #10
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	4313      	orrs	r3, r2
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f0a:	801a      	strh	r2, [r3, #0]
 8003f0c:	e024      	b.n	8003f58 <USB_EPStartXfer+0x8a8>
 8003f0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	785b      	ldrb	r3, [r3, #1]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d11c      	bne.n	8003f58 <USB_EPStartXfer+0x8a8>
 8003f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	461a      	mov	r2, r3
 8003f30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f32:	4413      	add	r3, r2
 8003f34:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	011a      	lsls	r2, r3, #4
 8003f44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f46:	4413      	add	r3, r2
 8003f48:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f56:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	895b      	ldrh	r3, [r3, #10]
 8003f64:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6959      	ldr	r1, [r3, #20]
 8003f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8003f7e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003f82:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8003f86:	6800      	ldr	r0, [r0, #0]
 8003f88:	f001 f881 	bl	800508e <USB_WritePMA>
 8003f8c:	e227      	b.n	80043de <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003f8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8003f9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8003fc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fc4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8003fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003fd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	441a      	add	r2, r3
 8003fe2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8003fe6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ffe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800400a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004014:	b29b      	uxth	r3, r3
 8004016:	461a      	mov	r2, r3
 8004018:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800401a:	4413      	add	r3, r2
 800401c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800401e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004022:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	011a      	lsls	r2, r3, #4
 800402c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800402e:	4413      	add	r3, r2
 8004030:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004034:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800403a:	b29a      	uxth	r2, r3
 800403c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800403e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004044:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	891b      	ldrh	r3, [r3, #8]
 800404c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004054:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6959      	ldr	r1, [r3, #20]
 800405c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004060:	b29b      	uxth	r3, r3
 8004062:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004066:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800406a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800406e:	6800      	ldr	r0, [r0, #0]
 8004070:	f001 f80d 	bl	800508e <USB_WritePMA>
 8004074:	e1b3      	b.n	80043de <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800407a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6a1a      	ldr	r2, [r3, #32]
 8004082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004086:	1ad2      	subs	r2, r2, r3
 8004088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800408c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004098:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 80c6 	beq.w	8004248 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80040bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80040c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	785b      	ldrb	r3, [r3, #1]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d177      	bne.n	80041c8 <USB_EPStartXfer+0xb18>
 80040d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040f8:	4413      	add	r3, r2
 80040fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	011a      	lsls	r2, r3, #4
 800410a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800410c:	4413      	add	r3, r2
 800410e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004112:	667b      	str	r3, [r7, #100]	@ 0x64
 8004114:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	b29b      	uxth	r3, r3
 800411a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800411e:	b29a      	uxth	r2, r3
 8004120:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004122:	801a      	strh	r2, [r3, #0]
 8004124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004128:	2b3e      	cmp	r3, #62	@ 0x3e
 800412a:	d921      	bls.n	8004170 <USB_EPStartXfer+0xac0>
 800412c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004130:	095b      	lsrs	r3, r3, #5
 8004132:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800413a:	f003 031f 	and.w	r3, r3, #31
 800413e:	2b00      	cmp	r3, #0
 8004140:	d104      	bne.n	800414c <USB_EPStartXfer+0xa9c>
 8004142:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004146:	3b01      	subs	r3, #1
 8004148:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800414c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	b29a      	uxth	r2, r3
 8004152:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004156:	b29b      	uxth	r3, r3
 8004158:	029b      	lsls	r3, r3, #10
 800415a:	b29b      	uxth	r3, r3
 800415c:	4313      	orrs	r3, r2
 800415e:	b29b      	uxth	r3, r3
 8004160:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004164:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004168:	b29a      	uxth	r2, r3
 800416a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800416c:	801a      	strh	r2, [r3, #0]
 800416e:	e050      	b.n	8004212 <USB_EPStartXfer+0xb62>
 8004170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10a      	bne.n	800418e <USB_EPStartXfer+0xade>
 8004178:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	b29b      	uxth	r3, r3
 800417e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004182:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004186:	b29a      	uxth	r2, r3
 8004188:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800418a:	801a      	strh	r2, [r3, #0]
 800418c:	e041      	b.n	8004212 <USB_EPStartXfer+0xb62>
 800418e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004192:	085b      	lsrs	r3, r3, #1
 8004194:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d004      	beq.n	80041ae <USB_EPStartXfer+0xafe>
 80041a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80041a8:	3301      	adds	r3, #1
 80041aa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80041ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	029b      	lsls	r3, r3, #10
 80041bc:	b29b      	uxth	r3, r3
 80041be:	4313      	orrs	r3, r2
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041c4:	801a      	strh	r2, [r3, #0]
 80041c6:	e024      	b.n	8004212 <USB_EPStartXfer+0xb62>
 80041c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	785b      	ldrb	r3, [r3, #1]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d11c      	bne.n	8004212 <USB_EPStartXfer+0xb62>
 80041d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	461a      	mov	r2, r3
 80041ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041ec:	4413      	add	r3, r2
 80041ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80041f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	011a      	lsls	r2, r3, #4
 80041fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004200:	4413      	add	r3, r2
 8004202:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004206:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800420c:	b29a      	uxth	r2, r3
 800420e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004210:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	895b      	ldrh	r3, [r3, #10]
 800421e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004226:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6959      	ldr	r1, [r3, #20]
 800422e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004232:	b29b      	uxth	r3, r3
 8004234:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004238:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800423c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004240:	6800      	ldr	r0, [r0, #0]
 8004242:	f000 ff24 	bl	800508e <USB_WritePMA>
 8004246:	e0ca      	b.n	80043de <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800424c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	785b      	ldrb	r3, [r3, #1]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d177      	bne.n	8004348 <USB_EPStartXfer+0xc98>
 8004258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800425c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004268:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004272:	b29b      	uxth	r3, r3
 8004274:	461a      	mov	r2, r3
 8004276:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004278:	4413      	add	r3, r2
 800427a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800427c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	011a      	lsls	r2, r3, #4
 800428a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800428c:	4413      	add	r3, r2
 800428e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004292:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004294:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004296:	881b      	ldrh	r3, [r3, #0]
 8004298:	b29b      	uxth	r3, r3
 800429a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800429e:	b29a      	uxth	r2, r3
 80042a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042a2:	801a      	strh	r2, [r3, #0]
 80042a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80042aa:	d921      	bls.n	80042f0 <USB_EPStartXfer+0xc40>
 80042ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80042b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042ba:	f003 031f 	and.w	r3, r3, #31
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d104      	bne.n	80042cc <USB_EPStartXfer+0xc1c>
 80042c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80042c6:	3b01      	subs	r3, #1
 80042c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80042cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	029b      	lsls	r3, r3, #10
 80042da:	b29b      	uxth	r3, r3
 80042dc:	4313      	orrs	r3, r2
 80042de:	b29b      	uxth	r3, r3
 80042e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042ec:	801a      	strh	r2, [r3, #0]
 80042ee:	e05c      	b.n	80043aa <USB_EPStartXfer+0xcfa>
 80042f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10a      	bne.n	800430e <USB_EPStartXfer+0xc5e>
 80042f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004302:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004306:	b29a      	uxth	r2, r3
 8004308:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800430a:	801a      	strh	r2, [r3, #0]
 800430c:	e04d      	b.n	80043aa <USB_EPStartXfer+0xcfa>
 800430e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004312:	085b      	lsrs	r3, r3, #1
 8004314:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d004      	beq.n	800432e <USB_EPStartXfer+0xc7e>
 8004324:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004328:	3301      	adds	r3, #1
 800432a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800432e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	b29a      	uxth	r2, r3
 8004334:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004338:	b29b      	uxth	r3, r3
 800433a:	029b      	lsls	r3, r3, #10
 800433c:	b29b      	uxth	r3, r3
 800433e:	4313      	orrs	r3, r2
 8004340:	b29a      	uxth	r2, r3
 8004342:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004344:	801a      	strh	r2, [r3, #0]
 8004346:	e030      	b.n	80043aa <USB_EPStartXfer+0xcfa>
 8004348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800434c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	785b      	ldrb	r3, [r3, #1]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d128      	bne.n	80043aa <USB_EPStartXfer+0xcfa>
 8004358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800435c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004366:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800436a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004374:	b29b      	uxth	r3, r3
 8004376:	461a      	mov	r2, r3
 8004378:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800437c:	4413      	add	r3, r2
 800437e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004386:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	011a      	lsls	r2, r3, #4
 8004390:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004394:	4413      	add	r3, r2
 8004396:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800439a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800439e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80043a8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80043aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	891b      	ldrh	r3, [r3, #8]
 80043b6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80043ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6959      	ldr	r1, [r3, #20]
 80043c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80043d0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80043d4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80043d8:	6800      	ldr	r0, [r0, #0]
 80043da:	f000 fe58 	bl	800508e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80043de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004400:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004404:	817b      	strh	r3, [r7, #10]
 8004406:	897b      	ldrh	r3, [r7, #10]
 8004408:	f083 0310 	eor.w	r3, r3, #16
 800440c:	817b      	strh	r3, [r7, #10]
 800440e:	897b      	ldrh	r3, [r7, #10]
 8004410:	f083 0320 	eor.w	r3, r3, #32
 8004414:	817b      	strh	r3, [r7, #10]
 8004416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800441a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	441a      	add	r2, r3
 8004430:	897b      	ldrh	r3, [r7, #10]
 8004432:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004436:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800443a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800443e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004442:	b29b      	uxth	r3, r3
 8004444:	8013      	strh	r3, [r2, #0]
 8004446:	f000 bcde 	b.w	8004e06 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800444a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800444e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	7b1b      	ldrb	r3, [r3, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	f040 80bb 	bne.w	80045d2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800445c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	699a      	ldr	r2, [r3, #24]
 8004468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800446c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	429a      	cmp	r2, r3
 8004476:	d917      	bls.n	80044a8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8004478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800447c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8004488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800448c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	699a      	ldr	r2, [r3, #24]
 8004494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004498:	1ad2      	subs	r2, r2, r3
 800449a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800449e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	619a      	str	r2, [r3, #24]
 80044a6:	e00e      	b.n	80044c6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80044a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80044b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2200      	movs	r2, #0
 80044c4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80044c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80044d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	461a      	mov	r2, r3
 80044e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80044ea:	4413      	add	r3, r2
 80044ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80044f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	011a      	lsls	r2, r3, #4
 80044fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004502:	4413      	add	r3, r2
 8004504:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004508:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800450c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	b29b      	uxth	r3, r3
 8004514:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004518:	b29a      	uxth	r2, r3
 800451a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800451e:	801a      	strh	r2, [r3, #0]
 8004520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004524:	2b3e      	cmp	r3, #62	@ 0x3e
 8004526:	d924      	bls.n	8004572 <USB_EPStartXfer+0xec2>
 8004528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800452c:	095b      	lsrs	r3, r3, #5
 800452e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004536:	f003 031f 	and.w	r3, r3, #31
 800453a:	2b00      	cmp	r3, #0
 800453c:	d104      	bne.n	8004548 <USB_EPStartXfer+0xe98>
 800453e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004542:	3b01      	subs	r3, #1
 8004544:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004548:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	b29a      	uxth	r2, r3
 8004550:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004554:	b29b      	uxth	r3, r3
 8004556:	029b      	lsls	r3, r3, #10
 8004558:	b29b      	uxth	r3, r3
 800455a:	4313      	orrs	r3, r2
 800455c:	b29b      	uxth	r3, r3
 800455e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004566:	b29a      	uxth	r2, r3
 8004568:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800456c:	801a      	strh	r2, [r3, #0]
 800456e:	f000 bc10 	b.w	8004d92 <USB_EPStartXfer+0x16e2>
 8004572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10c      	bne.n	8004594 <USB_EPStartXfer+0xee4>
 800457a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	b29b      	uxth	r3, r3
 8004582:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800458a:	b29a      	uxth	r2, r3
 800458c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004590:	801a      	strh	r2, [r3, #0]
 8004592:	e3fe      	b.n	8004d92 <USB_EPStartXfer+0x16e2>
 8004594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004598:	085b      	lsrs	r3, r3, #1
 800459a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800459e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d004      	beq.n	80045b4 <USB_EPStartXfer+0xf04>
 80045aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80045ae:	3301      	adds	r3, #1
 80045b0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	029b      	lsls	r3, r3, #10
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	4313      	orrs	r3, r2
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045ce:	801a      	strh	r2, [r3, #0]
 80045d0:	e3df      	b.n	8004d92 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80045d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	78db      	ldrb	r3, [r3, #3]
 80045de:	2b02      	cmp	r3, #2
 80045e0:	f040 8218 	bne.w	8004a14 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80045e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	785b      	ldrb	r3, [r3, #1]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f040 809d 	bne.w	8004730 <USB_EPStartXfer+0x1080>
 80045f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80045fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004608:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004612:	b29b      	uxth	r3, r3
 8004614:	461a      	mov	r2, r3
 8004616:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800461a:	4413      	add	r3, r2
 800461c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004624:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	011a      	lsls	r2, r3, #4
 800462e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004632:	4413      	add	r3, r2
 8004634:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004638:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800463c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	b29b      	uxth	r3, r3
 8004644:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004648:	b29a      	uxth	r2, r3
 800464a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800464e:	801a      	strh	r2, [r3, #0]
 8004650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004654:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	2b3e      	cmp	r3, #62	@ 0x3e
 800465e:	d92b      	bls.n	80046b8 <USB_EPStartXfer+0x1008>
 8004660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004664:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	095b      	lsrs	r3, r3, #5
 800466e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004676:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f003 031f 	and.w	r3, r3, #31
 8004682:	2b00      	cmp	r3, #0
 8004684:	d104      	bne.n	8004690 <USB_EPStartXfer+0xfe0>
 8004686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800468a:	3b01      	subs	r3, #1
 800468c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004690:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004694:	881b      	ldrh	r3, [r3, #0]
 8004696:	b29a      	uxth	r2, r3
 8004698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800469c:	b29b      	uxth	r3, r3
 800469e:	029b      	lsls	r3, r3, #10
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	4313      	orrs	r3, r2
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80046b4:	801a      	strh	r2, [r3, #0]
 80046b6:	e070      	b.n	800479a <USB_EPStartXfer+0x10ea>
 80046b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10c      	bne.n	80046e2 <USB_EPStartXfer+0x1032>
 80046c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046d8:	b29a      	uxth	r2, r3
 80046da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80046de:	801a      	strh	r2, [r3, #0]
 80046e0:	e05b      	b.n	800479a <USB_EPStartXfer+0x10ea>
 80046e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	085b      	lsrs	r3, r3, #1
 80046f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80046f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	2b00      	cmp	r3, #0
 8004706:	d004      	beq.n	8004712 <USB_EPStartXfer+0x1062>
 8004708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800470c:	3301      	adds	r3, #1
 800470e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004712:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	b29a      	uxth	r2, r3
 800471a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800471e:	b29b      	uxth	r3, r3
 8004720:	029b      	lsls	r3, r3, #10
 8004722:	b29b      	uxth	r3, r3
 8004724:	4313      	orrs	r3, r2
 8004726:	b29a      	uxth	r2, r3
 8004728:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800472c:	801a      	strh	r2, [r3, #0]
 800472e:	e034      	b.n	800479a <USB_EPStartXfer+0x10ea>
 8004730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	785b      	ldrb	r3, [r3, #1]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d12c      	bne.n	800479a <USB_EPStartXfer+0x10ea>
 8004740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004744:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800474e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004752:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800475c:	b29b      	uxth	r3, r3
 800475e:	461a      	mov	r2, r3
 8004760:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004764:	4413      	add	r3, r2
 8004766:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800476a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800476e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	011a      	lsls	r2, r3, #4
 8004778:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800477c:	4413      	add	r3, r2
 800477e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004782:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800478a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	b29a      	uxth	r2, r3
 8004794:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004798:	801a      	strh	r2, [r3, #0]
 800479a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800479e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80047a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	785b      	ldrb	r3, [r3, #1]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f040 809d 	bne.w	80048f4 <USB_EPStartXfer+0x1244>
 80047ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	461a      	mov	r2, r3
 80047da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047de:	4413      	add	r3, r2
 80047e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80047e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	011a      	lsls	r2, r3, #4
 80047f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047f6:	4413      	add	r3, r2
 80047f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80047fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004800:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	b29b      	uxth	r3, r3
 8004808:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800480c:	b29a      	uxth	r2, r3
 800480e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004812:	801a      	strh	r2, [r3, #0]
 8004814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	2b3e      	cmp	r3, #62	@ 0x3e
 8004822:	d92b      	bls.n	800487c <USB_EPStartXfer+0x11cc>
 8004824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004828:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	095b      	lsrs	r3, r3, #5
 8004832:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800483a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f003 031f 	and.w	r3, r3, #31
 8004846:	2b00      	cmp	r3, #0
 8004848:	d104      	bne.n	8004854 <USB_EPStartXfer+0x11a4>
 800484a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800484e:	3b01      	subs	r3, #1
 8004850:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004854:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	b29a      	uxth	r2, r3
 800485c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004860:	b29b      	uxth	r3, r3
 8004862:	029b      	lsls	r3, r3, #10
 8004864:	b29b      	uxth	r3, r3
 8004866:	4313      	orrs	r3, r2
 8004868:	b29b      	uxth	r3, r3
 800486a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800486e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004872:	b29a      	uxth	r2, r3
 8004874:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004878:	801a      	strh	r2, [r3, #0]
 800487a:	e069      	b.n	8004950 <USB_EPStartXfer+0x12a0>
 800487c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004880:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10c      	bne.n	80048a6 <USB_EPStartXfer+0x11f6>
 800488c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	b29b      	uxth	r3, r3
 8004894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800489c:	b29a      	uxth	r2, r3
 800489e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80048a2:	801a      	strh	r2, [r3, #0]
 80048a4:	e054      	b.n	8004950 <USB_EPStartXfer+0x12a0>
 80048a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	085b      	lsrs	r3, r3, #1
 80048b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d004      	beq.n	80048d6 <USB_EPStartXfer+0x1226>
 80048cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048d0:	3301      	adds	r3, #1
 80048d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	b29a      	uxth	r2, r3
 80048de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	029b      	lsls	r3, r3, #10
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	4313      	orrs	r3, r2
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80048f0:	801a      	strh	r2, [r3, #0]
 80048f2:	e02d      	b.n	8004950 <USB_EPStartXfer+0x12a0>
 80048f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80048f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	785b      	ldrb	r3, [r3, #1]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d125      	bne.n	8004950 <USB_EPStartXfer+0x12a0>
 8004904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004908:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004912:	b29b      	uxth	r3, r3
 8004914:	461a      	mov	r2, r3
 8004916:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800491a:	4413      	add	r3, r2
 800491c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004924:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	011a      	lsls	r2, r3, #4
 800492e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004932:	4413      	add	r3, r2
 8004934:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004938:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800493c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004940:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	b29a      	uxth	r2, r3
 800494a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800494e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004954:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 8218 	beq.w	8004d92 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004966:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004970:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004982:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004986:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d005      	beq.n	800499a <USB_EPStartXfer+0x12ea>
 800498e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10d      	bne.n	80049b6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800499a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800499e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f040 81f5 	bne.w	8004d92 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80049a8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80049ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f040 81ee 	bne.w	8004d92 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80049b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049dc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80049e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	441a      	add	r2, r3
 80049fa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80049fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a0a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	8013      	strh	r3, [r2, #0]
 8004a12:	e1be      	b.n	8004d92 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004a14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	78db      	ldrb	r3, [r3, #3]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	f040 81b4 	bne.w	8004d8e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004a26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	699a      	ldr	r2, [r3, #24]
 8004a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d917      	bls.n	8004a72 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8004a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8004a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699a      	ldr	r2, [r3, #24]
 8004a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a62:	1ad2      	subs	r2, r2, r3
 8004a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	619a      	str	r2, [r3, #24]
 8004a70:	e00e      	b.n	8004a90 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8004a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8004a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	785b      	ldrb	r3, [r3, #1]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f040 8085 	bne.w	8004bac <USB_EPStartXfer+0x14fc>
 8004aa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004aa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ab4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004acc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ad0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	011a      	lsls	r2, r3, #4
 8004ada:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ade:	4413      	add	r3, r2
 8004ae0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004ae4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ae8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004afa:	801a      	strh	r2, [r3, #0]
 8004afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b00:	2b3e      	cmp	r3, #62	@ 0x3e
 8004b02:	d923      	bls.n	8004b4c <USB_EPStartXfer+0x149c>
 8004b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b08:	095b      	lsrs	r3, r3, #5
 8004b0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b12:	f003 031f 	and.w	r3, r3, #31
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d104      	bne.n	8004b24 <USB_EPStartXfer+0x1474>
 8004b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004b24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	029b      	lsls	r3, r3, #10
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	4313      	orrs	r3, r2
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b48:	801a      	strh	r2, [r3, #0]
 8004b4a:	e060      	b.n	8004c0e <USB_EPStartXfer+0x155e>
 8004b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10c      	bne.n	8004b6e <USB_EPStartXfer+0x14be>
 8004b54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b6a:	801a      	strh	r2, [r3, #0]
 8004b6c:	e04f      	b.n	8004c0e <USB_EPStartXfer+0x155e>
 8004b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b72:	085b      	lsrs	r3, r3, #1
 8004b74:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d004      	beq.n	8004b8e <USB_EPStartXfer+0x14de>
 8004b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b88:	3301      	adds	r3, #1
 8004b8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004b8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	029b      	lsls	r3, r3, #10
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004ba8:	801a      	strh	r2, [r3, #0]
 8004baa:	e030      	b.n	8004c0e <USB_EPStartXfer+0x155e>
 8004bac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	785b      	ldrb	r3, [r3, #1]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d128      	bne.n	8004c0e <USB_EPStartXfer+0x155e>
 8004bbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	461a      	mov	r2, r3
 8004bdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004be0:	4413      	add	r3, r2
 8004be2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004be6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	011a      	lsls	r2, r3, #4
 8004bf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004bfe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004c0c:	801a      	strh	r2, [r3, #0]
 8004c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	785b      	ldrb	r3, [r3, #1]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f040 8085 	bne.w	8004d38 <USB_EPStartXfer+0x1688>
 8004c2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004c52:	4413      	add	r3, r2
 8004c54:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004c58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	011a      	lsls	r2, r3, #4
 8004c66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004c86:	801a      	strh	r2, [r3, #0]
 8004c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c8c:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c8e:	d923      	bls.n	8004cd8 <USB_EPStartXfer+0x1628>
 8004c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c94:	095b      	lsrs	r3, r3, #5
 8004c96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c9e:	f003 031f 	and.w	r3, r3, #31
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d104      	bne.n	8004cb0 <USB_EPStartXfer+0x1600>
 8004ca6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004caa:	3b01      	subs	r3, #1
 8004cac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	029b      	lsls	r3, r3, #10
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004cd4:	801a      	strh	r2, [r3, #0]
 8004cd6:	e05c      	b.n	8004d92 <USB_EPStartXfer+0x16e2>
 8004cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10c      	bne.n	8004cfa <USB_EPStartXfer+0x164a>
 8004ce0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004cf6:	801a      	strh	r2, [r3, #0]
 8004cf8:	e04b      	b.n	8004d92 <USB_EPStartXfer+0x16e2>
 8004cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cfe:	085b      	lsrs	r3, r3, #1
 8004d00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d004      	beq.n	8004d1a <USB_EPStartXfer+0x166a>
 8004d10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d14:	3301      	adds	r3, #1
 8004d16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	029b      	lsls	r3, r3, #10
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004d34:	801a      	strh	r2, [r3, #0]
 8004d36:	e02c      	b.n	8004d92 <USB_EPStartXfer+0x16e2>
 8004d38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	785b      	ldrb	r3, [r3, #1]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d124      	bne.n	8004d92 <USB_EPStartXfer+0x16e2>
 8004d48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	461a      	mov	r2, r3
 8004d5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d5e:	4413      	add	r3, r2
 8004d60:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	011a      	lsls	r2, r3, #4
 8004d72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d76:	4413      	add	r3, r2
 8004d78:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d8a:	801a      	strh	r2, [r3, #0]
 8004d8c:	e001      	b.n	8004d92 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e03a      	b.n	8004e08 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004da0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004db4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004db8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004dbc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004dc0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004dc4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004dc8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004dcc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004dd0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004de2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	441a      	add	r2, r3
 8004dee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004df2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004df6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b085      	sub	sp, #20
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
 8004e1a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	785b      	ldrb	r3, [r3, #1]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d020      	beq.n	8004e66 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e3a:	81bb      	strh	r3, [r7, #12]
 8004e3c:	89bb      	ldrh	r3, [r7, #12]
 8004e3e:	f083 0310 	eor.w	r3, r3, #16
 8004e42:	81bb      	strh	r3, [r7, #12]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	441a      	add	r2, r3
 8004e4e:	89bb      	ldrh	r3, [r7, #12]
 8004e50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	8013      	strh	r3, [r2, #0]
 8004e64:	e01f      	b.n	8004ea6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e7c:	81fb      	strh	r3, [r7, #14]
 8004e7e:	89fb      	ldrh	r3, [r7, #14]
 8004e80:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004e84:	81fb      	strh	r3, [r7, #14]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	441a      	add	r2, r3
 8004e90:	89fb      	ldrh	r3, [r7, #14]
 8004e92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bc80      	pop	{r7}
 8004eb0:	4770      	bx	lr

08004eb2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b087      	sub	sp, #28
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
 8004eba:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	7b1b      	ldrb	r3, [r3, #12]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f040 809d 	bne.w	8005000 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	785b      	ldrb	r3, [r3, #1]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d04c      	beq.n	8004f68 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	823b      	strh	r3, [r7, #16]
 8004edc:	8a3b      	ldrh	r3, [r7, #16]
 8004ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d01b      	beq.n	8004f1e <USB_EPClearStall+0x6c>
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	881b      	ldrh	r3, [r3, #0]
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ef8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004efc:	81fb      	strh	r3, [r7, #14]
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	441a      	add	r2, r3
 8004f08:	89fb      	ldrh	r3, [r7, #14]
 8004f0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	78db      	ldrb	r3, [r3, #3]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d06c      	beq.n	8005000 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f3c:	81bb      	strh	r3, [r7, #12]
 8004f3e:	89bb      	ldrh	r3, [r7, #12]
 8004f40:	f083 0320 	eor.w	r3, r3, #32
 8004f44:	81bb      	strh	r3, [r7, #12]
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	441a      	add	r2, r3
 8004f50:	89bb      	ldrh	r3, [r7, #12]
 8004f52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	8013      	strh	r3, [r2, #0]
 8004f66:	e04b      	b.n	8005000 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	881b      	ldrh	r3, [r3, #0]
 8004f74:	82fb      	strh	r3, [r7, #22]
 8004f76:	8afb      	ldrh	r3, [r7, #22]
 8004f78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01b      	beq.n	8004fb8 <USB_EPClearStall+0x106>
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f96:	82bb      	strh	r3, [r7, #20]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	441a      	add	r2, r3
 8004fa2:	8abb      	ldrh	r3, [r7, #20]
 8004fa4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fa8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004fb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fce:	827b      	strh	r3, [r7, #18]
 8004fd0:	8a7b      	ldrh	r3, [r7, #18]
 8004fd2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004fd6:	827b      	strh	r3, [r7, #18]
 8004fd8:	8a7b      	ldrh	r3, [r7, #18]
 8004fda:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004fde:	827b      	strh	r3, [r7, #18]
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	441a      	add	r2, r3
 8004fea:	8a7b      	ldrh	r3, [r7, #18]
 8004fec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ff0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ff4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ff8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	371c      	adds	r7, #28
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr

0800500c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005018:	78fb      	ldrb	r3, [r7, #3]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d103      	bne.n	8005026 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2280      	movs	r2, #128	@ 0x80
 8005022:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	bc80      	pop	{r7}
 8005030:	4770      	bx	lr

08005032 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	bc80      	pop	{r7}
 8005044:	4770      	bx	lr

08005046 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	bc80      	pop	{r7}
 8005058:	4770      	bx	lr

0800505a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800505a:	b480      	push	{r7}
 800505c:	b085      	sub	sp, #20
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005068:	b29b      	uxth	r3, r3
 800506a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800506c:	68fb      	ldr	r3, [r7, #12]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	bc80      	pop	{r7}
 8005076:	4770      	bx	lr

08005078 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	bc80      	pop	{r7}
 800508c:	4770      	bx	lr

0800508e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800508e:	b480      	push	{r7}
 8005090:	b08b      	sub	sp, #44	@ 0x2c
 8005092:	af00      	add	r7, sp, #0
 8005094:	60f8      	str	r0, [r7, #12]
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	4611      	mov	r1, r2
 800509a:	461a      	mov	r2, r3
 800509c:	460b      	mov	r3, r1
 800509e:	80fb      	strh	r3, [r7, #6]
 80050a0:	4613      	mov	r3, r2
 80050a2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80050a4:	88bb      	ldrh	r3, [r7, #4]
 80050a6:	3301      	adds	r3, #1
 80050a8:	085b      	lsrs	r3, r3, #1
 80050aa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80050b4:	88fb      	ldrh	r3, [r7, #6]
 80050b6:	005a      	lsls	r2, r3, #1
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80050c0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80050c6:	e01e      	b.n	8005106 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	3301      	adds	r3, #1
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	021b      	lsls	r3, r3, #8
 80050d6:	b21a      	sxth	r2, r3
 80050d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80050dc:	4313      	orrs	r3, r2
 80050de:	b21b      	sxth	r3, r3
 80050e0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	8a7a      	ldrh	r2, [r7, #18]
 80050e6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	3302      	adds	r3, #2
 80050ec:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	3302      	adds	r3, #2
 80050f2:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	3301      	adds	r3, #1
 80050f8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	3301      	adds	r3, #1
 80050fe:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005102:	3b01      	subs	r3, #1
 8005104:	627b      	str	r3, [r7, #36]	@ 0x24
 8005106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1dd      	bne.n	80050c8 <USB_WritePMA+0x3a>
  }
}
 800510c:	bf00      	nop
 800510e:	bf00      	nop
 8005110:	372c      	adds	r7, #44	@ 0x2c
 8005112:	46bd      	mov	sp, r7
 8005114:	bc80      	pop	{r7}
 8005116:	4770      	bx	lr

08005118 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005118:	b480      	push	{r7}
 800511a:	b08b      	sub	sp, #44	@ 0x2c
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	4611      	mov	r1, r2
 8005124:	461a      	mov	r2, r3
 8005126:	460b      	mov	r3, r1
 8005128:	80fb      	strh	r3, [r7, #6]
 800512a:	4613      	mov	r3, r2
 800512c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800512e:	88bb      	ldrh	r3, [r7, #4]
 8005130:	085b      	lsrs	r3, r3, #1
 8005132:	b29b      	uxth	r3, r3
 8005134:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800513e:	88fb      	ldrh	r3, [r7, #6]
 8005140:	005a      	lsls	r2, r3, #1
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800514a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005150:	e01b      	b.n	800518a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005152:	6a3b      	ldr	r3, [r7, #32]
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	b29b      	uxth	r3, r3
 8005158:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	3302      	adds	r3, #2
 800515e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	b2da      	uxtb	r2, r3
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	3301      	adds	r3, #1
 800516c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	0a1b      	lsrs	r3, r3, #8
 8005172:	b2da      	uxtb	r2, r3
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	3301      	adds	r3, #1
 800517c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	3302      	adds	r3, #2
 8005182:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8005184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005186:	3b01      	subs	r3, #1
 8005188:	627b      	str	r3, [r7, #36]	@ 0x24
 800518a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1e0      	bne.n	8005152 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005190:	88bb      	ldrh	r3, [r7, #4]
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	b29b      	uxth	r3, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	d007      	beq.n	80051ac <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	701a      	strb	r2, [r3, #0]
  }
}
 80051ac:	bf00      	nop
 80051ae:	372c      	adds	r7, #44	@ 0x2c
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bc80      	pop	{r7}
 80051b4:	4770      	bx	lr

080051b6 <CRC16>:
 * Computes the CRC value of a certain data frame and returns it
 * @param data ptr to the data buffer
 * @param len number of bytes for the CRC to be calculated for
 * @return CRC byte value
 */
static uint16_t CRC16(uint8_t *data, uint16_t len) {
 80051b6:	b480      	push	{r7}
 80051b8:	b085      	sub	sp, #20
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
 80051be:	460b      	mov	r3, r1
 80051c0:	807b      	strh	r3, [r7, #2]
	uint16_t CRC = 0;
 80051c2:	2300      	movs	r3, #0
 80051c4:	81fb      	strh	r3, [r7, #14]
	for (uint16_t x = 0; x < len; x++) {
 80051c6:	2300      	movs	r3, #0
 80051c8:	81bb      	strh	r3, [r7, #12]
 80051ca:	e00a      	b.n	80051e2 <CRC16+0x2c>
		CRC += data[x];
 80051cc:	89bb      	ldrh	r3, [r7, #12]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	4413      	add	r3, r2
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	461a      	mov	r2, r3
 80051d6:	89fb      	ldrh	r3, [r7, #14]
 80051d8:	4413      	add	r3, r2
 80051da:	81fb      	strh	r3, [r7, #14]
	for (uint16_t x = 0; x < len; x++) {
 80051dc:	89bb      	ldrh	r3, [r7, #12]
 80051de:	3301      	adds	r3, #1
 80051e0:	81bb      	strh	r3, [r7, #12]
 80051e2:	89ba      	ldrh	r2, [r7, #12]
 80051e4:	887b      	ldrh	r3, [r7, #2]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d3f0      	bcc.n	80051cc <CRC16+0x16>
	}
	return CRC;
 80051ea:	89fb      	ldrh	r3, [r7, #14]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bc80      	pop	{r7}
 80051f4:	4770      	bx	lr

080051f6 <SbW_Request_Received_CB>:

void SbW_Request_Received_CB(SbW_Protocol_t *S, uint8_t *data, uint16_t len) {
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b086      	sub	sp, #24
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	60f8      	str	r0, [r7, #12]
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	4613      	mov	r3, r2
 8005202:	80fb      	strh	r3, [r7, #6]
	uint16_t CRC_Result = CRC16(data, len - 2);
 8005204:	88fb      	ldrh	r3, [r7, #6]
 8005206:	3b02      	subs	r3, #2
 8005208:	b29b      	uxth	r3, r3
 800520a:	4619      	mov	r1, r3
 800520c:	68b8      	ldr	r0, [r7, #8]
 800520e:	f7ff ffd2 	bl	80051b6 <CRC16>
 8005212:	4603      	mov	r3, r0
 8005214:	82fb      	strh	r3, [r7, #22]

	//check the data integrity
	if (CRC_Result
			!= (((uint16_t) data[len - 2] << 8) | (uint16_t) data[len - 1])) {
 8005216:	8afa      	ldrh	r2, [r7, #22]
 8005218:	88fb      	ldrh	r3, [r7, #6]
 800521a:	3b02      	subs	r3, #2
 800521c:	68b9      	ldr	r1, [r7, #8]
 800521e:	440b      	add	r3, r1
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	021b      	lsls	r3, r3, #8
 8005224:	88f9      	ldrh	r1, [r7, #6]
 8005226:	3901      	subs	r1, #1
 8005228:	68b8      	ldr	r0, [r7, #8]
 800522a:	4401      	add	r1, r0
 800522c:	7809      	ldrb	r1, [r1, #0]
 800522e:	430b      	orrs	r3, r1
	if (CRC_Result
 8005230:	429a      	cmp	r2, r3
 8005232:	d003      	beq.n	800523c <SbW_Request_Received_CB+0x46>
		//CRC Error
		S->HW_Interface_t.User_Callback(SbW_ERROR_CRC);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	2001      	movs	r0, #1
 800523a:	4798      	blx	r3
		//return CRC_Result; //ignoring this frame
	}
	//NoError
	S->R_W = data[1] >> 7;
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	3301      	adds	r3, #1
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	09db      	lsrs	r3, r3, #7
 8005244:	b2db      	uxtb	r3, r3
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	b2d9      	uxtb	r1, r3
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	7913      	ldrb	r3, [r2, #4]
 8005250:	f361 0300 	bfi	r3, r1, #0, #1
 8005254:	7113      	strb	r3, [r2, #4]
	S->CMD = data[1] & 0b01111111;
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	3301      	adds	r3, #1
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005260:	b2da      	uxtb	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	715a      	strb	r2, [r3, #5]

	switch (S->CMD) {
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	795b      	ldrb	r3, [r3, #5]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d002      	beq.n	8005274 <SbW_Request_Received_CB+0x7e>
 800526e:	2b02      	cmp	r3, #2
 8005270:	d035      	beq.n	80052de <SbW_Request_Received_CB+0xe8>
			data[2] = 0;
			//data[3]|data[4] for CRC_Result
		}
		break;
	default:
		return;
 8005272:	e075      	b.n	8005360 <SbW_Request_Received_CB+0x16a>
		S->HW_Interface_t.User_Callback(SbW_ERROR_NoERROR);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	2000      	movs	r0, #0
 800527a:	4798      	blx	r3
		if (S->R_W) //Read
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	791b      	ldrb	r3, [r3, #4]
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d014      	beq.n	80052b4 <SbW_Request_Received_CB+0xbe>
			len = 7;
 800528a:	2307      	movs	r3, #7
 800528c:	80fb      	strh	r3, [r7, #6]
			data[2] = 2; //data length =2
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	3302      	adds	r3, #2
 8005292:	2202      	movs	r2, #2
 8005294:	701a      	strb	r2, [r3, #0]
			data[3] = (uint8_t) (S->SamplingFreq >> 8);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	885b      	ldrh	r3, [r3, #2]
 800529a:	0a1b      	lsrs	r3, r3, #8
 800529c:	b29a      	uxth	r2, r3
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	3303      	adds	r3, #3
 80052a2:	b2d2      	uxtb	r2, r2
 80052a4:	701a      	strb	r2, [r3, #0]
			data[4] = (uint8_t) S->SamplingFreq;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	885a      	ldrh	r2, [r3, #2]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	3304      	adds	r3, #4
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]
		break;
 80052b2:	e036      	b.n	8005322 <SbW_Request_Received_CB+0x12c>
			len = 5;
 80052b4:	2305      	movs	r3, #5
 80052b6:	80fb      	strh	r3, [r7, #6]
			S->SamplingFreq = ((uint16_t) data[3] << 8) | (uint16_t) data[4];
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	3303      	adds	r3, #3
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	021b      	lsls	r3, r3, #8
 80052c0:	b21a      	sxth	r2, r3
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	3304      	adds	r3, #4
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	b21b      	sxth	r3, r3
 80052ca:	4313      	orrs	r3, r2
 80052cc:	b21b      	sxth	r3, r3
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	805a      	strh	r2, [r3, #2]
			data[2] = 0;
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	3302      	adds	r3, #2
 80052d8:	2200      	movs	r2, #0
 80052da:	701a      	strb	r2, [r3, #0]
		break;
 80052dc:	e021      	b.n	8005322 <SbW_Request_Received_CB+0x12c>
		S->HW_Interface_t.User_Callback(SbW_ERROR_NoERROR);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	2000      	movs	r0, #0
 80052e4:	4798      	blx	r3
		if (S->R_W) //Read
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	791b      	ldrb	r3, [r3, #4]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00b      	beq.n	800530c <SbW_Request_Received_CB+0x116>
			len = 6;
 80052f4:	2306      	movs	r3, #6
 80052f6:	80fb      	strh	r3, [r7, #6]
			data[2] = 1; //data length =1
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	3302      	adds	r3, #2
 80052fc:	2201      	movs	r2, #1
 80052fe:	701a      	strb	r2, [r3, #0]
			data[3] = S->Frame_Len; //Get Frame Length
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	3303      	adds	r3, #3
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	7852      	ldrb	r2, [r2, #1]
 8005308:	701a      	strb	r2, [r3, #0]
		break;
 800530a:	e009      	b.n	8005320 <SbW_Request_Received_CB+0x12a>
			len = 5;
 800530c:	2305      	movs	r3, #5
 800530e:	80fb      	strh	r3, [r7, #6]
			S->Frame_Len = data[3];
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	78da      	ldrb	r2, [r3, #3]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	705a      	strb	r2, [r3, #1]
			data[2] = 0;
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	3302      	adds	r3, #2
 800531c:	2200      	movs	r2, #0
 800531e:	701a      	strb	r2, [r3, #0]
		break;
 8005320:	bf00      	nop
	}

	CRC_Result = CRC16(data, len - 2);
 8005322:	88fb      	ldrh	r3, [r7, #6]
 8005324:	3b02      	subs	r3, #2
 8005326:	b29b      	uxth	r3, r3
 8005328:	4619      	mov	r1, r3
 800532a:	68b8      	ldr	r0, [r7, #8]
 800532c:	f7ff ff43 	bl	80051b6 <CRC16>
 8005330:	4603      	mov	r3, r0
 8005332:	82fb      	strh	r3, [r7, #22]
	data[len - 2] = (uint8_t) (CRC_Result >> 8);
 8005334:	8afb      	ldrh	r3, [r7, #22]
 8005336:	0a1b      	lsrs	r3, r3, #8
 8005338:	b299      	uxth	r1, r3
 800533a:	88fb      	ldrh	r3, [r7, #6]
 800533c:	3b02      	subs	r3, #2
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	4413      	add	r3, r2
 8005342:	b2ca      	uxtb	r2, r1
 8005344:	701a      	strb	r2, [r3, #0]
	data[len - 1] = (uint8_t) (CRC_Result);
 8005346:	88fb      	ldrh	r3, [r7, #6]
 8005348:	3b01      	subs	r3, #1
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	4413      	add	r3, r2
 800534e:	8afa      	ldrh	r2, [r7, #22]
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	701a      	strb	r2, [r3, #0]
	S->HW_Interface_t.Send_Reply(data, len);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	88fa      	ldrh	r2, [r7, #6]
 800535a:	4611      	mov	r1, r2
 800535c:	68b8      	ldr	r0, [r7, #8]
 800535e:	4798      	blx	r3
}
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b084      	sub	sp, #16
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
 800536e:	460b      	mov	r3, r1
 8005370:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	7c1b      	ldrb	r3, [r3, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d115      	bne.n	80053aa <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800537e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005382:	2202      	movs	r2, #2
 8005384:	2181      	movs	r1, #129	@ 0x81
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f001 fe8b 	bl	80070a2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005392:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005396:	2202      	movs	r2, #2
 8005398:	2101      	movs	r1, #1
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f001 fe81 	bl	80070a2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80053a8:	e012      	b.n	80053d0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80053aa:	2340      	movs	r3, #64	@ 0x40
 80053ac:	2202      	movs	r2, #2
 80053ae:	2181      	movs	r1, #129	@ 0x81
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f001 fe76 	bl	80070a2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80053bc:	2340      	movs	r3, #64	@ 0x40
 80053be:	2202      	movs	r2, #2
 80053c0:	2101      	movs	r1, #1
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f001 fe6d 	bl	80070a2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80053d0:	2308      	movs	r3, #8
 80053d2:	2203      	movs	r2, #3
 80053d4:	2182      	movs	r1, #130	@ 0x82
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f001 fe63 	bl	80070a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80053e2:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80053e6:	f001 ff83 	bl	80072f0 <USBD_static_malloc>
 80053ea:	4602      	mov	r2, r0
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d102      	bne.n	8005402 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80053fc:	2301      	movs	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]
 8005400:	e026      	b.n	8005450 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005408:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2200      	movs	r2, #0
 8005418:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2200      	movs	r2, #0
 8005420:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	7c1b      	ldrb	r3, [r3, #16]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d109      	bne.n	8005440 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005432:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005436:	2101      	movs	r1, #1
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f001 ff22 	bl	8007282 <USBD_LL_PrepareReceive>
 800543e:	e007      	b.n	8005450 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005446:	2340      	movs	r3, #64	@ 0x40
 8005448:	2101      	movs	r1, #1
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f001 ff19 	bl	8007282 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005450:	7bfb      	ldrb	r3, [r7, #15]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b084      	sub	sp, #16
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	460b      	mov	r3, r1
 8005464:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800546a:	2181      	movs	r1, #129	@ 0x81
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f001 fe3e 	bl	80070ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005478:	2101      	movs	r1, #1
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f001 fe37 	bl	80070ee <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005488:	2182      	movs	r1, #130	@ 0x82
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f001 fe2f 	bl	80070ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00e      	beq.n	80054be <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80054b0:	4618      	mov	r0, r3
 80054b2:	f001 ff29 	bl	8007308 <USBD_static_free>
    pdev->pClassData = NULL;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80054be:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80054d8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80054da:	2300      	movs	r3, #0
 80054dc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80054de:	2300      	movs	r3, #0
 80054e0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d039      	beq.n	8005566 <USBD_CDC_Setup+0x9e>
 80054f2:	2b20      	cmp	r3, #32
 80054f4:	d17f      	bne.n	80055f6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	88db      	ldrh	r3, [r3, #6]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d029      	beq.n	8005552 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	b25b      	sxtb	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	da11      	bge.n	800552c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005514:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005516:	683a      	ldr	r2, [r7, #0]
 8005518:	88d2      	ldrh	r2, [r2, #6]
 800551a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800551c:	6939      	ldr	r1, [r7, #16]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	88db      	ldrh	r3, [r3, #6]
 8005522:	461a      	mov	r2, r3
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f001 fa05 	bl	8006934 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800552a:	e06b      	b.n	8005604 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	785a      	ldrb	r2, [r3, #1]
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	88db      	ldrh	r3, [r3, #6]
 800553a:	b2da      	uxtb	r2, r3
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005542:	6939      	ldr	r1, [r7, #16]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	88db      	ldrh	r3, [r3, #6]
 8005548:	461a      	mov	r2, r3
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f001 fa20 	bl	8006990 <USBD_CtlPrepareRx>
      break;
 8005550:	e058      	b.n	8005604 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	7850      	ldrb	r0, [r2, #1]
 800555e:	2200      	movs	r2, #0
 8005560:	6839      	ldr	r1, [r7, #0]
 8005562:	4798      	blx	r3
      break;
 8005564:	e04e      	b.n	8005604 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	785b      	ldrb	r3, [r3, #1]
 800556a:	2b0b      	cmp	r3, #11
 800556c:	d02e      	beq.n	80055cc <USBD_CDC_Setup+0x104>
 800556e:	2b0b      	cmp	r3, #11
 8005570:	dc38      	bgt.n	80055e4 <USBD_CDC_Setup+0x11c>
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <USBD_CDC_Setup+0xb4>
 8005576:	2b0a      	cmp	r3, #10
 8005578:	d014      	beq.n	80055a4 <USBD_CDC_Setup+0xdc>
 800557a:	e033      	b.n	80055e4 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005582:	2b03      	cmp	r3, #3
 8005584:	d107      	bne.n	8005596 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005586:	f107 030c 	add.w	r3, r7, #12
 800558a:	2202      	movs	r2, #2
 800558c:	4619      	mov	r1, r3
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f001 f9d0 	bl	8006934 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005594:	e02e      	b.n	80055f4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005596:	6839      	ldr	r1, [r7, #0]
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f001 f961 	bl	8006860 <USBD_CtlError>
            ret = USBD_FAIL;
 800559e:	2302      	movs	r3, #2
 80055a0:	75fb      	strb	r3, [r7, #23]
          break;
 80055a2:	e027      	b.n	80055f4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055aa:	2b03      	cmp	r3, #3
 80055ac:	d107      	bne.n	80055be <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80055ae:	f107 030f 	add.w	r3, r7, #15
 80055b2:	2201      	movs	r2, #1
 80055b4:	4619      	mov	r1, r3
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f001 f9bc 	bl	8006934 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80055bc:	e01a      	b.n	80055f4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80055be:	6839      	ldr	r1, [r7, #0]
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f001 f94d 	bl	8006860 <USBD_CtlError>
            ret = USBD_FAIL;
 80055c6:	2302      	movs	r3, #2
 80055c8:	75fb      	strb	r3, [r7, #23]
          break;
 80055ca:	e013      	b.n	80055f4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055d2:	2b03      	cmp	r3, #3
 80055d4:	d00d      	beq.n	80055f2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80055d6:	6839      	ldr	r1, [r7, #0]
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f001 f941 	bl	8006860 <USBD_CtlError>
            ret = USBD_FAIL;
 80055de:	2302      	movs	r3, #2
 80055e0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80055e2:	e006      	b.n	80055f2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80055e4:	6839      	ldr	r1, [r7, #0]
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f001 f93a 	bl	8006860 <USBD_CtlError>
          ret = USBD_FAIL;
 80055ec:	2302      	movs	r3, #2
 80055ee:	75fb      	strb	r3, [r7, #23]
          break;
 80055f0:	e000      	b.n	80055f4 <USBD_CDC_Setup+0x12c>
          break;
 80055f2:	bf00      	nop
      }
      break;
 80055f4:	e006      	b.n	8005604 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80055f6:	6839      	ldr	r1, [r7, #0]
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f001 f931 	bl	8006860 <USBD_CtlError>
      ret = USBD_FAIL;
 80055fe:	2302      	movs	r3, #2
 8005600:	75fb      	strb	r3, [r7, #23]
      break;
 8005602:	bf00      	nop
  }

  return ret;
 8005604:	7dfb      	ldrb	r3, [r7, #23]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b084      	sub	sp, #16
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
 8005616:	460b      	mov	r3, r1
 8005618:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005620:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005628:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005630:	2b00      	cmp	r3, #0
 8005632:	d03a      	beq.n	80056aa <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005634:	78fa      	ldrb	r2, [r7, #3]
 8005636:	6879      	ldr	r1, [r7, #4]
 8005638:	4613      	mov	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	440b      	add	r3, r1
 8005642:	331c      	adds	r3, #28
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d029      	beq.n	800569e <USBD_CDC_DataIn+0x90>
 800564a:	78fa      	ldrb	r2, [r7, #3]
 800564c:	6879      	ldr	r1, [r7, #4]
 800564e:	4613      	mov	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	440b      	add	r3, r1
 8005658:	331c      	adds	r3, #28
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	78f9      	ldrb	r1, [r7, #3]
 800565e:	68b8      	ldr	r0, [r7, #8]
 8005660:	460b      	mov	r3, r1
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	440b      	add	r3, r1
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	4403      	add	r3, r0
 800566a:	3320      	adds	r3, #32
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	fbb2 f1f3 	udiv	r1, r2, r3
 8005672:	fb01 f303 	mul.w	r3, r1, r3
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d110      	bne.n	800569e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800567c:	78fa      	ldrb	r2, [r7, #3]
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	4613      	mov	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	331c      	adds	r3, #28
 800568c:	2200      	movs	r2, #0
 800568e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005690:	78f9      	ldrb	r1, [r7, #3]
 8005692:	2300      	movs	r3, #0
 8005694:	2200      	movs	r2, #0
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f001 fdd0 	bl	800723c <USBD_LL_Transmit>
 800569c:	e003      	b.n	80056a6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	e000      	b.n	80056ac <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80056aa:	2302      	movs	r3, #2
  }
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	460b      	mov	r3, r1
 80056be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80056c8:	78fb      	ldrb	r3, [r7, #3]
 80056ca:	4619      	mov	r1, r3
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f001 fdfb 	bl	80072c8 <USBD_LL_GetRxDataSize>
 80056d2:	4602      	mov	r2, r0
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00d      	beq.n	8005700 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80056f8:	4611      	mov	r1, r2
 80056fa:	4798      	blx	r3

    return USBD_OK;
 80056fc:	2300      	movs	r3, #0
 80056fe:	e000      	b.n	8005702 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005700:	2302      	movs	r3, #2
  }
}
 8005702:	4618      	mov	r0, r3
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b084      	sub	sp, #16
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005718:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005720:	2b00      	cmp	r3, #0
 8005722:	d014      	beq.n	800574e <USBD_CDC_EP0_RxReady+0x44>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800572a:	2bff      	cmp	r3, #255	@ 0xff
 800572c:	d00f      	beq.n	800574e <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800573c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005744:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	22ff      	movs	r2, #255	@ 0xff
 800574a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2243      	movs	r2, #67	@ 0x43
 8005764:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005766:	4b03      	ldr	r3, [pc, #12]	@ (8005774 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005768:	4618      	mov	r0, r3
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	bc80      	pop	{r7}
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	200000a4 	.word	0x200000a4

08005778 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2243      	movs	r2, #67	@ 0x43
 8005784:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005786:	4b03      	ldr	r3, [pc, #12]	@ (8005794 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005788:	4618      	mov	r0, r3
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	bc80      	pop	{r7}
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	20000060 	.word	0x20000060

08005798 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2243      	movs	r2, #67	@ 0x43
 80057a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80057a6:	4b03      	ldr	r3, [pc, #12]	@ (80057b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bc80      	pop	{r7}
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	200000e8 	.word	0x200000e8

080057b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	220a      	movs	r2, #10
 80057c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80057c6:	4b03      	ldr	r3, [pc, #12]	@ (80057d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bc80      	pop	{r7}
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	2000001c 	.word	0x2000001c

080057d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80057e2:	2302      	movs	r3, #2
 80057e4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d005      	beq.n	80057f8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80057f4:	2300      	movs	r3, #0
 80057f6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	bc80      	pop	{r7}
 8005802:	4770      	bx	lr

08005804 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	4613      	mov	r3, r2
 8005810:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005818:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005822:	88fa      	ldrh	r2, [r7, #6]
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	371c      	adds	r7, #28
 8005830:	46bd      	mov	sp, r7
 8005832:	bc80      	pop	{r7}
 8005834:	4770      	bx	lr

08005836 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005836:	b480      	push	{r7}
 8005838:	b085      	sub	sp, #20
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
 800583e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005846:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	bc80      	pop	{r7}
 800585a:	4770      	bx	lr

0800585c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800586a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005872:	2b00      	cmp	r3, #0
 8005874:	d01c      	beq.n	80058b0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800587c:	2b00      	cmp	r3, #0
 800587e:	d115      	bne.n	80058ac <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2201      	movs	r2, #1
 8005884:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800589e:	b29b      	uxth	r3, r3
 80058a0:	2181      	movs	r1, #129	@ 0x81
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f001 fcca 	bl	800723c <USBD_LL_Transmit>

      return USBD_OK;
 80058a8:	2300      	movs	r3, #0
 80058aa:	e002      	b.n	80058b2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e000      	b.n	80058b2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80058b0:	2302      	movs	r3, #2
  }
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b084      	sub	sp, #16
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058c8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d017      	beq.n	8005904 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	7c1b      	ldrb	r3, [r3, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d109      	bne.n	80058f0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80058e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80058e6:	2101      	movs	r1, #1
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f001 fcca 	bl	8007282 <USBD_LL_PrepareReceive>
 80058ee:	e007      	b.n	8005900 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80058f6:	2340      	movs	r3, #64	@ 0x40
 80058f8:	2101      	movs	r1, #1
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f001 fcc1 	bl	8007282 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005900:	2300      	movs	r3, #0
 8005902:	e000      	b.n	8005906 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005904:	2302      	movs	r3, #2
  }
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b084      	sub	sp, #16
 8005912:	af00      	add	r7, sp, #0
 8005914:	60f8      	str	r0, [r7, #12]
 8005916:	60b9      	str	r1, [r7, #8]
 8005918:	4613      	mov	r3, r2
 800591a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005922:	2302      	movs	r3, #2
 8005924:	e01a      	b.n	800595c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	79fa      	ldrb	r2, [r7, #7]
 8005952:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f001 fb2f 	bl	8006fb8 <USBD_LL_Init>

  return USBD_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800596e:	2300      	movs	r3, #0
 8005970:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d006      	beq.n	8005986 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8005980:	2300      	movs	r3, #0
 8005982:	73fb      	strb	r3, [r7, #15]
 8005984:	e001      	b.n	800598a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005986:	2302      	movs	r3, #2
 8005988:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800598a:	7bfb      	ldrb	r3, [r7, #15]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	bc80      	pop	{r7}
 8005994:	4770      	bx	lr

08005996 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b082      	sub	sp, #8
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f001 fb64 	bl	800706c <USBD_LL_Start>

  return USBD_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	bc80      	pop	{r7}
 80059c0:	4770      	bx	lr

080059c2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b084      	sub	sp, #16
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
 80059ca:	460b      	mov	r3, r1
 80059cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80059ce:	2302      	movs	r3, #2
 80059d0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00c      	beq.n	80059f6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	78fa      	ldrb	r2, [r7, #3]
 80059e6:	4611      	mov	r1, r2
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	4798      	blx	r3
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	78fa      	ldrb	r2, [r7, #3]
 8005a16:	4611      	mov	r1, r2
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	4798      	blx	r3

  return USBD_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b082      	sub	sp, #8
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
 8005a2e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8005a36:	6839      	ldr	r1, [r7, #0]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f000 fed8 	bl	80067ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005a5a:	f003 031f 	and.w	r3, r3, #31
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d016      	beq.n	8005a90 <USBD_LL_SetupStage+0x6a>
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d81c      	bhi.n	8005aa0 <USBD_LL_SetupStage+0x7a>
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <USBD_LL_SetupStage+0x4a>
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d008      	beq.n	8005a80 <USBD_LL_SetupStage+0x5a>
 8005a6e:	e017      	b.n	8005aa0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8005a76:	4619      	mov	r1, r3
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f9cb 	bl	8005e14 <USBD_StdDevReq>
      break;
 8005a7e:	e01a      	b.n	8005ab6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8005a86:	4619      	mov	r1, r3
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fa2d 	bl	8005ee8 <USBD_StdItfReq>
      break;
 8005a8e:	e012      	b.n	8005ab6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8005a96:	4619      	mov	r1, r3
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 fa6d 	bl	8005f78 <USBD_StdEPReq>
      break;
 8005a9e:	e00a      	b.n	8005ab6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005aa6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	4619      	mov	r1, r3
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f001 fb3c 	bl	800712c <USBD_LL_StallEP>
      break;
 8005ab4:	bf00      	nop
  }

  return USBD_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3708      	adds	r7, #8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	460b      	mov	r3, r1
 8005aca:	607a      	str	r2, [r7, #4]
 8005acc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005ace:	7afb      	ldrb	r3, [r7, #11]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d14b      	bne.n	8005b6c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005ada:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	d134      	bne.n	8005b50 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d919      	bls.n	8005b26 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	1ad2      	subs	r2, r2, r3
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	68da      	ldr	r2, [r3, #12]
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d203      	bcs.n	8005b14 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	e002      	b.n	8005b1a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	6879      	ldr	r1, [r7, #4]
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 ff54 	bl	80069cc <USBD_CtlContinueRx>
 8005b24:	e038      	b.n	8005b98 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00a      	beq.n	8005b48 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005b38:	2b03      	cmp	r3, #3
 8005b3a:	d105      	bne.n	8005b48 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 ff51 	bl	80069f0 <USBD_CtlSendStatus>
 8005b4e:	e023      	b.n	8005b98 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005b56:	2b05      	cmp	r3, #5
 8005b58:	d11e      	bne.n	8005b98 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005b62:	2100      	movs	r1, #0
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f001 fae1 	bl	800712c <USBD_LL_StallEP>
 8005b6a:	e015      	b.n	8005b98 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00d      	beq.n	8005b94 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005b7e:	2b03      	cmp	r3, #3
 8005b80:	d108      	bne.n	8005b94 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	7afa      	ldrb	r2, [r7, #11]
 8005b8c:	4611      	mov	r1, r2
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	4798      	blx	r3
 8005b92:	e001      	b.n	8005b98 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005b94:	2302      	movs	r3, #2
 8005b96:	e000      	b.n	8005b9a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b086      	sub	sp, #24
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	460b      	mov	r3, r1
 8005bac:	607a      	str	r2, [r7, #4]
 8005bae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005bb0:	7afb      	ldrb	r3, [r7, #11]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d17f      	bne.n	8005cb6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	3314      	adds	r3, #20
 8005bba:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d15c      	bne.n	8005c80 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	68da      	ldr	r2, [r3, #12]
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d915      	bls.n	8005bfe <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	1ad2      	subs	r2, r2, r3
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	461a      	mov	r2, r3
 8005be8:	6879      	ldr	r1, [r7, #4]
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 febe 	bl	800696c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f001 fb43 	bl	8007282 <USBD_LL_PrepareReceive>
 8005bfc:	e04e      	b.n	8005c9c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	6912      	ldr	r2, [r2, #16]
 8005c06:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c0a:	fb01 f202 	mul.w	r2, r1, r2
 8005c0e:	1a9b      	subs	r3, r3, r2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d11c      	bne.n	8005c4e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d316      	bcc.n	8005c4e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d20f      	bcs.n	8005c4e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2100      	movs	r1, #0
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f000 fe9a 	bl	800696c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c40:	2300      	movs	r3, #0
 8005c42:	2200      	movs	r2, #0
 8005c44:	2100      	movs	r1, #0
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f001 fb1b 	bl	8007282 <USBD_LL_PrepareReceive>
 8005c4c:	e026      	b.n	8005c9c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	d105      	bne.n	8005c70 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005c70:	2180      	movs	r1, #128	@ 0x80
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f001 fa5a 	bl	800712c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 fecc 	bl	8006a16 <USBD_CtlReceiveStatus>
 8005c7e:	e00d      	b.n	8005c9c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d004      	beq.n	8005c94 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d103      	bne.n	8005c9c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005c94:	2180      	movs	r1, #128	@ 0x80
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f001 fa48 	bl	800712c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d11d      	bne.n	8005ce2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f7ff fe81 	bl	80059ae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005cb4:	e015      	b.n	8005ce2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00d      	beq.n	8005cde <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005cc8:	2b03      	cmp	r3, #3
 8005cca:	d108      	bne.n	8005cde <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	7afa      	ldrb	r2, [r7, #11]
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	4798      	blx	r3
 8005cdc:	e001      	b.n	8005ce2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005cde:	2302      	movs	r3, #2
 8005ce0:	e000      	b.n	8005ce4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005cf4:	2340      	movs	r3, #64	@ 0x40
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f001 f9d1 	bl	80070a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2240      	movs	r2, #64	@ 0x40
 8005d0c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d10:	2340      	movs	r3, #64	@ 0x40
 8005d12:	2200      	movs	r2, #0
 8005d14:	2180      	movs	r1, #128	@ 0x80
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f001 f9c3 	bl	80070a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2240      	movs	r2, #64	@ 0x40
 8005d26:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d009      	beq.n	8005d64 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	6852      	ldr	r2, [r2, #4]
 8005d5c:	b2d2      	uxtb	r2, r2
 8005d5e:	4611      	mov	r1, r2
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	4798      	blx	r3
  }

  return USBD_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	460b      	mov	r3, r1
 8005d78:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	78fa      	ldrb	r2, [r7, #3]
 8005d7e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bc80      	pop	{r7}
 8005d8a:	4770      	bx	lr

08005d8c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2204      	movs	r2, #4
 8005da4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bc80      	pop	{r7}
 8005db2:	4770      	bx	lr

08005db4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	d105      	bne.n	8005dd2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bc80      	pop	{r7}
 8005ddc:	4770      	bx	lr

08005dde <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b082      	sub	sp, #8
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005dec:	2b03      	cmp	r3, #3
 8005dee:	d10b      	bne.n	8005e08 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d005      	beq.n	8005e08 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005e02:	69db      	ldr	r3, [r3, #28]
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005e2a:	2b40      	cmp	r3, #64	@ 0x40
 8005e2c:	d005      	beq.n	8005e3a <USBD_StdDevReq+0x26>
 8005e2e:	2b40      	cmp	r3, #64	@ 0x40
 8005e30:	d84f      	bhi.n	8005ed2 <USBD_StdDevReq+0xbe>
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d009      	beq.n	8005e4a <USBD_StdDevReq+0x36>
 8005e36:	2b20      	cmp	r3, #32
 8005e38:	d14b      	bne.n	8005ed2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	6839      	ldr	r1, [r7, #0]
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	4798      	blx	r3
      break;
 8005e48:	e048      	b.n	8005edc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	785b      	ldrb	r3, [r3, #1]
 8005e4e:	2b09      	cmp	r3, #9
 8005e50:	d839      	bhi.n	8005ec6 <USBD_StdDevReq+0xb2>
 8005e52:	a201      	add	r2, pc, #4	@ (adr r2, 8005e58 <USBD_StdDevReq+0x44>)
 8005e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e58:	08005ea9 	.word	0x08005ea9
 8005e5c:	08005ebd 	.word	0x08005ebd
 8005e60:	08005ec7 	.word	0x08005ec7
 8005e64:	08005eb3 	.word	0x08005eb3
 8005e68:	08005ec7 	.word	0x08005ec7
 8005e6c:	08005e8b 	.word	0x08005e8b
 8005e70:	08005e81 	.word	0x08005e81
 8005e74:	08005ec7 	.word	0x08005ec7
 8005e78:	08005e9f 	.word	0x08005e9f
 8005e7c:	08005e95 	.word	0x08005e95
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005e80:	6839      	ldr	r1, [r7, #0]
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f9dc 	bl	8006240 <USBD_GetDescriptor>
          break;
 8005e88:	e022      	b.n	8005ed0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005e8a:	6839      	ldr	r1, [r7, #0]
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fb3f 	bl	8006510 <USBD_SetAddress>
          break;
 8005e92:	e01d      	b.n	8005ed0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005e94:	6839      	ldr	r1, [r7, #0]
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fb7e 	bl	8006598 <USBD_SetConfig>
          break;
 8005e9c:	e018      	b.n	8005ed0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005e9e:	6839      	ldr	r1, [r7, #0]
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 fc07 	bl	80066b4 <USBD_GetConfig>
          break;
 8005ea6:	e013      	b.n	8005ed0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005ea8:	6839      	ldr	r1, [r7, #0]
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 fc37 	bl	800671e <USBD_GetStatus>
          break;
 8005eb0:	e00e      	b.n	8005ed0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005eb2:	6839      	ldr	r1, [r7, #0]
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fc65 	bl	8006784 <USBD_SetFeature>
          break;
 8005eba:	e009      	b.n	8005ed0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005ebc:	6839      	ldr	r1, [r7, #0]
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 fc74 	bl	80067ac <USBD_ClrFeature>
          break;
 8005ec4:	e004      	b.n	8005ed0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005ec6:	6839      	ldr	r1, [r7, #0]
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 fcc9 	bl	8006860 <USBD_CtlError>
          break;
 8005ece:	bf00      	nop
      }
      break;
 8005ed0:	e004      	b.n	8005edc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005ed2:	6839      	ldr	r1, [r7, #0]
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fcc3 	bl	8006860 <USBD_CtlError>
      break;
 8005eda:	bf00      	nop
  }

  return ret;
 8005edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop

08005ee8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005efe:	2b40      	cmp	r3, #64	@ 0x40
 8005f00:	d005      	beq.n	8005f0e <USBD_StdItfReq+0x26>
 8005f02:	2b40      	cmp	r3, #64	@ 0x40
 8005f04:	d82e      	bhi.n	8005f64 <USBD_StdItfReq+0x7c>
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <USBD_StdItfReq+0x26>
 8005f0a:	2b20      	cmp	r3, #32
 8005f0c:	d12a      	bne.n	8005f64 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f14:	3b01      	subs	r3, #1
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d81d      	bhi.n	8005f56 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	889b      	ldrh	r3, [r3, #4]
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d813      	bhi.n	8005f4c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	6839      	ldr	r1, [r7, #0]
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	4798      	blx	r3
 8005f32:	4603      	mov	r3, r0
 8005f34:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	88db      	ldrh	r3, [r3, #6]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d110      	bne.n	8005f60 <USBD_StdItfReq+0x78>
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10d      	bne.n	8005f60 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fd53 	bl	80069f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005f4a:	e009      	b.n	8005f60 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8005f4c:	6839      	ldr	r1, [r7, #0]
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fc86 	bl	8006860 <USBD_CtlError>
          break;
 8005f54:	e004      	b.n	8005f60 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8005f56:	6839      	ldr	r1, [r7, #0]
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fc81 	bl	8006860 <USBD_CtlError>
          break;
 8005f5e:	e000      	b.n	8005f62 <USBD_StdItfReq+0x7a>
          break;
 8005f60:	bf00      	nop
      }
      break;
 8005f62:	e004      	b.n	8005f6e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8005f64:	6839      	ldr	r1, [r7, #0]
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fc7a 	bl	8006860 <USBD_CtlError>
      break;
 8005f6c:	bf00      	nop
  }

  return USBD_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f82:	2300      	movs	r3, #0
 8005f84:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	889b      	ldrh	r3, [r3, #4]
 8005f8a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005f94:	2b40      	cmp	r3, #64	@ 0x40
 8005f96:	d007      	beq.n	8005fa8 <USBD_StdEPReq+0x30>
 8005f98:	2b40      	cmp	r3, #64	@ 0x40
 8005f9a:	f200 8146 	bhi.w	800622a <USBD_StdEPReq+0x2b2>
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00a      	beq.n	8005fb8 <USBD_StdEPReq+0x40>
 8005fa2:	2b20      	cmp	r3, #32
 8005fa4:	f040 8141 	bne.w	800622a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	6839      	ldr	r1, [r7, #0]
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	4798      	blx	r3
      break;
 8005fb6:	e13d      	b.n	8006234 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005fc0:	2b20      	cmp	r3, #32
 8005fc2:	d10a      	bne.n	8005fda <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	6839      	ldr	r1, [r7, #0]
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	4798      	blx	r3
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005fd6:	7bfb      	ldrb	r3, [r7, #15]
 8005fd8:	e12d      	b.n	8006236 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	785b      	ldrb	r3, [r3, #1]
 8005fde:	2b03      	cmp	r3, #3
 8005fe0:	d007      	beq.n	8005ff2 <USBD_StdEPReq+0x7a>
 8005fe2:	2b03      	cmp	r3, #3
 8005fe4:	f300 811b 	bgt.w	800621e <USBD_StdEPReq+0x2a6>
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d072      	beq.n	80060d2 <USBD_StdEPReq+0x15a>
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d03a      	beq.n	8006066 <USBD_StdEPReq+0xee>
 8005ff0:	e115      	b.n	800621e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d002      	beq.n	8006002 <USBD_StdEPReq+0x8a>
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d015      	beq.n	800602c <USBD_StdEPReq+0xb4>
 8006000:	e02b      	b.n	800605a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006002:	7bbb      	ldrb	r3, [r7, #14]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00c      	beq.n	8006022 <USBD_StdEPReq+0xaa>
 8006008:	7bbb      	ldrb	r3, [r7, #14]
 800600a:	2b80      	cmp	r3, #128	@ 0x80
 800600c:	d009      	beq.n	8006022 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800600e:	7bbb      	ldrb	r3, [r7, #14]
 8006010:	4619      	mov	r1, r3
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f001 f88a 	bl	800712c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006018:	2180      	movs	r1, #128	@ 0x80
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f001 f886 	bl	800712c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006020:	e020      	b.n	8006064 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006022:	6839      	ldr	r1, [r7, #0]
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 fc1b 	bl	8006860 <USBD_CtlError>
              break;
 800602a:	e01b      	b.n	8006064 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	885b      	ldrh	r3, [r3, #2]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10e      	bne.n	8006052 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006034:	7bbb      	ldrb	r3, [r7, #14]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00b      	beq.n	8006052 <USBD_StdEPReq+0xda>
 800603a:	7bbb      	ldrb	r3, [r7, #14]
 800603c:	2b80      	cmp	r3, #128	@ 0x80
 800603e:	d008      	beq.n	8006052 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	88db      	ldrh	r3, [r3, #6]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d104      	bne.n	8006052 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006048:	7bbb      	ldrb	r3, [r7, #14]
 800604a:	4619      	mov	r1, r3
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f001 f86d 	bl	800712c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fccc 	bl	80069f0 <USBD_CtlSendStatus>

              break;
 8006058:	e004      	b.n	8006064 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800605a:	6839      	ldr	r1, [r7, #0]
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fbff 	bl	8006860 <USBD_CtlError>
              break;
 8006062:	bf00      	nop
          }
          break;
 8006064:	e0e0      	b.n	8006228 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800606c:	2b02      	cmp	r3, #2
 800606e:	d002      	beq.n	8006076 <USBD_StdEPReq+0xfe>
 8006070:	2b03      	cmp	r3, #3
 8006072:	d015      	beq.n	80060a0 <USBD_StdEPReq+0x128>
 8006074:	e026      	b.n	80060c4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006076:	7bbb      	ldrb	r3, [r7, #14]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00c      	beq.n	8006096 <USBD_StdEPReq+0x11e>
 800607c:	7bbb      	ldrb	r3, [r7, #14]
 800607e:	2b80      	cmp	r3, #128	@ 0x80
 8006080:	d009      	beq.n	8006096 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006082:	7bbb      	ldrb	r3, [r7, #14]
 8006084:	4619      	mov	r1, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f001 f850 	bl	800712c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800608c:	2180      	movs	r1, #128	@ 0x80
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f001 f84c 	bl	800712c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006094:	e01c      	b.n	80060d0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006096:	6839      	ldr	r1, [r7, #0]
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 fbe1 	bl	8006860 <USBD_CtlError>
              break;
 800609e:	e017      	b.n	80060d0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	885b      	ldrh	r3, [r3, #2]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d112      	bne.n	80060ce <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80060a8:	7bbb      	ldrb	r3, [r7, #14]
 80060aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d004      	beq.n	80060bc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80060b2:	7bbb      	ldrb	r3, [r7, #14]
 80060b4:	4619      	mov	r1, r3
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f001 f857 	bl	800716a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fc97 	bl	80069f0 <USBD_CtlSendStatus>
              }
              break;
 80060c2:	e004      	b.n	80060ce <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80060c4:	6839      	ldr	r1, [r7, #0]
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fbca 	bl	8006860 <USBD_CtlError>
              break;
 80060cc:	e000      	b.n	80060d0 <USBD_StdEPReq+0x158>
              break;
 80060ce:	bf00      	nop
          }
          break;
 80060d0:	e0aa      	b.n	8006228 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d002      	beq.n	80060e2 <USBD_StdEPReq+0x16a>
 80060dc:	2b03      	cmp	r3, #3
 80060de:	d032      	beq.n	8006146 <USBD_StdEPReq+0x1ce>
 80060e0:	e097      	b.n	8006212 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060e2:	7bbb      	ldrb	r3, [r7, #14]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d007      	beq.n	80060f8 <USBD_StdEPReq+0x180>
 80060e8:	7bbb      	ldrb	r3, [r7, #14]
 80060ea:	2b80      	cmp	r3, #128	@ 0x80
 80060ec:	d004      	beq.n	80060f8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80060ee:	6839      	ldr	r1, [r7, #0]
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fbb5 	bl	8006860 <USBD_CtlError>
                break;
 80060f6:	e091      	b.n	800621c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	da0b      	bge.n	8006118 <USBD_StdEPReq+0x1a0>
 8006100:	7bbb      	ldrb	r3, [r7, #14]
 8006102:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006106:	4613      	mov	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	3310      	adds	r3, #16
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	4413      	add	r3, r2
 8006114:	3304      	adds	r3, #4
 8006116:	e00b      	b.n	8006130 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006118:	7bbb      	ldrb	r3, [r7, #14]
 800611a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800611e:	4613      	mov	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	4413      	add	r3, r2
 800612e:	3304      	adds	r3, #4
 8006130:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2200      	movs	r2, #0
 8006136:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2202      	movs	r2, #2
 800613c:	4619      	mov	r1, r3
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fbf8 	bl	8006934 <USBD_CtlSendData>
              break;
 8006144:	e06a      	b.n	800621c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006146:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800614a:	2b00      	cmp	r3, #0
 800614c:	da11      	bge.n	8006172 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800614e:	7bbb      	ldrb	r3, [r7, #14]
 8006150:	f003 020f 	and.w	r2, r3, #15
 8006154:	6879      	ldr	r1, [r7, #4]
 8006156:	4613      	mov	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	440b      	add	r3, r1
 8006160:	3318      	adds	r3, #24
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d117      	bne.n	8006198 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006168:	6839      	ldr	r1, [r7, #0]
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fb78 	bl	8006860 <USBD_CtlError>
                  break;
 8006170:	e054      	b.n	800621c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006172:	7bbb      	ldrb	r3, [r7, #14]
 8006174:	f003 020f 	and.w	r2, r3, #15
 8006178:	6879      	ldr	r1, [r7, #4]
 800617a:	4613      	mov	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	440b      	add	r3, r1
 8006184:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d104      	bne.n	8006198 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800618e:	6839      	ldr	r1, [r7, #0]
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 fb65 	bl	8006860 <USBD_CtlError>
                  break;
 8006196:	e041      	b.n	800621c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006198:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800619c:	2b00      	cmp	r3, #0
 800619e:	da0b      	bge.n	80061b8 <USBD_StdEPReq+0x240>
 80061a0:	7bbb      	ldrb	r3, [r7, #14]
 80061a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80061a6:	4613      	mov	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	3310      	adds	r3, #16
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	4413      	add	r3, r2
 80061b4:	3304      	adds	r3, #4
 80061b6:	e00b      	b.n	80061d0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80061b8:	7bbb      	ldrb	r3, [r7, #14]
 80061ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061be:	4613      	mov	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	4413      	add	r3, r2
 80061ce:	3304      	adds	r3, #4
 80061d0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80061d2:	7bbb      	ldrb	r3, [r7, #14]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <USBD_StdEPReq+0x266>
 80061d8:	7bbb      	ldrb	r3, [r7, #14]
 80061da:	2b80      	cmp	r3, #128	@ 0x80
 80061dc:	d103      	bne.n	80061e6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	2200      	movs	r2, #0
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	e00e      	b.n	8006204 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80061e6:	7bbb      	ldrb	r3, [r7, #14]
 80061e8:	4619      	mov	r1, r3
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 ffdc 	bl	80071a8 <USBD_LL_IsStallEP>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	2201      	movs	r2, #1
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	e002      	b.n	8006204 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2200      	movs	r2, #0
 8006202:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2202      	movs	r2, #2
 8006208:	4619      	mov	r1, r3
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 fb92 	bl	8006934 <USBD_CtlSendData>
              break;
 8006210:	e004      	b.n	800621c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006212:	6839      	ldr	r1, [r7, #0]
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fb23 	bl	8006860 <USBD_CtlError>
              break;
 800621a:	bf00      	nop
          }
          break;
 800621c:	e004      	b.n	8006228 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800621e:	6839      	ldr	r1, [r7, #0]
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fb1d 	bl	8006860 <USBD_CtlError>
          break;
 8006226:	bf00      	nop
      }
      break;
 8006228:	e004      	b.n	8006234 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800622a:	6839      	ldr	r1, [r7, #0]
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 fb17 	bl	8006860 <USBD_CtlError>
      break;
 8006232:	bf00      	nop
  }

  return ret;
 8006234:	7bfb      	ldrb	r3, [r7, #15]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800624a:	2300      	movs	r3, #0
 800624c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800624e:	2300      	movs	r3, #0
 8006250:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006252:	2300      	movs	r3, #0
 8006254:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	885b      	ldrh	r3, [r3, #2]
 800625a:	0a1b      	lsrs	r3, r3, #8
 800625c:	b29b      	uxth	r3, r3
 800625e:	3b01      	subs	r3, #1
 8006260:	2b06      	cmp	r3, #6
 8006262:	f200 8128 	bhi.w	80064b6 <USBD_GetDescriptor+0x276>
 8006266:	a201      	add	r2, pc, #4	@ (adr r2, 800626c <USBD_GetDescriptor+0x2c>)
 8006268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626c:	08006289 	.word	0x08006289
 8006270:	080062a1 	.word	0x080062a1
 8006274:	080062e1 	.word	0x080062e1
 8006278:	080064b7 	.word	0x080064b7
 800627c:	080064b7 	.word	0x080064b7
 8006280:	08006457 	.word	0x08006457
 8006284:	08006483 	.word	0x08006483
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	7c12      	ldrb	r2, [r2, #16]
 8006294:	f107 0108 	add.w	r1, r7, #8
 8006298:	4610      	mov	r0, r2
 800629a:	4798      	blx	r3
 800629c:	60f8      	str	r0, [r7, #12]
      break;
 800629e:	e112      	b.n	80064c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	7c1b      	ldrb	r3, [r3, #16]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10d      	bne.n	80062c4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b0:	f107 0208 	add.w	r2, r7, #8
 80062b4:	4610      	mov	r0, r2
 80062b6:	4798      	blx	r3
 80062b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	3301      	adds	r3, #1
 80062be:	2202      	movs	r2, #2
 80062c0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80062c2:	e100      	b.n	80064c6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062cc:	f107 0208 	add.w	r2, r7, #8
 80062d0:	4610      	mov	r0, r2
 80062d2:	4798      	blx	r3
 80062d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	3301      	adds	r3, #1
 80062da:	2202      	movs	r2, #2
 80062dc:	701a      	strb	r2, [r3, #0]
      break;
 80062de:	e0f2      	b.n	80064c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	885b      	ldrh	r3, [r3, #2]
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b05      	cmp	r3, #5
 80062e8:	f200 80ac 	bhi.w	8006444 <USBD_GetDescriptor+0x204>
 80062ec:	a201      	add	r2, pc, #4	@ (adr r2, 80062f4 <USBD_GetDescriptor+0xb4>)
 80062ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f2:	bf00      	nop
 80062f4:	0800630d 	.word	0x0800630d
 80062f8:	08006341 	.word	0x08006341
 80062fc:	08006375 	.word	0x08006375
 8006300:	080063a9 	.word	0x080063a9
 8006304:	080063dd 	.word	0x080063dd
 8006308:	08006411 	.word	0x08006411
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00b      	beq.n	8006330 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	7c12      	ldrb	r2, [r2, #16]
 8006324:	f107 0108 	add.w	r1, r7, #8
 8006328:	4610      	mov	r0, r2
 800632a:	4798      	blx	r3
 800632c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800632e:	e091      	b.n	8006454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fa94 	bl	8006860 <USBD_CtlError>
            err++;
 8006338:	7afb      	ldrb	r3, [r7, #11]
 800633a:	3301      	adds	r3, #1
 800633c:	72fb      	strb	r3, [r7, #11]
          break;
 800633e:	e089      	b.n	8006454 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00b      	beq.n	8006364 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	7c12      	ldrb	r2, [r2, #16]
 8006358:	f107 0108 	add.w	r1, r7, #8
 800635c:	4610      	mov	r0, r2
 800635e:	4798      	blx	r3
 8006360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006362:	e077      	b.n	8006454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006364:	6839      	ldr	r1, [r7, #0]
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fa7a 	bl	8006860 <USBD_CtlError>
            err++;
 800636c:	7afb      	ldrb	r3, [r7, #11]
 800636e:	3301      	adds	r3, #1
 8006370:	72fb      	strb	r3, [r7, #11]
          break;
 8006372:	e06f      	b.n	8006454 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00b      	beq.n	8006398 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	7c12      	ldrb	r2, [r2, #16]
 800638c:	f107 0108 	add.w	r1, r7, #8
 8006390:	4610      	mov	r0, r2
 8006392:	4798      	blx	r3
 8006394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006396:	e05d      	b.n	8006454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006398:	6839      	ldr	r1, [r7, #0]
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 fa60 	bl	8006860 <USBD_CtlError>
            err++;
 80063a0:	7afb      	ldrb	r3, [r7, #11]
 80063a2:	3301      	adds	r3, #1
 80063a4:	72fb      	strb	r3, [r7, #11]
          break;
 80063a6:	e055      	b.n	8006454 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00b      	beq.n	80063cc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	7c12      	ldrb	r2, [r2, #16]
 80063c0:	f107 0108 	add.w	r1, r7, #8
 80063c4:	4610      	mov	r0, r2
 80063c6:	4798      	blx	r3
 80063c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063ca:	e043      	b.n	8006454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063cc:	6839      	ldr	r1, [r7, #0]
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fa46 	bl	8006860 <USBD_CtlError>
            err++;
 80063d4:	7afb      	ldrb	r3, [r7, #11]
 80063d6:	3301      	adds	r3, #1
 80063d8:	72fb      	strb	r3, [r7, #11]
          break;
 80063da:	e03b      	b.n	8006454 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00b      	beq.n	8006400 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	7c12      	ldrb	r2, [r2, #16]
 80063f4:	f107 0108 	add.w	r1, r7, #8
 80063f8:	4610      	mov	r0, r2
 80063fa:	4798      	blx	r3
 80063fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063fe:	e029      	b.n	8006454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006400:	6839      	ldr	r1, [r7, #0]
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fa2c 	bl	8006860 <USBD_CtlError>
            err++;
 8006408:	7afb      	ldrb	r3, [r7, #11]
 800640a:	3301      	adds	r3, #1
 800640c:	72fb      	strb	r3, [r7, #11]
          break;
 800640e:	e021      	b.n	8006454 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00b      	beq.n	8006434 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	7c12      	ldrb	r2, [r2, #16]
 8006428:	f107 0108 	add.w	r1, r7, #8
 800642c:	4610      	mov	r0, r2
 800642e:	4798      	blx	r3
 8006430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006432:	e00f      	b.n	8006454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006434:	6839      	ldr	r1, [r7, #0]
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fa12 	bl	8006860 <USBD_CtlError>
            err++;
 800643c:	7afb      	ldrb	r3, [r7, #11]
 800643e:	3301      	adds	r3, #1
 8006440:	72fb      	strb	r3, [r7, #11]
          break;
 8006442:	e007      	b.n	8006454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fa0a 	bl	8006860 <USBD_CtlError>
          err++;
 800644c:	7afb      	ldrb	r3, [r7, #11]
 800644e:	3301      	adds	r3, #1
 8006450:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006452:	e038      	b.n	80064c6 <USBD_GetDescriptor+0x286>
 8006454:	e037      	b.n	80064c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	7c1b      	ldrb	r3, [r3, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d109      	bne.n	8006472 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006466:	f107 0208 	add.w	r2, r7, #8
 800646a:	4610      	mov	r0, r2
 800646c:	4798      	blx	r3
 800646e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006470:	e029      	b.n	80064c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f9f3 	bl	8006860 <USBD_CtlError>
        err++;
 800647a:	7afb      	ldrb	r3, [r7, #11]
 800647c:	3301      	adds	r3, #1
 800647e:	72fb      	strb	r3, [r7, #11]
      break;
 8006480:	e021      	b.n	80064c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	7c1b      	ldrb	r3, [r3, #16]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10d      	bne.n	80064a6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006492:	f107 0208 	add.w	r2, r7, #8
 8006496:	4610      	mov	r0, r2
 8006498:	4798      	blx	r3
 800649a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	3301      	adds	r3, #1
 80064a0:	2207      	movs	r2, #7
 80064a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064a4:	e00f      	b.n	80064c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80064a6:	6839      	ldr	r1, [r7, #0]
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f9d9 	bl	8006860 <USBD_CtlError>
        err++;
 80064ae:	7afb      	ldrb	r3, [r7, #11]
 80064b0:	3301      	adds	r3, #1
 80064b2:	72fb      	strb	r3, [r7, #11]
      break;
 80064b4:	e007      	b.n	80064c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f9d1 	bl	8006860 <USBD_CtlError>
      err++;
 80064be:	7afb      	ldrb	r3, [r7, #11]
 80064c0:	3301      	adds	r3, #1
 80064c2:	72fb      	strb	r3, [r7, #11]
      break;
 80064c4:	bf00      	nop
  }

  if (err != 0U)
 80064c6:	7afb      	ldrb	r3, [r7, #11]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d11c      	bne.n	8006506 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80064cc:	893b      	ldrh	r3, [r7, #8]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d011      	beq.n	80064f6 <USBD_GetDescriptor+0x2b6>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	88db      	ldrh	r3, [r3, #6]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00d      	beq.n	80064f6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	88da      	ldrh	r2, [r3, #6]
 80064de:	893b      	ldrh	r3, [r7, #8]
 80064e0:	4293      	cmp	r3, r2
 80064e2:	bf28      	it	cs
 80064e4:	4613      	movcs	r3, r2
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80064ea:	893b      	ldrh	r3, [r7, #8]
 80064ec:	461a      	mov	r2, r3
 80064ee:	68f9      	ldr	r1, [r7, #12]
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fa1f 	bl	8006934 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	88db      	ldrh	r3, [r3, #6]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d104      	bne.n	8006508 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fa76 	bl	80069f0 <USBD_CtlSendStatus>
 8006504:	e000      	b.n	8006508 <USBD_GetDescriptor+0x2c8>
    return;
 8006506:	bf00      	nop
    }
  }
}
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop

08006510 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	889b      	ldrh	r3, [r3, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d130      	bne.n	8006584 <USBD_SetAddress+0x74>
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	88db      	ldrh	r3, [r3, #6]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d12c      	bne.n	8006584 <USBD_SetAddress+0x74>
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	885b      	ldrh	r3, [r3, #2]
 800652e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006530:	d828      	bhi.n	8006584 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	885b      	ldrh	r3, [r3, #2]
 8006536:	b2db      	uxtb	r3, r3
 8006538:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800653c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006544:	2b03      	cmp	r3, #3
 8006546:	d104      	bne.n	8006552 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006548:	6839      	ldr	r1, [r7, #0]
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f988 	bl	8006860 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006550:	e01d      	b.n	800658e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	7bfa      	ldrb	r2, [r7, #15]
 8006556:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800655a:	7bfb      	ldrb	r3, [r7, #15]
 800655c:	4619      	mov	r1, r3
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fe4d 	bl	80071fe <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fa43 	bl	80069f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800656a:	7bfb      	ldrb	r3, [r7, #15]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d004      	beq.n	800657a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006578:	e009      	b.n	800658e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006582:	e004      	b.n	800658e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006584:	6839      	ldr	r1, [r7, #0]
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f96a 	bl	8006860 <USBD_CtlError>
  }
}
 800658c:	bf00      	nop
 800658e:	bf00      	nop
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
	...

08006598 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	885b      	ldrh	r3, [r3, #2]
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	4b41      	ldr	r3, [pc, #260]	@ (80066b0 <USBD_SetConfig+0x118>)
 80065aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80065ac:	4b40      	ldr	r3, [pc, #256]	@ (80066b0 <USBD_SetConfig+0x118>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d904      	bls.n	80065be <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80065b4:	6839      	ldr	r1, [r7, #0]
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f952 	bl	8006860 <USBD_CtlError>
 80065bc:	e075      	b.n	80066aa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d002      	beq.n	80065ce <USBD_SetConfig+0x36>
 80065c8:	2b03      	cmp	r3, #3
 80065ca:	d023      	beq.n	8006614 <USBD_SetConfig+0x7c>
 80065cc:	e062      	b.n	8006694 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80065ce:	4b38      	ldr	r3, [pc, #224]	@ (80066b0 <USBD_SetConfig+0x118>)
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d01a      	beq.n	800660c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80065d6:	4b36      	ldr	r3, [pc, #216]	@ (80066b0 <USBD_SetConfig+0x118>)
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	461a      	mov	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2203      	movs	r2, #3
 80065e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80065e8:	4b31      	ldr	r3, [pc, #196]	@ (80066b0 <USBD_SetConfig+0x118>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	4619      	mov	r1, r3
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7ff f9e7 	bl	80059c2 <USBD_SetClassConfig>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d104      	bne.n	8006604 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80065fa:	6839      	ldr	r1, [r7, #0]
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f92f 	bl	8006860 <USBD_CtlError>
            return;
 8006602:	e052      	b.n	80066aa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 f9f3 	bl	80069f0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800660a:	e04e      	b.n	80066aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f9ef 	bl	80069f0 <USBD_CtlSendStatus>
        break;
 8006612:	e04a      	b.n	80066aa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006614:	4b26      	ldr	r3, [pc, #152]	@ (80066b0 <USBD_SetConfig+0x118>)
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d112      	bne.n	8006642 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8006624:	4b22      	ldr	r3, [pc, #136]	@ (80066b0 <USBD_SetConfig+0x118>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	461a      	mov	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800662e:	4b20      	ldr	r3, [pc, #128]	@ (80066b0 <USBD_SetConfig+0x118>)
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	4619      	mov	r1, r3
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f7ff f9e3 	bl	8005a00 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f9d8 	bl	80069f0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006640:	e033      	b.n	80066aa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006642:	4b1b      	ldr	r3, [pc, #108]	@ (80066b0 <USBD_SetConfig+0x118>)
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	429a      	cmp	r2, r3
 800664e:	d01d      	beq.n	800668c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	b2db      	uxtb	r3, r3
 8006656:	4619      	mov	r1, r3
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7ff f9d1 	bl	8005a00 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800665e:	4b14      	ldr	r3, [pc, #80]	@ (80066b0 <USBD_SetConfig+0x118>)
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006668:	4b11      	ldr	r3, [pc, #68]	@ (80066b0 <USBD_SetConfig+0x118>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	4619      	mov	r1, r3
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7ff f9a7 	bl	80059c2 <USBD_SetClassConfig>
 8006674:	4603      	mov	r3, r0
 8006676:	2b02      	cmp	r3, #2
 8006678:	d104      	bne.n	8006684 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800667a:	6839      	ldr	r1, [r7, #0]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f8ef 	bl	8006860 <USBD_CtlError>
            return;
 8006682:	e012      	b.n	80066aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f9b3 	bl	80069f0 <USBD_CtlSendStatus>
        break;
 800668a:	e00e      	b.n	80066aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f9af 	bl	80069f0 <USBD_CtlSendStatus>
        break;
 8006692:	e00a      	b.n	80066aa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006694:	6839      	ldr	r1, [r7, #0]
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f8e2 	bl	8006860 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800669c:	4b04      	ldr	r3, [pc, #16]	@ (80066b0 <USBD_SetConfig+0x118>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	4619      	mov	r1, r3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7ff f9ac 	bl	8005a00 <USBD_ClrClassConfig>
        break;
 80066a8:	bf00      	nop
    }
  }
}
 80066aa:	3708      	adds	r7, #8
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	200001ac 	.word	0x200001ac

080066b4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	88db      	ldrh	r3, [r3, #6]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d004      	beq.n	80066d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80066c6:	6839      	ldr	r1, [r7, #0]
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 f8c9 	bl	8006860 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80066ce:	e022      	b.n	8006716 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	dc02      	bgt.n	80066e0 <USBD_GetConfig+0x2c>
 80066da:	2b00      	cmp	r3, #0
 80066dc:	dc03      	bgt.n	80066e6 <USBD_GetConfig+0x32>
 80066de:	e015      	b.n	800670c <USBD_GetConfig+0x58>
 80066e0:	2b03      	cmp	r3, #3
 80066e2:	d00b      	beq.n	80066fc <USBD_GetConfig+0x48>
 80066e4:	e012      	b.n	800670c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	3308      	adds	r3, #8
 80066f0:	2201      	movs	r2, #1
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f91d 	bl	8006934 <USBD_CtlSendData>
        break;
 80066fa:	e00c      	b.n	8006716 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	3304      	adds	r3, #4
 8006700:	2201      	movs	r2, #1
 8006702:	4619      	mov	r1, r3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 f915 	bl	8006934 <USBD_CtlSendData>
        break;
 800670a:	e004      	b.n	8006716 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800670c:	6839      	ldr	r1, [r7, #0]
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f8a6 	bl	8006860 <USBD_CtlError>
        break;
 8006714:	bf00      	nop
}
 8006716:	bf00      	nop
 8006718:	3708      	adds	r7, #8
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b082      	sub	sp, #8
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
 8006726:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800672e:	3b01      	subs	r3, #1
 8006730:	2b02      	cmp	r3, #2
 8006732:	d81e      	bhi.n	8006772 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	88db      	ldrh	r3, [r3, #6]
 8006738:	2b02      	cmp	r3, #2
 800673a:	d004      	beq.n	8006746 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800673c:	6839      	ldr	r1, [r7, #0]
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f88e 	bl	8006860 <USBD_CtlError>
        break;
 8006744:	e01a      	b.n	800677c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006752:	2b00      	cmp	r3, #0
 8006754:	d005      	beq.n	8006762 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f043 0202 	orr.w	r2, r3, #2
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	330c      	adds	r3, #12
 8006766:	2202      	movs	r2, #2
 8006768:	4619      	mov	r1, r3
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f8e2 	bl	8006934 <USBD_CtlSendData>
      break;
 8006770:	e004      	b.n	800677c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006772:	6839      	ldr	r1, [r7, #0]
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 f873 	bl	8006860 <USBD_CtlError>
      break;
 800677a:	bf00      	nop
  }
}
 800677c:	bf00      	nop
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	885b      	ldrh	r3, [r3, #2]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d106      	bne.n	80067a4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f926 	bl	80069f0 <USBD_CtlSendStatus>
  }
}
 80067a4:	bf00      	nop
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067bc:	3b01      	subs	r3, #1
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d80b      	bhi.n	80067da <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	885b      	ldrh	r3, [r3, #2]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d10c      	bne.n	80067e4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f90c 	bl	80069f0 <USBD_CtlSendStatus>
      }
      break;
 80067d8:	e004      	b.n	80067e4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80067da:	6839      	ldr	r1, [r7, #0]
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 f83f 	bl	8006860 <USBD_CtlError>
      break;
 80067e2:	e000      	b.n	80067e6 <USBD_ClrFeature+0x3a>
      break;
 80067e4:	bf00      	nop
  }
}
 80067e6:	bf00      	nop
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	781a      	ldrb	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	785a      	ldrb	r2, [r3, #1]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	3302      	adds	r3, #2
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	461a      	mov	r2, r3
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	3303      	adds	r3, #3
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	021b      	lsls	r3, r3, #8
 8006818:	b29b      	uxth	r3, r3
 800681a:	4413      	add	r3, r2
 800681c:	b29a      	uxth	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	3304      	adds	r3, #4
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	461a      	mov	r2, r3
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	3305      	adds	r3, #5
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	021b      	lsls	r3, r3, #8
 8006832:	b29b      	uxth	r3, r3
 8006834:	4413      	add	r3, r2
 8006836:	b29a      	uxth	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	3306      	adds	r3, #6
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	461a      	mov	r2, r3
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	3307      	adds	r3, #7
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	021b      	lsls	r3, r3, #8
 800684c:	b29b      	uxth	r3, r3
 800684e:	4413      	add	r3, r2
 8006850:	b29a      	uxth	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	80da      	strh	r2, [r3, #6]

}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	bc80      	pop	{r7}
 800685e:	4770      	bx	lr

08006860 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800686a:	2180      	movs	r1, #128	@ 0x80
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fc5d 	bl	800712c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006872:	2100      	movs	r1, #0
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fc59 	bl	800712c <USBD_LL_StallEP>
}
 800687a:	bf00      	nop
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b086      	sub	sp, #24
 8006886:	af00      	add	r7, sp, #0
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800688e:	2300      	movs	r3, #0
 8006890:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d032      	beq.n	80068fe <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 f834 	bl	8006906 <USBD_GetLen>
 800689e:	4603      	mov	r3, r0
 80068a0:	3301      	adds	r3, #1
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	005b      	lsls	r3, r3, #1
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80068ac:	7dfb      	ldrb	r3, [r7, #23]
 80068ae:	1c5a      	adds	r2, r3, #1
 80068b0:	75fa      	strb	r2, [r7, #23]
 80068b2:	461a      	mov	r2, r3
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4413      	add	r3, r2
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	7812      	ldrb	r2, [r2, #0]
 80068bc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80068be:	7dfb      	ldrb	r3, [r7, #23]
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	75fa      	strb	r2, [r7, #23]
 80068c4:	461a      	mov	r2, r3
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	4413      	add	r3, r2
 80068ca:	2203      	movs	r2, #3
 80068cc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80068ce:	e012      	b.n	80068f6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	60fa      	str	r2, [r7, #12]
 80068d6:	7dfa      	ldrb	r2, [r7, #23]
 80068d8:	1c51      	adds	r1, r2, #1
 80068da:	75f9      	strb	r1, [r7, #23]
 80068dc:	4611      	mov	r1, r2
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	440a      	add	r2, r1
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80068e6:	7dfb      	ldrb	r3, [r7, #23]
 80068e8:	1c5a      	adds	r2, r3, #1
 80068ea:	75fa      	strb	r2, [r7, #23]
 80068ec:	461a      	mov	r2, r3
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	4413      	add	r3, r2
 80068f2:	2200      	movs	r2, #0
 80068f4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1e8      	bne.n	80068d0 <USBD_GetString+0x4e>
    }
  }
}
 80068fe:	bf00      	nop
 8006900:	3718      	adds	r7, #24
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006906:	b480      	push	{r7}
 8006908:	b085      	sub	sp, #20
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800690e:	2300      	movs	r3, #0
 8006910:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006912:	e005      	b.n	8006920 <USBD_GetLen+0x1a>
  {
    len++;
 8006914:	7bfb      	ldrb	r3, [r7, #15]
 8006916:	3301      	adds	r3, #1
 8006918:	73fb      	strb	r3, [r7, #15]
    buf++;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	3301      	adds	r3, #1
 800691e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1f5      	bne.n	8006914 <USBD_GetLen+0xe>
  }

  return len;
 8006928:	7bfb      	ldrb	r3, [r7, #15]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	bc80      	pop	{r7}
 8006932:	4770      	bx	lr

08006934 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	4613      	mov	r3, r2
 8006940:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2202      	movs	r2, #2
 8006946:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800694a:	88fa      	ldrh	r2, [r7, #6]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006950:	88fa      	ldrh	r2, [r7, #6]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006956:	88fb      	ldrh	r3, [r7, #6]
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	2100      	movs	r1, #0
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 fc6d 	bl	800723c <USBD_LL_Transmit>

  return USBD_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	4613      	mov	r3, r2
 8006978:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800697a:	88fb      	ldrh	r3, [r7, #6]
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	2100      	movs	r1, #0
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f000 fc5b 	bl	800723c <USBD_LL_Transmit>

  return USBD_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	4613      	mov	r3, r2
 800699c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2203      	movs	r2, #3
 80069a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80069a6:	88fa      	ldrh	r2, [r7, #6]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80069ae:	88fa      	ldrh	r2, [r7, #6]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80069b6:	88fb      	ldrh	r3, [r7, #6]
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	2100      	movs	r1, #0
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 fc60 	bl	8007282 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	4613      	mov	r3, r2
 80069d8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80069da:	88fb      	ldrh	r3, [r7, #6]
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	2100      	movs	r1, #0
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 fc4e 	bl	8007282 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2204      	movs	r2, #4
 80069fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006a00:	2300      	movs	r3, #0
 8006a02:	2200      	movs	r2, #0
 8006a04:	2100      	movs	r1, #0
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fc18 	bl	800723c <USBD_LL_Transmit>

  return USBD_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b082      	sub	sp, #8
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2205      	movs	r2, #5
 8006a22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a26:	2300      	movs	r3, #0
 8006a28:	2200      	movs	r2, #0
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fc28 	bl	8007282 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3708      	adds	r7, #8
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006a40:	2200      	movs	r2, #0
 8006a42:	4912      	ldr	r1, [pc, #72]	@ (8006a8c <MX_USB_DEVICE_Init+0x50>)
 8006a44:	4812      	ldr	r0, [pc, #72]	@ (8006a90 <MX_USB_DEVICE_Init+0x54>)
 8006a46:	f7fe ff62 	bl	800590e <USBD_Init>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006a50:	f7f9 fc1e 	bl	8000290 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006a54:	490f      	ldr	r1, [pc, #60]	@ (8006a94 <MX_USB_DEVICE_Init+0x58>)
 8006a56:	480e      	ldr	r0, [pc, #56]	@ (8006a90 <MX_USB_DEVICE_Init+0x54>)
 8006a58:	f7fe ff84 	bl	8005964 <USBD_RegisterClass>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d001      	beq.n	8006a66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006a62:	f7f9 fc15 	bl	8000290 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006a66:	490c      	ldr	r1, [pc, #48]	@ (8006a98 <MX_USB_DEVICE_Init+0x5c>)
 8006a68:	4809      	ldr	r0, [pc, #36]	@ (8006a90 <MX_USB_DEVICE_Init+0x54>)
 8006a6a:	f7fe feb5 	bl	80057d8 <USBD_CDC_RegisterInterface>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006a74:	f7f9 fc0c 	bl	8000290 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006a78:	4805      	ldr	r0, [pc, #20]	@ (8006a90 <MX_USB_DEVICE_Init+0x54>)
 8006a7a:	f7fe ff8c 	bl	8005996 <USBD_Start>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d001      	beq.n	8006a88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006a84:	f7f9 fc04 	bl	8000290 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006a88:	bf00      	nop
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	2000013c 	.word	0x2000013c
 8006a90:	200001b0 	.word	0x200001b0
 8006a94:	20000028 	.word	0x20000028
 8006a98:	2000012c 	.word	0x2000012c

08006a9c <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	4905      	ldr	r1, [pc, #20]	@ (8006ab8 <CDC_Init_FS+0x1c>)
 8006aa4:	4805      	ldr	r0, [pc, #20]	@ (8006abc <CDC_Init_FS+0x20>)
 8006aa6:	f7fe fead 	bl	8005804 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006aaa:	4905      	ldr	r1, [pc, #20]	@ (8006ac0 <CDC_Init_FS+0x24>)
 8006aac:	4803      	ldr	r0, [pc, #12]	@ (8006abc <CDC_Init_FS+0x20>)
 8006aae:	f7fe fec2 	bl	8005836 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8006ab2:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	20000874 	.word	0x20000874
 8006abc:	200001b0 	.word	0x200001b0
 8006ac0:	20000474 	.word	0x20000474

08006ac4 <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 8006ac4:	b480      	push	{r7}
 8006ac6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 8006ac8:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bc80      	pop	{r7}
 8006ad0:	4770      	bx	lr
	...

08006ad4 <CDC_Control_FS>:
 * @param  cmd: Command code
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	4603      	mov	r3, r0
 8006adc:	6039      	str	r1, [r7, #0]
 8006ade:	71fb      	strb	r3, [r7, #7]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch (cmd) {
 8006ae4:	79fb      	ldrb	r3, [r7, #7]
 8006ae6:	2b23      	cmp	r3, #35	@ 0x23
 8006ae8:	d84a      	bhi.n	8006b80 <CDC_Control_FS+0xac>
 8006aea:	a201      	add	r2, pc, #4	@ (adr r2, 8006af0 <CDC_Control_FS+0x1c>)
 8006aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af0:	08006b81 	.word	0x08006b81
 8006af4:	08006b81 	.word	0x08006b81
 8006af8:	08006b81 	.word	0x08006b81
 8006afc:	08006b81 	.word	0x08006b81
 8006b00:	08006b81 	.word	0x08006b81
 8006b04:	08006b81 	.word	0x08006b81
 8006b08:	08006b81 	.word	0x08006b81
 8006b0c:	08006b81 	.word	0x08006b81
 8006b10:	08006b81 	.word	0x08006b81
 8006b14:	08006b81 	.word	0x08006b81
 8006b18:	08006b81 	.word	0x08006b81
 8006b1c:	08006b81 	.word	0x08006b81
 8006b20:	08006b81 	.word	0x08006b81
 8006b24:	08006b81 	.word	0x08006b81
 8006b28:	08006b81 	.word	0x08006b81
 8006b2c:	08006b81 	.word	0x08006b81
 8006b30:	08006b81 	.word	0x08006b81
 8006b34:	08006b81 	.word	0x08006b81
 8006b38:	08006b81 	.word	0x08006b81
 8006b3c:	08006b81 	.word	0x08006b81
 8006b40:	08006b81 	.word	0x08006b81
 8006b44:	08006b81 	.word	0x08006b81
 8006b48:	08006b81 	.word	0x08006b81
 8006b4c:	08006b81 	.word	0x08006b81
 8006b50:	08006b81 	.word	0x08006b81
 8006b54:	08006b81 	.word	0x08006b81
 8006b58:	08006b81 	.word	0x08006b81
 8006b5c:	08006b81 	.word	0x08006b81
 8006b60:	08006b81 	.word	0x08006b81
 8006b64:	08006b81 	.word	0x08006b81
 8006b68:	08006b81 	.word	0x08006b81
 8006b6c:	08006b81 	.word	0x08006b81
 8006b70:	08006b81 	.word	0x08006b81
 8006b74:	08006b81 	.word	0x08006b81
 8006b78:	08006b81 	.word	0x08006b81
 8006b7c:	08006b81 	.word	0x08006b81
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8006b80:	bf00      	nop
	}

	return (USBD_OK);
 8006b82:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bc80      	pop	{r7}
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop

08006b90 <CDC_Receive_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	SbW_Request_Received_CB(&S, Buf, (uint16_t) (*Len));
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	6879      	ldr	r1, [r7, #4]
 8006ba4:	4807      	ldr	r0, [pc, #28]	@ (8006bc4 <CDC_Receive_FS+0x34>)
 8006ba6:	f7fe fb26 	bl	80051f6 <SbW_Request_Received_CB>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006baa:	6879      	ldr	r1, [r7, #4]
 8006bac:	4806      	ldr	r0, [pc, #24]	@ (8006bc8 <CDC_Receive_FS+0x38>)
 8006bae:	f7fe fe42 	bl	8005836 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006bb2:	4805      	ldr	r0, [pc, #20]	@ (8006bc8 <CDC_Receive_FS+0x38>)
 8006bb4:	f7fe fe81 	bl	80058ba <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8006bb8:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	20000000 	.word	0x20000000
 8006bc8:	200001b0 	.word	0x200001b0

08006bcc <CDC_Transmit_FS>:
 *
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len) {
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc =
 8006bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8006c14 <CDC_Transmit_FS+0x48>)
 8006bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006be2:	60bb      	str	r3, [r7, #8]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
	if (hcdc->TxState != 0) {
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d001      	beq.n	8006bf2 <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e00b      	b.n	8006c0a <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006bf2:	887b      	ldrh	r3, [r7, #2]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	6879      	ldr	r1, [r7, #4]
 8006bf8:	4806      	ldr	r0, [pc, #24]	@ (8006c14 <CDC_Transmit_FS+0x48>)
 8006bfa:	f7fe fe03 	bl	8005804 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006bfe:	4805      	ldr	r0, [pc, #20]	@ (8006c14 <CDC_Transmit_FS+0x48>)
 8006c00:	f7fe fe2c 	bl	800585c <USBD_CDC_TransmitPacket>
 8006c04:	4603      	mov	r3, r0
 8006c06:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	200001b0 	.word	0x200001b0

08006c18 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	4603      	mov	r3, r0
 8006c20:	6039      	str	r1, [r7, #0]
 8006c22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	2212      	movs	r2, #18
 8006c28:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006c2a:	4b03      	ldr	r3, [pc, #12]	@ (8006c38 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bc80      	pop	{r7}
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	20000158 	.word	0x20000158

08006c3c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	4603      	mov	r3, r0
 8006c44:	6039      	str	r1, [r7, #0]
 8006c46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	2204      	movs	r2, #4
 8006c4c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006c4e:	4b03      	ldr	r3, [pc, #12]	@ (8006c5c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bc80      	pop	{r7}
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	2000016c 	.word	0x2000016c

08006c60 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	4603      	mov	r3, r0
 8006c68:	6039      	str	r1, [r7, #0]
 8006c6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c6c:	79fb      	ldrb	r3, [r7, #7]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d105      	bne.n	8006c7e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	4907      	ldr	r1, [pc, #28]	@ (8006c94 <USBD_FS_ProductStrDescriptor+0x34>)
 8006c76:	4808      	ldr	r0, [pc, #32]	@ (8006c98 <USBD_FS_ProductStrDescriptor+0x38>)
 8006c78:	f7ff fe03 	bl	8006882 <USBD_GetString>
 8006c7c:	e004      	b.n	8006c88 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	4904      	ldr	r1, [pc, #16]	@ (8006c94 <USBD_FS_ProductStrDescriptor+0x34>)
 8006c82:	4805      	ldr	r0, [pc, #20]	@ (8006c98 <USBD_FS_ProductStrDescriptor+0x38>)
 8006c84:	f7ff fdfd 	bl	8006882 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c88:	4b02      	ldr	r3, [pc, #8]	@ (8006c94 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	20000c74 	.word	0x20000c74
 8006c98:	080073f8 	.word	0x080073f8

08006c9c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	6039      	str	r1, [r7, #0]
 8006ca6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	4904      	ldr	r1, [pc, #16]	@ (8006cbc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006cac:	4804      	ldr	r0, [pc, #16]	@ (8006cc0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006cae:	f7ff fde8 	bl	8006882 <USBD_GetString>
  return USBD_StrDesc;
 8006cb2:	4b02      	ldr	r3, [pc, #8]	@ (8006cbc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3708      	adds	r7, #8
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	20000c74 	.word	0x20000c74
 8006cc0:	08007410 	.word	0x08007410

08006cc4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	4603      	mov	r3, r0
 8006ccc:	6039      	str	r1, [r7, #0]
 8006cce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	221a      	movs	r2, #26
 8006cd4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006cd6:	f000 f843 	bl	8006d60 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006cda:	4b02      	ldr	r3, [pc, #8]	@ (8006ce4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	20000170 	.word	0x20000170

08006ce8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	4603      	mov	r3, r0
 8006cf0:	6039      	str	r1, [r7, #0]
 8006cf2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006cf4:	79fb      	ldrb	r3, [r7, #7]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d105      	bne.n	8006d06 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	4907      	ldr	r1, [pc, #28]	@ (8006d1c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006cfe:	4808      	ldr	r0, [pc, #32]	@ (8006d20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006d00:	f7ff fdbf 	bl	8006882 <USBD_GetString>
 8006d04:	e004      	b.n	8006d10 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	4904      	ldr	r1, [pc, #16]	@ (8006d1c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006d0a:	4805      	ldr	r0, [pc, #20]	@ (8006d20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006d0c:	f7ff fdb9 	bl	8006882 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d10:	4b02      	ldr	r3, [pc, #8]	@ (8006d1c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	20000c74 	.word	0x20000c74
 8006d20:	08007424 	.word	0x08007424

08006d24 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	6039      	str	r1, [r7, #0]
 8006d2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d30:	79fb      	ldrb	r3, [r7, #7]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d105      	bne.n	8006d42 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	4907      	ldr	r1, [pc, #28]	@ (8006d58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006d3a:	4808      	ldr	r0, [pc, #32]	@ (8006d5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006d3c:	f7ff fda1 	bl	8006882 <USBD_GetString>
 8006d40:	e004      	b.n	8006d4c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	4904      	ldr	r1, [pc, #16]	@ (8006d58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006d46:	4805      	ldr	r0, [pc, #20]	@ (8006d5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006d48:	f7ff fd9b 	bl	8006882 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d4c:	4b02      	ldr	r3, [pc, #8]	@ (8006d58 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	20000c74 	.word	0x20000c74
 8006d5c:	08007430 	.word	0x08007430

08006d60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006d66:	4b0f      	ldr	r3, [pc, #60]	@ (8006da4 <Get_SerialNum+0x44>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8006da8 <Get_SerialNum+0x48>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006d72:	4b0e      	ldr	r3, [pc, #56]	@ (8006dac <Get_SerialNum+0x4c>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d009      	beq.n	8006d9a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006d86:	2208      	movs	r2, #8
 8006d88:	4909      	ldr	r1, [pc, #36]	@ (8006db0 <Get_SerialNum+0x50>)
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f000 f814 	bl	8006db8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006d90:	2204      	movs	r2, #4
 8006d92:	4908      	ldr	r1, [pc, #32]	@ (8006db4 <Get_SerialNum+0x54>)
 8006d94:	68b8      	ldr	r0, [r7, #8]
 8006d96:	f000 f80f 	bl	8006db8 <IntToUnicode>
  }
}
 8006d9a:	bf00      	nop
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	1ffff7e8 	.word	0x1ffff7e8
 8006da8:	1ffff7ec 	.word	0x1ffff7ec
 8006dac:	1ffff7f0 	.word	0x1ffff7f0
 8006db0:	20000172 	.word	0x20000172
 8006db4:	20000182 	.word	0x20000182

08006db8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006dca:	2300      	movs	r3, #0
 8006dcc:	75fb      	strb	r3, [r7, #23]
 8006dce:	e027      	b.n	8006e20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	0f1b      	lsrs	r3, r3, #28
 8006dd4:	2b09      	cmp	r3, #9
 8006dd6:	d80b      	bhi.n	8006df0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	0f1b      	lsrs	r3, r3, #28
 8006ddc:	b2da      	uxtb	r2, r3
 8006dde:	7dfb      	ldrb	r3, [r7, #23]
 8006de0:	005b      	lsls	r3, r3, #1
 8006de2:	4619      	mov	r1, r3
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	440b      	add	r3, r1
 8006de8:	3230      	adds	r2, #48	@ 0x30
 8006dea:	b2d2      	uxtb	r2, r2
 8006dec:	701a      	strb	r2, [r3, #0]
 8006dee:	e00a      	b.n	8006e06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	0f1b      	lsrs	r3, r3, #28
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	7dfb      	ldrb	r3, [r7, #23]
 8006df8:	005b      	lsls	r3, r3, #1
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	440b      	add	r3, r1
 8006e00:	3237      	adds	r2, #55	@ 0x37
 8006e02:	b2d2      	uxtb	r2, r2
 8006e04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	011b      	lsls	r3, r3, #4
 8006e0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006e0c:	7dfb      	ldrb	r3, [r7, #23]
 8006e0e:	005b      	lsls	r3, r3, #1
 8006e10:	3301      	adds	r3, #1
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	4413      	add	r3, r2
 8006e16:	2200      	movs	r2, #0
 8006e18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006e1a:	7dfb      	ldrb	r3, [r7, #23]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	75fb      	strb	r3, [r7, #23]
 8006e20:	7dfa      	ldrb	r2, [r7, #23]
 8006e22:	79fb      	ldrb	r3, [r7, #7]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d3d3      	bcc.n	8006dd0 <IntToUnicode+0x18>
  }
}
 8006e28:	bf00      	nop
 8006e2a:	bf00      	nop
 8006e2c:	371c      	adds	r7, #28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bc80      	pop	{r7}
 8006e32:	4770      	bx	lr

08006e34 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a0d      	ldr	r2, [pc, #52]	@ (8006e78 <HAL_PCD_MspInit+0x44>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d113      	bne.n	8006e6e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006e46:	4b0d      	ldr	r3, [pc, #52]	@ (8006e7c <HAL_PCD_MspInit+0x48>)
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	4a0c      	ldr	r2, [pc, #48]	@ (8006e7c <HAL_PCD_MspInit+0x48>)
 8006e4c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006e50:	61d3      	str	r3, [r2, #28]
 8006e52:	4b0a      	ldr	r3, [pc, #40]	@ (8006e7c <HAL_PCD_MspInit+0x48>)
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e5a:	60fb      	str	r3, [r7, #12]
 8006e5c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006e5e:	2200      	movs	r2, #0
 8006e60:	2100      	movs	r1, #0
 8006e62:	2014      	movs	r0, #20
 8006e64:	f7f9 fbe7 	bl	8000636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006e68:	2014      	movs	r0, #20
 8006e6a:	f7f9 fc00 	bl	800066e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006e6e:	bf00      	nop
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	40005c00 	.word	0x40005c00
 8006e7c:	40021000 	.word	0x40021000

08006e80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8006e94:	4619      	mov	r1, r3
 8006e96:	4610      	mov	r0, r2
 8006e98:	f7fe fdc5 	bl	8005a26 <USBD_LL_SetupStage>
}
 8006e9c:	bf00      	nop
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	460b      	mov	r3, r1
 8006eae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8006eb6:	78fa      	ldrb	r2, [r7, #3]
 8006eb8:	6879      	ldr	r1, [r7, #4]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	4413      	add	r3, r2
 8006ec0:	00db      	lsls	r3, r3, #3
 8006ec2:	440b      	add	r3, r1
 8006ec4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	78fb      	ldrb	r3, [r7, #3]
 8006ecc:	4619      	mov	r1, r3
 8006ece:	f7fe fdf7 	bl	8005ac0 <USBD_LL_DataOutStage>
}
 8006ed2:	bf00      	nop
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b082      	sub	sp, #8
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8006eec:	78fa      	ldrb	r2, [r7, #3]
 8006eee:	6879      	ldr	r1, [r7, #4]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	00db      	lsls	r3, r3, #3
 8006ef8:	440b      	add	r3, r1
 8006efa:	3324      	adds	r3, #36	@ 0x24
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	78fb      	ldrb	r3, [r7, #3]
 8006f00:	4619      	mov	r1, r3
 8006f02:	f7fe fe4e 	bl	8005ba2 <USBD_LL_DataInStage>
}
 8006f06:	bf00      	nop
 8006f08:	3708      	adds	r7, #8
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b082      	sub	sp, #8
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7fe ff5e 	bl	8005dde <USBD_LL_SOF>
}
 8006f22:	bf00      	nop
 8006f24:	3708      	adds	r7, #8
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b084      	sub	sp, #16
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006f32:	2301      	movs	r3, #1
 8006f34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	799b      	ldrb	r3, [r3, #6]
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d001      	beq.n	8006f42 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006f3e:	f7f9 f9a7 	bl	8000290 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f48:	7bfa      	ldrb	r2, [r7, #15]
 8006f4a:	4611      	mov	r1, r2
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7fe ff0e 	bl	8005d6e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7fe fec7 	bl	8005cec <USBD_LL_Reset>
}
 8006f5e:	bf00      	nop
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
	...

08006f68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fe ff08 	bl	8005d8c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	7a9b      	ldrb	r3, [r3, #10]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d005      	beq.n	8006f90 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006f84:	4b04      	ldr	r3, [pc, #16]	@ (8006f98 <HAL_PCD_SuspendCallback+0x30>)
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	4a03      	ldr	r2, [pc, #12]	@ (8006f98 <HAL_PCD_SuspendCallback+0x30>)
 8006f8a:	f043 0306 	orr.w	r3, r3, #6
 8006f8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006f90:	bf00      	nop
 8006f92:	3708      	adds	r7, #8
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	e000ed00 	.word	0xe000ed00

08006f9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fe ff02 	bl	8005db4 <USBD_LL_Resume>
}
 8006fb0:	bf00      	nop
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006fc0:	4a28      	ldr	r2, [pc, #160]	@ (8007064 <USBD_LL_Init+0xac>)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a26      	ldr	r2, [pc, #152]	@ (8007064 <USBD_LL_Init+0xac>)
 8006fcc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006fd0:	4b24      	ldr	r3, [pc, #144]	@ (8007064 <USBD_LL_Init+0xac>)
 8006fd2:	4a25      	ldr	r2, [pc, #148]	@ (8007068 <USBD_LL_Init+0xb0>)
 8006fd4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006fd6:	4b23      	ldr	r3, [pc, #140]	@ (8007064 <USBD_LL_Init+0xac>)
 8006fd8:	2208      	movs	r2, #8
 8006fda:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006fdc:	4b21      	ldr	r3, [pc, #132]	@ (8007064 <USBD_LL_Init+0xac>)
 8006fde:	2202      	movs	r2, #2
 8006fe0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006fe2:	4b20      	ldr	r3, [pc, #128]	@ (8007064 <USBD_LL_Init+0xac>)
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8007064 <USBD_LL_Init+0xac>)
 8006fea:	2200      	movs	r2, #0
 8006fec:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006fee:	4b1d      	ldr	r3, [pc, #116]	@ (8007064 <USBD_LL_Init+0xac>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006ff4:	481b      	ldr	r0, [pc, #108]	@ (8007064 <USBD_LL_Init+0xac>)
 8006ff6:	f7f9 fb54 	bl	80006a2 <HAL_PCD_Init>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d001      	beq.n	8007004 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007000:	f7f9 f946 	bl	8000290 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800700a:	2318      	movs	r3, #24
 800700c:	2200      	movs	r2, #0
 800700e:	2100      	movs	r1, #0
 8007010:	f7fb f865 	bl	80020de <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800701a:	2358      	movs	r3, #88	@ 0x58
 800701c:	2200      	movs	r2, #0
 800701e:	2180      	movs	r1, #128	@ 0x80
 8007020:	f7fb f85d 	bl	80020de <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800702a:	23c0      	movs	r3, #192	@ 0xc0
 800702c:	2200      	movs	r2, #0
 800702e:	2181      	movs	r1, #129	@ 0x81
 8007030:	f7fb f855 	bl	80020de <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800703a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800703e:	2200      	movs	r2, #0
 8007040:	2101      	movs	r1, #1
 8007042:	f7fb f84c 	bl	80020de <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800704c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007050:	2200      	movs	r2, #0
 8007052:	2182      	movs	r1, #130	@ 0x82
 8007054:	f7fb f843 	bl	80020de <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	20000e74 	.word	0x20000e74
 8007068:	40005c00 	.word	0x40005c00

0800706c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007074:	2300      	movs	r3, #0
 8007076:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007078:	2300      	movs	r3, #0
 800707a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007082:	4618      	mov	r0, r3
 8007084:	f7f9 fc03 	bl	800088e <HAL_PCD_Start>
 8007088:	4603      	mov	r3, r0
 800708a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800708c:	7bfb      	ldrb	r3, [r7, #15]
 800708e:	4618      	mov	r0, r3
 8007090:	f000 f94e 	bl	8007330 <USBD_Get_USB_Status>
 8007094:	4603      	mov	r3, r0
 8007096:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007098:	7bbb      	ldrb	r3, [r7, #14]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b084      	sub	sp, #16
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	4608      	mov	r0, r1
 80070ac:	4611      	mov	r1, r2
 80070ae:	461a      	mov	r2, r3
 80070b0:	4603      	mov	r3, r0
 80070b2:	70fb      	strb	r3, [r7, #3]
 80070b4:	460b      	mov	r3, r1
 80070b6:	70bb      	strb	r3, [r7, #2]
 80070b8:	4613      	mov	r3, r2
 80070ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070bc:	2300      	movs	r3, #0
 80070be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80070ca:	78bb      	ldrb	r3, [r7, #2]
 80070cc:	883a      	ldrh	r2, [r7, #0]
 80070ce:	78f9      	ldrb	r1, [r7, #3]
 80070d0:	f7f9 fd57 	bl	8000b82 <HAL_PCD_EP_Open>
 80070d4:	4603      	mov	r3, r0
 80070d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 f928 	bl	8007330 <USBD_Get_USB_Status>
 80070e0:	4603      	mov	r3, r0
 80070e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b084      	sub	sp, #16
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	460b      	mov	r3, r1
 80070f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070fa:	2300      	movs	r3, #0
 80070fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070fe:	2300      	movs	r3, #0
 8007100:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007108:	78fa      	ldrb	r2, [r7, #3]
 800710a:	4611      	mov	r1, r2
 800710c:	4618      	mov	r0, r3
 800710e:	f7f9 fd95 	bl	8000c3c <HAL_PCD_EP_Close>
 8007112:	4603      	mov	r3, r0
 8007114:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007116:	7bfb      	ldrb	r3, [r7, #15]
 8007118:	4618      	mov	r0, r3
 800711a:	f000 f909 	bl	8007330 <USBD_Get_USB_Status>
 800711e:	4603      	mov	r3, r0
 8007120:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007122:	7bbb      	ldrb	r3, [r7, #14]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	460b      	mov	r3, r1
 8007136:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800713c:	2300      	movs	r3, #0
 800713e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007146:	78fa      	ldrb	r2, [r7, #3]
 8007148:	4611      	mov	r1, r2
 800714a:	4618      	mov	r0, r3
 800714c:	f7f9 fe3d 	bl	8000dca <HAL_PCD_EP_SetStall>
 8007150:	4603      	mov	r3, r0
 8007152:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007154:	7bfb      	ldrb	r3, [r7, #15]
 8007156:	4618      	mov	r0, r3
 8007158:	f000 f8ea 	bl	8007330 <USBD_Get_USB_Status>
 800715c:	4603      	mov	r3, r0
 800715e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007160:	7bbb      	ldrb	r3, [r7, #14]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b084      	sub	sp, #16
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
 8007172:	460b      	mov	r3, r1
 8007174:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007176:	2300      	movs	r3, #0
 8007178:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800717a:	2300      	movs	r3, #0
 800717c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007184:	78fa      	ldrb	r2, [r7, #3]
 8007186:	4611      	mov	r1, r2
 8007188:	4618      	mov	r0, r3
 800718a:	f7f9 fe7e 	bl	8000e8a <HAL_PCD_EP_ClrStall>
 800718e:	4603      	mov	r3, r0
 8007190:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007192:	7bfb      	ldrb	r3, [r7, #15]
 8007194:	4618      	mov	r0, r3
 8007196:	f000 f8cb 	bl	8007330 <USBD_Get_USB_Status>
 800719a:	4603      	mov	r3, r0
 800719c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800719e:	7bbb      	ldrb	r3, [r7, #14]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	460b      	mov	r3, r1
 80071b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80071ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80071bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	da0b      	bge.n	80071dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80071c4:	78fb      	ldrb	r3, [r7, #3]
 80071c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80071ca:	68f9      	ldr	r1, [r7, #12]
 80071cc:	4613      	mov	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4413      	add	r3, r2
 80071d2:	00db      	lsls	r3, r3, #3
 80071d4:	440b      	add	r3, r1
 80071d6:	3312      	adds	r3, #18
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	e00b      	b.n	80071f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80071dc:	78fb      	ldrb	r3, [r7, #3]
 80071de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80071e2:	68f9      	ldr	r1, [r7, #12]
 80071e4:	4613      	mov	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	00db      	lsls	r3, r3, #3
 80071ec:	440b      	add	r3, r1
 80071ee:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80071f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bc80      	pop	{r7}
 80071fc:	4770      	bx	lr

080071fe <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b084      	sub	sp, #16
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	460b      	mov	r3, r1
 8007208:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800720a:	2300      	movs	r3, #0
 800720c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007218:	78fa      	ldrb	r2, [r7, #3]
 800721a:	4611      	mov	r1, r2
 800721c:	4618      	mov	r0, r3
 800721e:	f7f9 fc8c 	bl	8000b3a <HAL_PCD_SetAddress>
 8007222:	4603      	mov	r3, r0
 8007224:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007226:	7bfb      	ldrb	r3, [r7, #15]
 8007228:	4618      	mov	r0, r3
 800722a:	f000 f881 	bl	8007330 <USBD_Get_USB_Status>
 800722e:	4603      	mov	r3, r0
 8007230:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007232:	7bbb      	ldrb	r3, [r7, #14]
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b086      	sub	sp, #24
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	607a      	str	r2, [r7, #4]
 8007246:	461a      	mov	r2, r3
 8007248:	460b      	mov	r3, r1
 800724a:	72fb      	strb	r3, [r7, #11]
 800724c:	4613      	mov	r3, r2
 800724e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007250:	2300      	movs	r3, #0
 8007252:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007254:	2300      	movs	r3, #0
 8007256:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800725e:	893b      	ldrh	r3, [r7, #8]
 8007260:	7af9      	ldrb	r1, [r7, #11]
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	f7f9 fd7a 	bl	8000d5c <HAL_PCD_EP_Transmit>
 8007268:	4603      	mov	r3, r0
 800726a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800726c:	7dfb      	ldrb	r3, [r7, #23]
 800726e:	4618      	mov	r0, r3
 8007270:	f000 f85e 	bl	8007330 <USBD_Get_USB_Status>
 8007274:	4603      	mov	r3, r0
 8007276:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007278:	7dbb      	ldrb	r3, [r7, #22]
}
 800727a:	4618      	mov	r0, r3
 800727c:	3718      	adds	r7, #24
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b086      	sub	sp, #24
 8007286:	af00      	add	r7, sp, #0
 8007288:	60f8      	str	r0, [r7, #12]
 800728a:	607a      	str	r2, [r7, #4]
 800728c:	461a      	mov	r2, r3
 800728e:	460b      	mov	r3, r1
 8007290:	72fb      	strb	r3, [r7, #11]
 8007292:	4613      	mov	r3, r2
 8007294:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007296:	2300      	movs	r3, #0
 8007298:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80072a4:	893b      	ldrh	r3, [r7, #8]
 80072a6:	7af9      	ldrb	r1, [r7, #11]
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	f7f9 fd0f 	bl	8000ccc <HAL_PCD_EP_Receive>
 80072ae:	4603      	mov	r3, r0
 80072b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072b2:	7dfb      	ldrb	r3, [r7, #23]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 f83b 	bl	8007330 <USBD_Get_USB_Status>
 80072ba:	4603      	mov	r3, r0
 80072bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80072be:	7dbb      	ldrb	r3, [r7, #22]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3718      	adds	r7, #24
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	460b      	mov	r3, r1
 80072d2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80072da:	78fa      	ldrb	r2, [r7, #3]
 80072dc:	4611      	mov	r1, r2
 80072de:	4618      	mov	r0, r3
 80072e0:	f7f9 fd25 	bl	8000d2e <HAL_PCD_EP_GetRxCount>
 80072e4:	4603      	mov	r3, r0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
	...

080072f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80072f8:	4b02      	ldr	r3, [pc, #8]	@ (8007304 <USBD_static_malloc+0x14>)
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	bc80      	pop	{r7}
 8007302:	4770      	bx	lr
 8007304:	2000114c 	.word	0x2000114c

08007308 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]

}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	bc80      	pop	{r7}
 8007318:	4770      	bx	lr

0800731a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800731a:	b480      	push	{r7}
 800731c:	b083      	sub	sp, #12
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
 8007322:	460b      	mov	r3, r1
 8007324:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007326:	bf00      	nop
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	bc80      	pop	{r7}
 800732e:	4770      	bx	lr

08007330 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	4603      	mov	r3, r0
 8007338:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800733e:	79fb      	ldrb	r3, [r7, #7]
 8007340:	2b03      	cmp	r3, #3
 8007342:	d817      	bhi.n	8007374 <USBD_Get_USB_Status+0x44>
 8007344:	a201      	add	r2, pc, #4	@ (adr r2, 800734c <USBD_Get_USB_Status+0x1c>)
 8007346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734a:	bf00      	nop
 800734c:	0800735d 	.word	0x0800735d
 8007350:	08007363 	.word	0x08007363
 8007354:	08007369 	.word	0x08007369
 8007358:	0800736f 	.word	0x0800736f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800735c:	2300      	movs	r3, #0
 800735e:	73fb      	strb	r3, [r7, #15]
    break;
 8007360:	e00b      	b.n	800737a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007362:	2302      	movs	r3, #2
 8007364:	73fb      	strb	r3, [r7, #15]
    break;
 8007366:	e008      	b.n	800737a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007368:	2301      	movs	r3, #1
 800736a:	73fb      	strb	r3, [r7, #15]
    break;
 800736c:	e005      	b.n	800737a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800736e:	2302      	movs	r3, #2
 8007370:	73fb      	strb	r3, [r7, #15]
    break;
 8007372:	e002      	b.n	800737a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007374:	2302      	movs	r3, #2
 8007376:	73fb      	strb	r3, [r7, #15]
    break;
 8007378:	bf00      	nop
  }
  return usb_status;
 800737a:	7bfb      	ldrb	r3, [r7, #15]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	bc80      	pop	{r7}
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop

08007388 <memset>:
 8007388:	4603      	mov	r3, r0
 800738a:	4402      	add	r2, r0
 800738c:	4293      	cmp	r3, r2
 800738e:	d100      	bne.n	8007392 <memset+0xa>
 8007390:	4770      	bx	lr
 8007392:	f803 1b01 	strb.w	r1, [r3], #1
 8007396:	e7f9      	b.n	800738c <memset+0x4>

08007398 <__libc_init_array>:
 8007398:	b570      	push	{r4, r5, r6, lr}
 800739a:	2600      	movs	r6, #0
 800739c:	4d0c      	ldr	r5, [pc, #48]	@ (80073d0 <__libc_init_array+0x38>)
 800739e:	4c0d      	ldr	r4, [pc, #52]	@ (80073d4 <__libc_init_array+0x3c>)
 80073a0:	1b64      	subs	r4, r4, r5
 80073a2:	10a4      	asrs	r4, r4, #2
 80073a4:	42a6      	cmp	r6, r4
 80073a6:	d109      	bne.n	80073bc <__libc_init_array+0x24>
 80073a8:	f000 f81a 	bl	80073e0 <_init>
 80073ac:	2600      	movs	r6, #0
 80073ae:	4d0a      	ldr	r5, [pc, #40]	@ (80073d8 <__libc_init_array+0x40>)
 80073b0:	4c0a      	ldr	r4, [pc, #40]	@ (80073dc <__libc_init_array+0x44>)
 80073b2:	1b64      	subs	r4, r4, r5
 80073b4:	10a4      	asrs	r4, r4, #2
 80073b6:	42a6      	cmp	r6, r4
 80073b8:	d105      	bne.n	80073c6 <__libc_init_array+0x2e>
 80073ba:	bd70      	pop	{r4, r5, r6, pc}
 80073bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80073c0:	4798      	blx	r3
 80073c2:	3601      	adds	r6, #1
 80073c4:	e7ee      	b.n	80073a4 <__libc_init_array+0xc>
 80073c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ca:	4798      	blx	r3
 80073cc:	3601      	adds	r6, #1
 80073ce:	e7f2      	b.n	80073b6 <__libc_init_array+0x1e>
 80073d0:	08007464 	.word	0x08007464
 80073d4:	08007464 	.word	0x08007464
 80073d8:	08007464 	.word	0x08007464
 80073dc:	08007468 	.word	0x08007468

080073e0 <_init>:
 80073e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e2:	bf00      	nop
 80073e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073e6:	bc08      	pop	{r3}
 80073e8:	469e      	mov	lr, r3
 80073ea:	4770      	bx	lr

080073ec <_fini>:
 80073ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ee:	bf00      	nop
 80073f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073f2:	bc08      	pop	{r3}
 80073f4:	469e      	mov	lr, r3
 80073f6:	4770      	bx	lr
